#!/bin/bash
# openqrm-server	openQRM-server init script
#
# chkconfig: 2345 98 24
# description: openQRM is the next generation Linux Data Center management

# support for LSB init script
### BEGIN INIT INFO
# Provides: qrm-server
# Required-Start: $local_fs $network $remote_fs
# Required-Stop: $local_fs $network $remote_fs
# Default-Start:  2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: openQRM-server init script
# Description: openQRM-server init script
### END INIT INFO

export LANG=C
PATH=/usr/bin:/sbin:/bin:/usr/sbin:$PATH
export PATH
LOCKFILE=/var/lock/subsys/openqrm-server
mkdir -p $(dirname $LOCKFILE)
# a new line for sed
NEWLINE='
'


# find the openqrm-server-base-dir
readlink() {
    local path=$1 ll
    if [ -L "$path" ]; then
        ll="$(LC_ALL=C ls -l "$path" 2> /dev/null)" &&
        echo "${ll/* -> }"
    else
        return 1
    fi
}

SCRIPT=$0
while [ -L "$SCRIPT" ]; do
	SRC=$(readlink $SCRIPT)
	if [ "${SRC:0:1}" != "/" ]; then
		SRC=$(dirname $SCRIPT)/$SRC
	fi
	SCRIPT=$SRC
done
export OPENQRM_SERVER_BASE_DIR=`pushd \`dirname $SCRIPT\`/../../../ 1>/dev/null && pwd && popd 1>/dev/null`

# get the openqrm-server configuration + functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/db/$OPENQRM_DATABASE_TYPE/openqrm-$OPENQRM_DATABASE_TYPE-functions


# functions


function openqrm_server_init() {

	echo "First startup detected. Running initialization."

	# make sure to have all enabled plugins stopped and uninstalled
	if [ -d $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/plugins/ ]; then
		echo "NOTICE: Running initialization without uninstallation first !"
		for OPENQRM_PLUGIN in `ls $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/plugins/`; do
			if [ -x $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN ]; then
				$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN stop
				rm -f $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/plugins/$OPENQRM_PLUGIN
			fi
		done
	fi

    # here we start the init

	# need to copy pxelinux.0 to the tftpboot dir
	# sym-linking it does not work because the tftpd-server does not support symlinks
    if [ ! -f $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.0 ]; then
        if [ -f /usr/lib/syslinux/pxelinux.0 ]; then
            cp -a /usr/lib/syslinux/pxelinux.0 $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.0
        elif [ -f /usr/share/syslinux/pxelinux.0 ]; then
            cp -a /usr/share/syslinux/pxelinux.0 $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.0
        else
            echo "ERROR: Could not find syslinux pxelinux.0 file!"
            echo "       Please copy it manually to $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/"
            echo "       and try again ..."
            exit 1
        fi
    fi

    # make sure apache and db are up
	if [ -f /etc/debian_version ]; then
        if ! ps ax | grep apache2 | grep -v grep 1>/dev/null; then
            $OPENQRM_WEBSERVER_INIT start
        fi
	elif [ -f /etc/redhat-release ]; then
        if ! ps ax | grep httpd | grep -v grep 1>/dev/null; then
            $OPENQRM_WEBSERVER_INIT start
        fi
	elif [ -f /etc/SuSE-release ]; then
        if ! ps ax | grep apache | grep -v grep 1>/dev/null; then
            $OPENQRM_WEBSERVER_INIT start
        fi
	fi

	# link the web application directory to the documentroot
	HTPASSWD="htpasswd"
	if [ -f /etc/debian_version ]; then
		ln -sf $OPENQRM_SERVER_BASE_DIR/openqrm/web/ $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm
		# the default apache config normally does not allow to override the authconfig (needed for basic auth)
		# so we allow it for the openqrm directory
		cat $OPENQRM_SERVER_BASE_DIR/openqrm/etc/httpd/openqrm-httpd.conf | sed -e "s#OPENQRM_WEBSERVER_DOCUMENT_ROOT#$OPENQRM_WEBSERVER_DOCUMENT_ROOT#g" >> /etc/apache2/conf.d/openqrm-httpd.conf
	elif [ -f /etc/redhat-release ]; then
		ln -sf $OPENQRM_SERVER_BASE_DIR/openqrm/web/ $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm
		cat $OPENQRM_SERVER_BASE_DIR/openqrm/etc/httpd/openqrm-httpd.conf | sed -e "s#OPENQRM_WEBSERVER_DOCUMENT_ROOT#$OPENQRM_WEBSERVER_DOCUMENT_ROOT#g" >> /etc/httpd/conf.d/openqrm-httpd.conf
	elif [ -f /etc/SuSE-release ]; then
		HTPASSWD="htpasswd2"
		ln -sf $OPENQRM_SERVER_BASE_DIR/openqrm/web/ $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm
		cat $OPENQRM_SERVER_BASE_DIR/openqrm/etc/httpd/openqrm-httpd.conf | sed -e "s#OPENQRM_WEBSERVER_DOCUMENT_ROOT#$OPENQRM_WEBSERVER_DOCUMENT_ROOT#g" >> /etc/apache2/conf.d/openqrm-httpd.conf
		# we need a special treatment for suse to allow followsymlinks in the default-setup
		DEFAULT_CONF=/etc/apache2/default-server.conf
		NEW_CONF=/etc/apache2/default-server.conf.new
		if [ -f $DEFAULT_CONF ]; then
			if grep Options $DEFAULT_CONF | grep -v "#" | head -n1 | grep None 1>/dev/null; then
				echo "Need to allow FollowSymLinks in default-server.conf"
				OLD_IFS=$IFS
				IFS=$NEWLINE
				for LINE in `cat $DEFAULT_CONF`; do
					if echo $LINE | grep -v '#' | grep Options | grep None 1>/dev/null; then
						echo "  Options FollowSymLinks" >> $NEW_CONF
					else
						echo $LINE >> $NEW_CONF
					fi
				done
		        IFS=$OLD_IFS
		        cp -f $DEFAULT_CONF $DEFAULT_CONF.org
		        mv -f $NEW_CONF $DEFAULT_CONF
			fi
		fi
	fi
	$OPENQRM_WEBSERVER_INIT reload

	# create the .htaccess file
	cat $OPENQRM_SERVER_BASE_DIR/openqrm/etc/httpd/openqrm-htaccess.conf | sed -e "s#OPENQRM_WEBSERVER_DOCUMENT_ROOT#$OPENQRM_WEBSERVER_DOCUMENT_ROOT#g" > $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/.htaccess
	# create the default admin user
	$HTPASSWD -bc $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/.htpasswd openqrm openqrm
	chmod 666 $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/.htpasswd

	# create the image-auth dir
	mkdir -p $OPENQRM_SERVER_BASE_DIR/openqrm/web/action/image-auth
	chmod 777 $OPENQRM_SERVER_BASE_DIR/openqrm/web/action/image-auth

    # init and start the remote execution layer
	case "$OPENQRM_EXECUTION_LAYER" in
		dropbear)
			# init the openQRM exec-mechanism via dropbear
			/bin/rm -rf $OPENQRM_SERVER_BASE_DIR/openqrm/etc/dropbear
			mkdir -p $OPENQRM_SERVER_BASE_DIR/openqrm/etc/dropbear/
			$OPENQRM_SERVER_BASE_DIR/openqrm/bin/dropbearkey -t rsa -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/dropbear/dropbear_rsa_host_key
			# allow the webserver user to read it
			chmod 600 $OPENQRM_SERVER_BASE_DIR/openqrm/etc/dropbear/dropbear_rsa_host_key
		
			# create authorized_keys
			PUBLIC_KEY=`$OPENQRM_SERVER_BASE_DIR/openqrm/bin/dropbearkey -y -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/dropbear/dropbear_rsa_host_key | grep ssh`
			if [ ! -d /root/.ssh ]; then
				mkdir /root/.ssh
			fi
			if [ ! -f /root/.ssh/authorized_keys ]; then
				echo "$PUBLIC_KEY" > /root/.ssh/authorized_keys
			else
				OPENQRM_HOST=`echo $PUBLIC_KEY | awk {' print $3 '}`
				if grep $OPENQRM_HOST /root/.ssh/authorized_keys 1>/dev/null; then
					sed -i -e "s#.*$OPENQRM_HOST.*##g" /root/.ssh/authorized_keys
				fi
				echo "$PUBLIC_KEY" >> /root/.ssh/authorized_keys
			fi
			# and put it in the boot-service dir for the resources to download
			echo "$PUBLIC_KEY" > $OPENQRM_SERVER_BASE_DIR/openqrm/web/boot-service/openqrm-server-public-rsa-key
			# create the comman-queue dir
			mkdir -p $OPENQRM_SERVER_BASE_DIR/openqrm/var/spool/
			chmod 777 $OPENQRM_SERVER_BASE_DIR/openqrm/var/spool

			# start the openqrm-execd daemon
			$OPENQRM_SERVER_BASE_DIR/openqrm/sbin/dropbear -p $OPENQRM_EXEC_PORT -r $OPENQRM_SERVER_BASE_DIR/openqrm/etc/dropbear/dropbear_rsa_host_key
			# start the openqrm-cmd-queue
			$OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-cmd-queue &

			;;
		*)
			echo "ERROR: Un-supported command execution layer $openqrm_execution_layer ! Exiting."
			return 1
			;;
	esac

    # create unconfigured file containing a list of available network cards to setup openQRM on
    ifconfig -a | grep -v inet6  | grep -B1 inet | grep -i link | grep -v lo | awk {' print $1 '} > $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/unconfigured
    echo
    if [ "$OPENQRM_SERVER_IP_ADDRESS" != "" ]; then
        echo "Please configure your openQRM Server at : http://$OPENQRM_SERVER_IP_ADDRESS/openqrm/"
    else
        echo "Please configure your openQRM Server at : http://[server-ip-address]/openqrm/"
    fi
    echo
    echo "-> User : openqrm"
    echo "-> Password : openqrm"
    echo
    echo "Please make sure to change the default password after startup !"
    echo
    sleep 2
}




# this function is being ran from the ui after
# openqrm-server.conf is being setup correctly
function openqrm_server_init_config() {
    RESTORE_LAST_STATE=$1

    if [ -f $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/unconfigured ]; then
        echo "NOTICE: Initialyzing the openQRM Database ..."
        echo "NOTICE: Initialyzing the openQRM Database ..." | logger


        # initialyze the database
        chmod +x $OPENQRM_SERVER_BASE_DIR/openqrm/etc/db/$OPENQRM_DATABASE_TYPE/openqrm-$OPENQRM_DATABASE_TYPE-functions
        if ! $OPENQRM_SERVER_BASE_DIR/openqrm/etc/db/$OPENQRM_DATABASE_TYPE/openqrm-$OPENQRM_DATABASE_TYPE-functions init; then
            echo "ERROR: Could not initialyze the openQRM Database !"
            echo "       Please check your Database-configuration"
            echo "ERROR: Could not initialyze the openQRM Database !" | logger
            echo "       Please check your Database-configuration" | logger
            return -1
        fi

        # check if we should restore the last state
        if [ "$RESTORE_LAST_STATE" == "restore" ]; then
            echo "NOTICE: Restoring last openQRM state backup ..."
            echo "NOTICE: Restoring last openQRM state backup ..." | logger
            # check if backups are not locked
            if [ ! -f $OPENQRM_SERVER_STATE_DIR/locked ]; then
                if [ "$OPENQRM_RESTORE_STATE" != "false" ]; then
                    # check if there is a server state to restore
                    LAST_SERVER_STATE_BACKUP=`ls -tr $OPENQRM_SERVER_STATE_DIR/uninstall-* 2>/dev/null | tail -n1 | sed -s "s/\.tgz//g"`
                    if [ "$LAST_SERVER_STATE_BACKUP" != "" ]; then
                        LAST_SERVER_STATE_BACKUP=`basename $LAST_SERVER_STATE_BACKUP`
                        echo "NOTICE: Found backup of last openQRM-server state $LAST_SERVER_STATE_BACKUP, restoring it"
                        echo "NOTICE: Found backup of last openQRM-server state $LAST_SERVER_STATE_BACKUP, restoring it" | logger
                        openqrm_server_state restore $LAST_SERVER_STATE_BACKUP
                    fi
                fi
            else
                echo "NOTICE: Found openQRM-server state backups locked by $OPENQRM_SERVER_STATE_DIR/locked"
                echo "        To enable automatic state restore please remove this lockfile."
                echo "NOTICE: Skipping openQRM-server state restore"
                echo "NOTICE: Found openQRM-server state backups locked by $OPENQRM_SERVER_STATE_DIR/locked" | logger
                echo "NOTICE: Skipping openQRM-server state restore" | logger
            fi
        else
            echo "NOTICE: Skipping openQRM state restore ..."
            echo "NOTICE: Skipping openQRM state restore ..." | logger
        fi

        # create $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.cfg/default
        echo "NOTICE: Creating default PXE-configuration"
        echo "NOTICE: Creating default PXE-configuration" | logger
        mkdir -p $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.cfg/
        openqrm_server_create_pxe_config -1 default default

        # add automatic startup to init
        openqrm_chkconfig add openqrm-server

        # here we create + add the default kernel+kernel-version to the openQRM-server
        # via the kernel-action.form. If this returns bad something is wrong
        DEFAULT_KERNEL_VERSION=`uname -r`
        echo "NOTICE: Creating the default kernel version $DEFAULT_KERNEL_VERSION"
        echo "NOTICE: Creating the default kernel version $DEFAULT_KERNEL_VERSION" | logger
        if [ -f /etc/debian_version ]; then
            INITRD_TYPE="initramfs"
        elif [ -f /etc/SuSE-release ]; then
            INITRD_TYPE="initramfs"
        elif [ -f /etc/fedora-release ]; then
            INITRD_TYPE="initramfs"
        else
            INITRD_TYPE="ext2"
        fi
        openqrm_server_create_kernel default $DEFAULT_KERNEL_VERSION / $INITRD_TYPE
        if ! openqrm_server_manage_kernel add openqrm openqrm default $DEFAULT_KERNEL_VERSION; then
            echo "ERROR: Could not add the default kernel!"
            echo "         Please check your Apache-configuration according openQRM"
            echo "ERROR: Could not add the default kernel! Please check your Apache-configuration according openQRM" | logger
            return -1
        fi

        # remove configure lock
        rm -f $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/unconfigured

        # (re-) start
        $0 start
        echo "NOTICE: Successfully initialyzed and started the openQRM Server"
        echo "NOTICE: Successfully initialyzed and started the openQRM Server" | logger
        return 0

    else
        echo "NOTICE: This openQRM Server is already configured. Skipping re-init"
        echo "NOTICE: This openQRM Server is already configured. Skipping re-init" | logger
        return 0
    fi

}





function openqrm_server_uninstall() {

	echo "Uninstalling openQRM-server ver. $OPENQRM_SERVER_VERSION"

	# backup state
    chmod +x $OPENQRM_SERVER_BASE_DIR/openqrm/etc/db/$OPENQRM_DATABASE_TYPE/openqrm-$OPENQRM_DATABASE_TYPE-functions
	openqrm_server_state backup uninstall

	# stopping and uninstalling all enabled plugins
	for OPENQRM_PLUGIN in `ls $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/plugins/`; do
		if [ -x $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN ]; then
			$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN stop
			rm -f $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/plugins/$OPENQRM_PLUGIN
		fi
	done

	# drop db
	$OPENQRM_SERVER_BASE_DIR/openqrm/etc/db/$OPENQRM_DATABASE_TYPE/openqrm-$OPENQRM_DATABASE_TYPE-functions drop

	# remove automatic startup
	openqrm_chkconfig del openqrm-server
	rm -f /etc/init.d/openqrm-server

	# removing the apache web + config
	rm -f $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm
	if [ -f /etc/debian_version ]; then
		rm -f /etc/apache2/conf.d/openqrm-httpd.conf
	elif [ -f /etc/redhat-release ]; then
		rm -f /etc/httpd/conf.d/openqrm-httpd.conf
	elif [ -f /etc/SuSE-release ]; then
		rm -f /etc/apache2/conf.d/openqrm-httpd.conf
	fi
	$OPENQRM_WEBSERVER_INIT reload

	# remove default file to re-init at next startup
	rm -f $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.cfg/default

	case "$OPENQRM_EXECUTION_LAYER" in
		dropbear)
			# remove dropbear key
			rm -rf $OPENQRM_SERVER_BASE_DIR/openqrm/etc/dropbear
			rm -rf $OPENQRM_SERVER_BASE_DIR/openqrm/var
			;;
	esac

	echo "Uninstallation of openQRM-server finished"
}


function openqrm_server_start() {

    # check if we are at first-startup, if yes do initialization
    if [ ! -f $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.cfg/default ]; then
        openqrm_server_init
    fi
    if [ -f $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/unconfigured ]; then
        echo "Skipping startup. This openQRM-server ver. $OPENQRM_SERVER_VERSION is not configured yet."
    else
        echo "Starting the openQRM-server ver. $OPENQRM_SERVER_VERSION"
        # check openqrm-interface
        ifconfig "$OPENQRM_SERVER_INTERFACE" | grep inet 1>/dev/null 2>&1 || \
            { echo "Interface $OPENQRM_SERVER_INTERFACE is down. Please configure and activate it and try again"; return 1; }
        CONFIGURED_IP=$(cat $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.cfg/default | grep "openqrm=" | sed -e "s/.*openqrm=//" | awk {' print $1 '})
        if [ "$OPENQRM_SERVER_IP_ADDRESS" != "$CONFIGURED_IP" ]; then
            echo -e "Interface $OPENQRM_SERVER_INTERFACE has the wrong ip-configuration.\n" \
                  "       The openQRM-server is configured to have the ip-address $CONFIGURED_IP\n" \
                  "       but the interface $OPENQRM_SERVER_INTERFACE is running with the ip-address $OPENQRM_SERVER_IP_ADDRESS"
            # create lockfile again to forcre re-configuration
            touch $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/unconfigured
            echo
            if [ "$OPENQRM_SERVER_IP_ADDRESS" != "" ]; then
                echo "Please re-configure your openQRM Server at : http://$OPENQRM_SERVER_IP_ADDRESS/openqrm/"
            else
                echo "Please re-configure your openQRM Server at : http://[server-ip-address]/openqrm/"
            fi
            echo
            sleep 2
            return 1
        fi

        # start the execution layer
        case "$OPENQRM_EXECUTION_LAYER" in
            dropbear)
                killall dropbear 1>/dev/null 2>&1
                killall openqrm-cmd-queue 1>/dev/null 2>&1
                # start the openqrm-execd daemon
                $OPENQRM_SERVER_BASE_DIR/openqrm/sbin/dropbear -p $OPENQRM_EXEC_PORT -r $OPENQRM_SERVER_BASE_DIR/openqrm/etc/dropbear/dropbear_rsa_host_key
                # start the openqrm-cmd-queue
                $OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-cmd-queue &
                ;;
            *)
                echo "ERROR: Un-supported command execution layer $openqrm_execution_layer ! Exiting."
                return 1
                ;;
        esac

        # and the monitoring infra-structure
        $OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-monitord &

        # start all enabled plugins
        echo "Starting enabled openQRM-server plugins"
        for OPENQRM_PLUGIN in `ls $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/plugins/`; do
            if [ -x $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN ]; then
                $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN start
            fi
        done

        touch ${LOCKFILE}
    fi
	
}


function openqrm_server_stop() {

	# stop all enabled plugins
	echo "Stopping enabled openQRM-server plugins"
	for OPENQRM_PLUGIN in `ls $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/plugins/`; do
		if [ -x $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN ]; then
			$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN stop
		fi
	done

	echo "Stopping the openQRM-server ver. $OPENQRM_SERVER_VERSION"

	case "$OPENQRM_EXECUTION_LAYER" in
		dropbear)
			killall dropbear 1>/dev/null 2>&1
			killall openqrm-cmd-queue 1>/dev/null 2>&1
			;;
		openqrm-execd)
			killall openqrm-exec-port-monitor 1>/dev/null 2>&1
			killall openqrm-execd 1>/dev/null 2>&1
			;;
		*)
			echo "ERROR: Un-supported command execution layer $openqrm_execution_layer ! Exiting."
			return 1
			;;
	esac

	killall openqrm-monitord 1>/dev/null 2>&1
	/bin/rm -f ${LOCKFILE}
}


function openqrm_server_status() {
	if [ -f ${LOCKFILE} ]; then
		echo "openQRM-server ver. $OPENQRM_SERVER_VERSION is running"
        exit 0
	else
		echo "openQRM-server ver. $OPENQRM_SERVER_VERSION is not running"
        exit 3
	fi
}


# main
ADDITIONAL_PARAM=$2
case "$1" in
	start)
		openqrm_server_start
		;;
	stop)
		openqrm_server_stop
		;;
	status)
		openqrm_server_status
		;;
	restart)
		openqrm_server_stop
		sleep 1
		openqrm_server_start
		;;
	init)
		openqrm_server_init
		;;
	init_config)
		openqrm_server_init_config $ADDITIONAL_PARAM
		;;
	uninstall)
		openqrm_server_uninstall
		;;
	*)
		echo "Usage: $0 {start|stop|status|restart|init|uninstall}"
		exit 1

esac



