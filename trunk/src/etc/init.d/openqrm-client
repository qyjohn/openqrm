#!/bin/bash
# openqrm-client	openQRM init script for the managed resources
#
# chkconfig: 2345 98 19
# description: openQRM is the next generation Linux Data Center management

# support for LSB init scripts
### BEGIN INIT INFO
# Provides:
# Required-Start: $all
# Required-Stop: $all
# Default-Start:  2 3 4 5
# Default-Stop: 0 1 2 6
# Short-Description: openQRM init script for the managed resources
# Description: openQRM init script for the managed resources
### END INIT INFO

#
# This file is part of openQRM.
#
# openQRM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# openQRM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with openQRM.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2009, Matthias Rechenburg <matt@openqrm.com>
#

export LANG=C
PATH=/usr/bin:/sbin:/bin:/usr/sbin
export PATH
LOCKFILE=/var/lock/subsys/openqrm
mkdir -p $(dirname $LOCKFILE)

export `eval cat /proc/cmdline`	
. /var/openqrm/openqrm-resource.conf
export OPENQRM_SERVER_BASE_DIR=$resource_basedir
export OPENQRM_SOURCE_DIR=$resource_basedir/openqrm

. $resource_basedir/openqrm/include/openqrm-functions
. $resource_basedir/openqrm/include/openqrm-package-functions

# define wget to use with https
if [ "$openqrm_web_protocol" == "https" ]; then
    WGET="wget -q --no-check-certificate"
else
    WGET="wget -q"
fi

# gets/starts/stops enabled boot-services for the resources
function openqrm_boot_service() {
	local BOOT_SERVICE=$1
	local BOOT_SERVICE_CMD=$2
	local CURRENT=`pwd`
	
	# get + install the package during start
	if [ "$BOOT_SERVICE_CMD" == "start" ]; then
		echo "Getting boot-service package $BOOT_SERVICE"
		mkdir -p  $resource_basedir/openqrm/plugins/$BOOT_SERVICE
		cd $resource_basedir/openqrm/plugins/$BOOT_SERVICE
		if ! $WGET $openqrm_web_protocol://$resource_openqrmserver/openqrm/boot-service/boot-service-$BOOT_SERVICE.tgz; then
			echo "ERROR: Could not get boot-service package for boot-service $BOOT_SERVICE !"
			return 1
		fi
		tar -xzf boot-service-$BOOT_SERVICE.tgz
		rm -f boot-service-$BOOT_SERVICE.tgz	
	fi
	# run the boot-service cmd
	BOOT_SERVICE_INIT="$resource_basedir/openqrm/plugins/$BOOT_SERVICE/etc/init.d/$BOOT_SERVICE"
	if [ -x $BOOT_SERVICE_INIT ]; then
		echo "Running $BOOT_SERVICE_CMD on boot-service $BOOT_SERVICE"
		$BOOT_SERVICE_INIT $BOOT_SERVICE_CMD
	fi
	cd $CURRENT
}





function openqrm_client_start() {
	echo "Starting openQRM-client"

	openqrm_client_stop 1>/dev/null 2>&1
	# checks
	umount /initrd/lib/modules 1>/dev/null 2>&1
	umount /initrd/boot 1>/dev/null 2>&1
	umount /initrd/ 1>/dev/null 2>&1
	grep -q "/initrd" /proc/mounts && umount /initrd
    chmod 666 /dev/null
    if [ ! -e /dev/tty ]; then
        cd /dev
        mknod tty c 5 0
        cd
    fi

	case "$openqrm_execution_layer" in
		dropbear)
			# start dropbear as openqrm-execd
			/bin/rm -rf $resource_basedir/openqrm/etc/dropbear
			mkdir -p $resource_basedir/openqrm/etc/dropbear/
			$resource_basedir/openqrm/bin/dropbearkey -t rsa -f $resource_basedir/openqrm/etc/dropbear/dropbear_rsa_host_key
			# get the public key of the openQRM server
			if ! $WGET $openqrm_web_protocol://$resource_openqrmserver/openqrm/boot-service/openqrm-server-public-rsa-key; then
				echo "ERROR: Could not get the public key of the openQRM-server at $resource_openqrmserver ! Please check the certificates !"
				return 1
			fi
			if [ ! -d /root/.ssh ]; then
				mkdir -p /root/.ssh
				chmod 700 /root/.ssh
			fi
			if [ ! -f /root/.ssh/authorized_keys ]; then
				mv -f openqrm-server-public-rsa-key /root/.ssh/authorized_keys
				chmod 600 /root/.ssh/authorized_keys
			else
				OPENQRM_HOST=`cat openqrm-server-public-rsa-key | awk {' print $3 '}`
				if grep $OPENQRM_HOST /root/.ssh/authorized_keys 1>/dev/null; then
					sed -i -e "s#.*$OPENQRM_HOST.*##g" /root/.ssh/authorized_keys
				fi
				cat openqrm-server-public-rsa-key >> /root/.ssh/authorized_keys
				rm -f openqrm-server-public-rsa-key
				chmod 600 /root/.ssh/authorized_keys
			fi
			# try to install and use the distro dropbear package; if it fails, fall back to our static build
			DROPBEAR=`which dropbear`
			if test -z $DROPBEAR; then
				FORCE_INSTALL=true openqrm_install_os_dependency dropbear
				# on debian and ubuntu, lets make sure it is not started as a service due to our install
				if test -e /etc/default/dropbear; then
					if grep '^NO_START=0' /etc/default/dropbear 1>/dev/null|| ! grep 'NO_START' /etc/default/dropbear 1>/dev/null; then 
						# looks like it has been set to start by default; let's revert that
						/etc/init.d/dropbear stop
						sed -i -e "s/^NO_START=0/NO_START=1/g" /etc/default/dropbear
						# just in case it was never there in the first place
						echo "NO_START=1" >> /etc/default/dropbear
					fi
				fi
			fi
			# check again if dropbear exists in $PATH
			DROPBEAR=`which dropbear`
			# start dropbear
			if test -z $DROPBEAR; then
				$resource_basedir/openqrm/sbin/dropbear -p $resource_execdport -r $resource_basedir/openqrm/etc/dropbear/dropbear_rsa_host_key
			else
				$DROPBEAR -p $resource_execdport -r $resource_basedir/openqrm/etc/dropbear/dropbear_rsa_host_key
			fi
			;;
		openqrm-execd)
			# start openqrm-execd
			$resource_basedir/openqrm/sbin/openqrm-exec-port-monitor $resource_ip $resource_execdport | $resource_basedir/openqrm/sbin/openqrm-execd &
			;;
		*)
			echo "ERROR: Un-supported command execution layer $openqrm_execution_layer ! Exiting."
			return 1
			;;
	esac

	if [ ! -f /linuxrc ]; then
		# start boot-services from enabled plugins
		for boot_service in $openqrm_boot_services; do
			openqrm_boot_service $boot_service start
		done
	fi
	# start openqrm-monitord
    if [ ! -d /tmp ]; then mkdir -p /tmp; fi
    nohup $resource_basedir/openqrm/sbin/openqrm-monitord 1>/tmp/openqrm-monitord.out 2>&1 &
    rm -f /tmp/openqrm-monitord.out
	openqrm_post_event $resource_id "openqrm-client" 5 openqrm_client_start "Resource $resource_id fully started"
	touch ${LOCKFILE}
}


function openqrm_client_stop() {
	echo "Stopping openQRM-client"

	if [ ! -f /linuxrc ]; then
		# stop boot-services from enabled plugins
		for boot_service in $openqrm_boot_services; do
			openqrm_boot_service $boot_service stop
		done
	fi
	# stop openqrm-execd
	case "$openqrm_execution_layer" in
		dropbear)
			killall dropbear 1>/dev/null 2>&1
			for OPENQRM_PID in `ps ax 2>/dev/null | grep dropbear | grep -v grep | awk {' print $1 '}`; do
				kill $OPENQRM_PID
			done
			;;
		openqrm-execd)
			killall openqrm-exec-port-monitor 1>/dev/null 2>&1
			killall openqrm-execd 1>/dev/null 2>&1
			for OPENQRM_PID in `ps ax 2>/dev/null | grep openqrm-monitord | grep -v grep | awk {' print $1 '}`; do
				kill $OPENQRM_PID
			done
			for OPENQRM_PID in `ps ax 2>/dev/null | grep openqrm-execd | grep -v grep | awk {' print $1 '}`; do
				kill $OPENQRM_PID
			done
			;;
		*)
			echo "ERROR: Un-supported command execution layer $openqrm_execution_layer ! Exiting."
			return 1
			;;
	esac
	killall openqrm-monitord 1>/dev/null 2>&1
	# in case we do not have killall (e.g. on debian-minimal install) be sure to stop the openqrm-agents anyway
	for OPENQRM_PID in `ps ax 2>/dev/null | grep openqrm-monitord | grep -v grep | awk {' print $1 '}`; do
		kill $OPENQRM_PID
	done
	/bin/rm -f ${LOCKFILE}
}

function openqrm_client_status() {
	if [ -f ${LOCKFILE} ]; then
		echo "openQRM-client service is running"
	else
		echo "openQRM-client service is not running"
	fi
}



case "$1" in
	start)
		openqrm_client_start
		;;
	stop)
		openqrm_client_stop
		;;
	status)
		openqrm_client_status
		;;
	restart)
		openqrm_client_stop
		openqrm_client_start
		;;
	*)
		echo $"Usage: $0 {start|stop|status|restart}"
		exit 1
		;;
esac

