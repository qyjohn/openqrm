#!/bin/bash

# linuxrc for the openQRM initrd
export SHELL=/bin/bash
PATH=/sbin:/bin:/usr/bin:/usr/sbin
export PATH
# some defines 
export IMAGE_FSTAB=/mnt/etc/fstab
export IMAGE_FSTAB_STATIC=/mnt/etc/fstab-static

# functions

function import_kernel() {
	mount -t tmpfs none /lib/modules
	cd /lib/modules
	tftp $OPENQRM_SERVER_IP_ADDRESS -g -r boot/modules-$kernel_name.tgz -l modules-$kernel_name.tgz
	tar -C / -xzf /lib/modules/modules-$kernel_name.tgz
	rm -f modules-$kernel_name.tgz
	mkdir -p /boot
	mount -t tmpfs none /boot
	cd /boot
	tftp $OPENQRM_SERVER_IP_ADDRESS -g -r boot/vmlinuz-$kernel_name -l vmlinuz-$kernel_name
	mv vmlinuz-$kernel_name vmlinuz-$kernel_version
	tftp $OPENQRM_SERVER_IP_ADDRESS -g -r boot/System.map-$kernel_name -l System.map-$kernel_name
	mv System.map-$kernel_name System.map-$kernel_version
	cd /
	depmod -a
	hwsetup -p
}


# this functions adds the common entries to the images fstab
function create_fstab_commons() {
	echo "none	 /dev/pts     devpts   gid=5,mode=620     0 0" >> $IMAGE_FSTAB
	echo "none	 /proc	proc     defaults	   0 0" >> $IMAGE_FSTAB
	echo "none	 /dev/shm     tmpfs    defaults	   0 0" >> $IMAGE_FSTAB
	echo "/dev/fd0     /mnt/floppy  auto     noauto,owner,kudzu 0 0" >> $IMAGE_FSTAB
	IFS=$'\n'
	for IDEDEVICES in $(ls /proc/ide); do
		if grep cdrom /proc/ide/$IDEDEVICES/media 1>/dev/null 2>&1; then
			echo "Found cdrom at $IDEDEVICES"
			mkdir -p /mnt/cdrom$LOOP 1>/dev/null 
			echo "/dev/$IDEDEVICES     /mnt/cdrom$LOOP   udf,iso9660 noauto,owner,kudzu,ro 0 0" >> $IMAGE_FSTAB
			LOOP=$(( LOOP +1 ))
		fi
	done
	FOUND_SWAP=0
	for SWPSPACE in $(cat /proc/partitions |grep '[0-9]' | awk '{print $4}'); do
		if echo $SWPSPACE | grep '[0-9]' 1>/dev/null; then
			if swapon /dev/${SWPSPACE} 1>/dev/null 2>&1; then
				swapoff /dev/${SWPSPACE} 1>/dev/null 
				echo "Adding /dev/${SWPSPACE} as swap space"
				echo "/dev/${SWPSPACE} swap	swap	defaults	0 0" >> $IMAGE_FSTAB
				FOUND_SWAP=1
			fi
		fi
	done
	if [ "$FOUND_SWAP" == "0" ]; then
		# we need to create a small swap file
		dd if=/dev/zero of=/mnt/tmp/mini-swap.swap bs=1M count=1
		mkswap /mnt/tmp/mini-swap.swap
		echo "Adding mini-swap file as swap space"
		echo "/tmp/mini-swap.swap swap	swap	noauto	0 0" >> $IMAGE_FSTAB
	fi
	IFS=$OLD_IFS
	if [ -f $IMAGE_FSTAB_STATIC ]; then
		echo "Found $IMAGE_FSTAB_STATIC, adding to $IMAGE_FSTAB"
		cat $IMAGE_FSTAB_STATIC >> $FSTAB_QRM
	fi



}





# main
mount -t proc proc /proc
mkdir -p /dev/fd
ln -sf /proc/self/fd /dev/fd
echo 0x0100 > /proc/sys/kernel/real-root-dev
echo 6 > /proc/sys/kernel/printk
syslogd &&  klogd
# need to run depmod 2 times as experienced
depmod -a
depmod -a
hwsetup -p
eval `cat /proc/cmdline`
if grep -q sysfs /proc/filesystems ; then
	mount -t sysfs none /sys
fi
# collecting some infos from /proc/cmdline
OPENQRM_RESOURCE_MAC_ADDRESS=`echo $BOOTIF | sed -e "s/-/:/g"  | sed -e "s/^01://g" | tr '[:lower:]' '[:upper:]'`
OPENQRM_RESOURCE_MANAGED_INTERFACE=`ifconfig -a | grep $OPENQRM_RESOURCE_MAC_ADDRESS | awk {' print $1 '}`
OPENQRM_RESOURCE_IP_ADDRESS=`echo $ip | cut -d':' -f1`
OPENQRM_SERVER_IP_ADDRESS=`echo $ip | cut -d':' -f2`
OPENQRM_RESOURCE_DEFAULT_GATEWAY=`echo $ip | cut -d':' -f3`
OPENQRM_RESOURCE_SUBNETMASK=`echo $ip | cut -d':' -f4`
OPENQRM_RESOURCE_BROADCAST=`ipcalc -b $OPENQRM_RESOURCE_IP_ADDRESS $OPENQRM_RESOURCE_SUBNETMASK | cut -d'=' -f2`

OPENQRM_RESOURCE_PARAMETER_FILE="/var/openqrm/openqrm-resource.conf"
mkdir -p `dirname $OPENQRM_RESOURCE_PARAMETER_FILE`

# adjust arp settings
if [ -f /proc/sys/net/ipv4/conf/$OPENQRM_RESOURCE_MANAGED_INTERFACE/arp_filter ]; then
	echo 1 > /proc/sys/net/ipv4/conf/$OPENQRM_RESOURCE_MANAGED_INTERFACE/arp_filter
fi
if [ -f /proc/sys/net/ipv4/conf/$OPENQRM_RESOURCE_MANAGED_INTERFACE/rp_filter ]; then
	echo 1 > /proc/sys/net/ipv4/conf/$OPENQRM_RESOURCE_MANAGED_INTERFACE/rp_filter
fi

# get the net working
echo "Bringing up $OPENQRM_RESOURCE_MANAGED_INTERFACE:oq"
echo "-> mac-address	: $OPENQRM_RESOURCE_MAC_ADDRESS"
echo "-> ip-address		: $OPENQRM_RESOURCE_IP_ADDRESS"
echo "-> subnetmask		: $OPENQRM_RESOURCE_SUBNETMASK"
echo "-> broadcast		: $OPENQRM_RESOURCE_BROADCAST"
echo "-> default gw		: $OPENQRM_RESOURCE_DEFAULT_GATEWAY"
echo "-> openQRM-server	: $OPENQRM_SERVER_IP_ADDRESS"
ifconfig lo 127.0.0.1 up
ifconfig $OPENQRM_RESOURCE_MANAGED_INTERFACE down
ifconfig $OPENQRM_RESOURCE_MANAGED_INTERFACE up
ifconfig $OPENQRM_RESOURCE_MANAGED_INTERFACE:oq $OPENQRM_RESOURCE_IP_ADDRESS netmask $OPENQRM_RESOURCE_SUBNETMASK broadcast $OPENQRM_RESOURCE_BROADCAST up
if [ "$OPENQRM_RESOURCE_DEFAULT_GATEWAY" != "0.0.0.0" ]; then
	route add default gw $OPENQRM_RESOURCE_DEFAULT_GATEWAY
fi

# get resource parameter
echo "Getting resource-parameters ..."
if [ "$id" == "-1" ]; then
	echo "New resource detected ! Adding to the openQRM-server at $OPENQRM_SERVER_IP_ADDRESS"
fi	
# sending resource-id will add the resource if not existing (-1 = new resource)
wget -q -O $OPENQRM_RESOURCE_PARAMETER_FILE "http://$OPENQRM_SERVER_IP_ADDRESS/openqrm/action/resource-monitor.php?resource_command=get_parameter&resource_id=$id&resource_mac=$OPENQRM_RESOURCE_MAC_ADDRESS&resource_ip=$OPENQRM_RESOURCE_IP_ADDRESS"
. $OPENQRM_RESOURCE_PARAMETER_FILE

# get kernel + modules by tftp
echo "Importing kernel files"
import_kernel

# run default openqrm-client boot-service
echo "Getting openqrm-client package"
cd /
wget -q "http://$OPENQRM_SERVER_IP_ADDRESS/openqrm/boot-service/openqrm-client.tgz"
tar -xzf openqrm-client.tgz
rm -f openqrm-client.tgz
$resource_basedir/openqrm/etc/init.d/openqrm-client start

# if any deployment plugin is enabled, handle over the control
# -> deployment plugins will take care to mount the root fs
#    and do the pivot_root if needed
# -> if the system is "idle" (meaning no deployment plugin enabled)
#    we return to finish the linuxrc and give a admin shell
#    -> no need to start any monitoring daemons because the system
#       will do "nothing" anyway
if [ "$image_type" != "ram" ]; then
	eval $image_deployment_parameter
	cd /
	wget -q "http://$OPENQRM_SERVER_IP_ADDRESS/openqrm/boot-service/root-mount.$image_type-deployment"
	chmod +x root-mount.$image_type-deployment
	# source the deployment plugin command, it will provide 
	# the functions to mount/remount the rootfs at /mnt according 
	# to the deployment-type and the image_deployment_parameters
	. ./root-mount.$image_type-deployment

	# mount ro (provided by the deployment plugin)
	mount_rootfs

	# fill /boot and /lib/modules on the fs-image
	echo "Filling /boot and /lib/modules"
	rm -rf /mnt/boot/vmlinuz-$kernel_version /mnt/boot/System.map-$kernel_version /mnt/lib/modules/$kernel_version
	cp -af /boot/vmlinuz-$kernel_version /mnt/boot/vmlinuz-$kernel_version
	cp -af /boot/System.map-$kernel_version /mnt/boot/System.map-$kernel_version
	cp -af /lib/modules/$kernel_version /mnt/lib/modules/

	# create custom fstab / needed for the remount rw during the system init
	# (custom entry provided by the deployment plugin)
	create_fstab
	# (common entries provided by a local function)
	create_fstab_commons

	# transfer resource basedir
	echo "Preparing resource openQRM client"

	# prepare init according plugin services
	echo "Preparing system init"

	# managed shared image
	echo "Prepare image as shared"

	# remount rw (provided by the deployment plugin)
	remount_rootfs

	# chroot + init
	killall syslogd klogd 1>/dev/null 2>&1
	sleep 2
	if grep sysfs /proc/filesystems 1>/dev/null ; then
		umount /sys
	fi
	umount /proc
	
	cd /mnt
	
	pivot_root . /mnt/initrd
	export CONSOLE=/dev/console
	if [ -e /usr/sbin/chroot ]; then
		exec /usr/sbin/chroot . /sbin/init 3
	else
		exec /usr/bin/chroot . /sbin/init 3
	fi
	# here the system will do a normal init 
	# from the mounted rootfs image	

else
	# send idle/available
	echo "Sending idle/available to openQRM-server at $OPENQRM_SERVER_IP_ADDRESS"
	wget -q -O /dev/null "http://$OPENQRM_SERVER_IP_ADDRESS/openqrm/action/resource-monitor.php?resource_command=update_status&resource_id=$resource_id&resource_state=idle&resource_event=available"

	# rcs0 will be started here from init
fi

