#!/bin/bash

# linuxrc for the openQRM initrd
export SHELL=/bin/bash
PATH=/sbin:/bin:/usr/bin:/usr/sbin
export PATH
# some defines 
export IMAGE_FSTAB=/mnt/etc/fstab
export IMAGE_FSTAB_STATIC=/mnt/etc/fstab-static
export NETWORK_SERVICES_TO_ADJUST="/etc/init.d/portmap /etc/init.d/netfs /etc/rc.d/init.d/portmap /etc/rc.d/init.d/netfs /etc/init.d/network /etc/rc.d/init.d/network /etc/init.d/networking /etc/rc.d/init.d/networking"
export NOT_START_SERVICE="dbus avahi-daemon"

# functions

function prepare_udev() {
	mkdir -p /mnt/initrd
	if [ ! -e /mnt/dev/console ] || [ ! -e /mnt/dev/null ]; then
		if [ ! -d /mnt/dev ]; then
			mkdir -p /mnt/dev
		fi
		mount -t tmpfs none /mnt/dev/
		cp -a /dev/* /mnt/dev/
		mkdir -p /mnt/dev/.udevdb/
	fi
}


function prepare_var() {
	VAR_LOOP=0
	local OLD_IFS=$IFS
	IFS=$'\n'
	for var_run_dir in $(ls -al /mnt/var/run | grep ^d); do
		unset IFS
		VAR_ARRAY=($var_run_dir)
		VAR_DIR=${VAR_ARRAY[8]}
		if [ "$VAR_DIR" != "." ] && [ "$VAR_DIR" != ".." ]; then
			VAR_USER=${VAR_ARRAY[2]}
			VAR_GROUP=${VAR_ARRAY[3]}
			VAR_RUN_DIR[$VAR_LOOP]="$VAR_DIR $VAR_USER $VAR_GROUP"
			VAR_LOOP=$(( VAR_LOOP + 1 ))
		fi
	done
	mount -n -t tmpfs none /mnt/var/run
	rm -f /mnt/var/log/wtmp
	ln -s -f ../run/wtmp /mnt/var/log/wtmp
	touch /mnt/var/run/wtmp
	chmod 0664 /mnt/var/run/wtmp
	for (( d=0;d<$VAR_LOOP;d++)); do
		VAR_ARRAY=(${VAR_RUN_DIR[$d]})
		VAR_DIR=${VAR_ARRAY[0]}
		VAR_USER=${VAR_ARRAY[1]}
		VAR_GROUP=${VAR_ARRAY[2]}
		mkdir -p /mnt/var/run/$VAR_DIR
		chown $VAR_USER:$VAR_GROUP /mnt/var/run/$VAR_DIR 1>/dev/null 
	done
	unset IFS
	return 0
}


function import_kernel() {
	mkdir -p /tmp_download
	mount -t tmpfs none /tmp_download
	mount -t tmpfs none /lib/modules
	cd /tmp_download
	tftp $OPENQRM_SERVER_IP_ADDRESS -g -r boot/modules-$kernel_name.tgz -l modules-$kernel_name.tgz
	tar -C / -xzf /tmp_download/modules-$kernel_name.tgz
	rm -f modules-$kernel_name.tgz
	sync
	mkdir -p /boot
	mount -t tmpfs none /boot
	cd /boot
	tftp $OPENQRM_SERVER_IP_ADDRESS -g -r boot/vmlinuz-$kernel_name -l vmlinuz-$kernel_name
	mv vmlinuz-$kernel_name vmlinuz-$kernel_version
	tftp $OPENQRM_SERVER_IP_ADDRESS -g -r boot/System.map-$kernel_name -l System.map-$kernel_name
	mv System.map-$kernel_name System.map-$kernel_version
	cd /
	depmod -a
	# load ide disk + cdroms
	modprobe ide-core
	modprobe ide-generic
	modprobe ide-disk
	modprobe ata_piix
	hwsetup -p
	umount /tmp_download
	rmdir /tmp_download
	# start udev
	udevd --daemon
}


# this functions adds the common entries to the images fstab
function create_fstab_commons() {
	local OLD_IFS=$IFS
	echo "none	 /dev/pts     devpts   gid=5,mode=620     0 0" >> $IMAGE_FSTAB
	echo "none	 /proc	proc     defaults	   0 0" >> $IMAGE_FSTAB
	echo "none	 /dev/shm     tmpfs    defaults	   0 0" >> $IMAGE_FSTAB
	echo "/dev/fd0     /mnt/floppy  auto     noauto,owner,kudzu 0 0" >> $IMAGE_FSTAB
	IFS=$'\n'
	for IDEDEVICES in $(ls /proc/ide); do
		if grep cdrom /proc/ide/$IDEDEVICES/media 1>/dev/null 2>&1; then
			echo "Found cdrom at $IDEDEVICES"
			mkdir -p /mnt/cdrom$LOOP 1>/dev/null 
			echo "/dev/$IDEDEVICES     /mnt/cdrom$LOOP   udf,iso9660 noauto,owner,kudzu,ro 0 0" >> $IMAGE_FSTAB
			LOOP=$(( LOOP +1 ))
		fi
	done
	FOUND_SWAP=0
	for SWPSPACE in $(cat /proc/partitions |grep '[0-9]' | awk '{print $4}'); do
		if echo $SWPSPACE | grep '[0-9]' 1>/dev/null; then
			if swapon /dev/${SWPSPACE} 1>/dev/null 2>&1; then
				swapoff /dev/${SWPSPACE} 1>/dev/null 
				echo "Adding /dev/${SWPSPACE} as swap space"
				echo "/dev/${SWPSPACE} swap	swap	defaults	0 0" >> $IMAGE_FSTAB
				FOUND_SWAP=1
			fi
		fi
	done
	if [ "$FOUND_SWAP" == "0" ]; then
		# we need to create a small swap file
		dd if=/dev/zero of=/mnt/tmp/mini-swap.swap bs=1M count=1
		mkswap /mnt/tmp/mini-swap.swap
		echo "Adding mini-swap file as swap space"
		echo "/tmp/mini-swap.swap swap	swap	noauto	0 0" >> $IMAGE_FSTAB
	fi
	IFS=$OLD_IFS
	if [ -f $IMAGE_FSTAB_STATIC ]; then
		echo "Found $IMAGE_FSTAB_STATIC, adding to $IMAGE_FSTAB"
		cat $IMAGE_FSTAB_STATIC >> $IMAGE_FSTAB
	fi

}


function set_root_password() {
	local id=$1
	if wget -q -O /iauth.$id http://$OPENQRM_SERVER_IP_ADDRESS/openqrm/action/image-auth/iauth.$id 2>/iauth.log; then
		cryptedpassword=`cat /iauth.$id`
		rm -f /iauth.$id iauth.log
		sed -i "s#^root:[^:]*#root:$cryptedpassword#" /mnt/etc/shadow
	fi
}

function prepare_services() {
	chroot /mnt ln -sf /$resource_basedir/openqrm/etc/init.d/openqrm-client /etc/init.d/openqrm-client
	echo "#!/bin/bash -x" > /mnt/tmp/openqrm-client.enable
	echo "OPENQRM_SERVER_BASE_DIR=$resource_basedir" >> /mnt/tmp/openqrm-client.enable
	echo ". /$resource_basedir/openqrm/include/openqrm-functions" >> /mnt/tmp/openqrm-client.enable
	echo "openqrm_chkconfig add openqrm-client" >> /mnt/tmp/openqrm-client.enable
	for SERVICE in $NOT_START_SERVICE; do
		echo "openqrm_chkconfig del $SERVICE" >> /mnt/tmp/openqrm-client.enable
	done
	chmod +x /mnt/tmp/openqrm-client.enable
	chroot /mnt /tmp/openqrm-client.enable 1>/dev/null 2>&1
	rm -f /mnt/tmp/openqrm-client.enable
}


function prepare_net_init() {
	INIT_SCRIPTS_TO_PREPARE="$@"
	for INIT_SCRIPT in $INIT_SCRIPTS_TO_PREPARE; do
		if [ -f /mnt/$INIT_SCRIPT ]; then
			if ! grep -A2 "stop)" /mnt/$INIT_SCRIPT | grep -q "openqrm" ; then
				echo "Preparing init script $INIT_SCRIPT"
				sed -e "s/^[ \t]*stop)\(.*\)/stop) exit # added by openqrm \n\1/" /mnt/$INIT_SCRIPT > /mnt/${INIT_SCRIPT}.openqrm
				mv -f /mnt/${INIT_SCRIPT}.openqrm /mnt/$INIT_SCRIPT
				chmod +x /mnt/$INIT_SCRIPT
			else
				echo "Init script $INIT_SCRIPT already prepared"
			fi
		fi
	done
}






# main
mount -t proc proc /proc
# creating the devices
echo "Creating the devices ..."
makedevs -d /etc/initrd-devices.conf /
mkdir -p /dev/fd
ln -sf /proc/self/fd /dev/fd
ln -sf /dev/tty0 /dev/systty
ln -sf /dev/ram1 /dev/ram
echo 0x0100 > /proc/sys/kernel/real-root-dev
echo 6 > /proc/sys/kernel/printk
syslogd &&  klogd
# need to run depmod 2 times as experienced
depmod -a
depmod -a
hwsetup -p
eval `cat /proc/cmdline`
if grep -q sysfs /proc/filesystems ; then
	mount -t sysfs none /sys
fi

# collecting some infos from /proc/cmdline
OPENQRM_RESOURCE_MAC_ADDRESS=`echo $BOOTIF | sed -e "s/-/:/g"  | sed -e "s/^01://g" | tr '[:lower:]' '[:upper:]'`
OPENQRM_RESOURCE_MANAGED_INTERFACE=`ifconfig -a | grep $OPENQRM_RESOURCE_MAC_ADDRESS | awk {' print $1 '}`
OPENQRM_RESOURCE_IP_ADDRESS=`echo $ip | cut -d':' -f1`
OPENQRM_SERVER_IP_ADDRESS=`echo $ip | cut -d':' -f2`
OPENQRM_RESOURCE_DEFAULT_GATEWAY=`echo $ip | cut -d':' -f3`
OPENQRM_RESOURCE_SUBNETMASK=`echo $ip | cut -d':' -f4`
OPENQRM_RESOURCE_BROADCAST=`ipcalc -b $OPENQRM_RESOURCE_IP_ADDRESS $OPENQRM_RESOURCE_SUBNETMASK | cut -d'=' -f2`

OPENQRM_RESOURCE_PARAMETER_FILE="/var/openqrm/openqrm-resource.conf"
mkdir -p `dirname $OPENQRM_RESOURCE_PARAMETER_FILE`

# adjust arp settings
if [ -f /proc/sys/net/ipv4/conf/$OPENQRM_RESOURCE_MANAGED_INTERFACE/arp_filter ]; then
	echo 1 > /proc/sys/net/ipv4/conf/$OPENQRM_RESOURCE_MANAGED_INTERFACE/arp_filter
fi
if [ -f /proc/sys/net/ipv4/conf/$OPENQRM_RESOURCE_MANAGED_INTERFACE/rp_filter ]; then
	echo 1 > /proc/sys/net/ipv4/conf/$OPENQRM_RESOURCE_MANAGED_INTERFACE/rp_filter
fi

# get the net working
echo "Bringing up $OPENQRM_RESOURCE_MANAGED_INTERFACE:oq"
echo "-> mac-address		: $OPENQRM_RESOURCE_MAC_ADDRESS"
echo "-> ip-address		: $OPENQRM_RESOURCE_IP_ADDRESS"
echo "-> subnetmask		: $OPENQRM_RESOURCE_SUBNETMASK"
echo "-> broadcast		: $OPENQRM_RESOURCE_BROADCAST"
echo "-> default gw		: $OPENQRM_RESOURCE_DEFAULT_GATEWAY"
echo "-> openQRM-server	: $OPENQRM_SERVER_IP_ADDRESS"
ifconfig lo 127.0.0.1 up
ifconfig $OPENQRM_RESOURCE_MANAGED_INTERFACE down
ifconfig $OPENQRM_RESOURCE_MANAGED_INTERFACE up
ifconfig $OPENQRM_RESOURCE_MANAGED_INTERFACE:oq $OPENQRM_RESOURCE_IP_ADDRESS netmask $OPENQRM_RESOURCE_SUBNETMASK broadcast $OPENQRM_RESOURCE_BROADCAST up
if [ "$OPENQRM_RESOURCE_DEFAULT_GATEWAY" != "0.0.0.0" ]; then
	route add default gw $OPENQRM_RESOURCE_DEFAULT_GATEWAY
fi
# force a small delay for the networkcard to initialyze
ping -c 5 -q $OPENQRM_SERVER_IP_ADDRESS > /dev/null

# get resource parameter
echo "Getting resource-parameters ..."
if [ "$id" == "-1" ]; then
	echo "New resource detected ! Adding to the openQRM-server at $OPENQRM_SERVER_IP_ADDRESS"
fi	
# sending resource-id will add the resource if not existing (-1 = new resource)
# loop get-parameters in case the network card is still not ready initialyzed
NETWORKCARD_LOOP=0
while ! wget -q -O $OPENQRM_RESOURCE_PARAMETER_FILE "http://$OPENQRM_SERVER_IP_ADDRESS/openqrm/action/resource-monitor.php?resource_command=get_parameter&resource_id=$id&resource_mac=$OPENQRM_RESOURCE_MAC_ADDRESS&resource_ip=$OPENQRM_RESOURCE_IP_ADDRESS"; do
	if [ "$NETWORKCARD_LOOP" == "10" ]; then
		echo "ERROR: Could not reach the openQRM-Server at $OPENQRM_SERVER_IP_ADDRESS!"
		# give a shell for the admin
		/bin/bash
	fi
	NETWORKCARD_LOOP=$(( NETWORKCARD_LOOP + 1 ))
	sleep 5
done
. $OPENQRM_RESOURCE_PARAMETER_FILE

# get kernel + modules by tftp
echo "Importing kernel files"
import_kernel

# run default openqrm-client boot-service
echo "Getting openqrm-client package"
cd /
wget -q "http://$OPENQRM_SERVER_IP_ADDRESS/openqrm/boot-service/openqrm-client.tgz"
tar -xzf openqrm-client.tgz
rm -f openqrm-client.tgz
$resource_basedir/openqrm/etc/init.d/openqrm-client start

if [ "$image_type" == "ram" ] || [ "$image_type" == "" ]; then
	# send idle/available
	echo "Sending idle/available to openQRM-server at $OPENQRM_SERVER_IP_ADDRESS"
	wget -q -O /dev/null "http://$OPENQRM_SERVER_IP_ADDRESS/openqrm/action/resource-monitor.php?resource_command=update_status&resource_id=$resource_id&resource_state=idle&resource_event=available"
	hostname idle$resource_id
	# rcs0 will be started here from init
	
	# for initramfs initrds we start a shell here
	if [ -x /init ]; then
		echo "Detected initrd as initramfs, starting a shell"
		/bin/bash
	fi	

else
	# if any deployment plugin is enabled, handle over the control
	# -> deployment plugins will take care to mount the root fs
	#    and do the pivot_root if needed

	eval $image_deployment_parameter
	cd /
	wget -q "http://$OPENQRM_SERVER_IP_ADDRESS/openqrm/boot-service/root-mount.$image_type"
	chmod +x root-mount.$image_type
	# source the deployment plugin command, it will provide 
	# the functions to mount/remount the rootfs at /mnt according 
	# to the deployment-type and the image_deployment_parameters
	. ./root-mount.$image_type

	# mount ro (provided by the deployment plugin)
	###############################################################
	# DEPLOYMENT PLUGIN HOOK ######################################
	###############################################################
	mount_rootfs

	# fill /boot and /lib/modules on the fs-image
	echo "Filling /boot and /lib/modules"
	rm -rf /mnt/boot/vmlinuz-$kernel_version /mnt/boot/System.map-$kernel_version /mnt/lib/modules/$kernel_version
	cp -af /boot/vmlinuz-$kernel_version /mnt/boot/vmlinuz-$kernel_version
	cp -af /boot/System.map-$kernel_version /mnt/boot/System.map-$kernel_version
	cp -af /lib/modules/$kernel_version /mnt/lib/modules/

	# create custom fstab / needed for the remount rw during the system init
	# (custom entry provided by the deployment plugin)
	###############################################################
	# DEPLOYMENT PLUGIN HOOK ######################################
	###############################################################
	create_fstab

	# (common entries provided by a local function)
	create_fstab_commons

	# transfer resource basedir
	echo "Preparing resource openQRM client"
	rm -rf /mnt/$resource_basedir/openqrm
	mkdir /mnt/$resource_basedir/openqrm/
	cp -a /$resource_basedir/openqrm/* /mnt/$resource_basedir/openqrm/
	# copy resource parameter
	mkdir -p /mnt/`dirname $OPENQRM_RESOURCE_PARAMETER_FILE`
	cp -af $OPENQRM_RESOURCE_PARAMETER_FILE /mnt/$OPENQRM_RESOURCE_PARAMETER_FILE

	# prepare init according plugin services
	echo "Preparing system init"
	prepare_udev
	prepare_var
	prepare_services
	prepare_net_init $NETWORK_SERVICES_TO_ADJUST

	# managed shared image
	if [ "$image_isshared" != "" ]; then
		echo "Prepare image as shared"
	fi
	# set root password
	set_root_password $image_id

	# remount rw (provided by the deployment plugin)
	###############################################################
	# DEPLOYMENT PLUGIN HOOK ######################################
	###############################################################
	remount_rootfs

	# chroot + init
	killall syslogd klogd 1>/dev/null 2>&1
	killall udevd 
	sleep 2
	if grep sysfs /proc/filesystems 1>/dev/null ; then
		umount /sys
	fi
	umount /proc
	
	cd /mnt

	pivot_root . /mnt/initrd
	export CONSOLE=/dev/console
	if [ -e /usr/sbin/chroot ]; then
		exec /usr/sbin/chroot . /sbin/init 3
	else
		exec /usr/bin/chroot . /sbin/init 3
	fi
	# here the system will do a normal init 
	# from the mounted rootfs image	
fi

