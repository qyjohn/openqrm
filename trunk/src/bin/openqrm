#!/bin/bash
# this is the openQRM commandline client
#
# This file is part of openQRM.
#
# openQRM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# openQRM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with openQRM.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2009, Matthias Rechenburg <matt@openqrm.com>
#

if [ "$OPENQRM_SERVER_BASE_DIR" == "" ]; then
	OPENQRM_SERVER_BASE_DIR=$(dirname $0)/../..
	OPENQRM_SERVER_BASE_DIR=$(pushd $OPENQRM_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
fi
. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions
export OPENQRM_SERVER_BASE_DIR

# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	echo "ERROR: Please run this script as root!"
	exit 6
fi


function openqrm_usage() {
	echo
	echo "Usage:"
	echo "`basename $0` help			- This help screen"
	echo
	echo "- Managing boot-images -"
	echo "`basename $0` kernel add -n <name> -v <version> -u <username> -p <password> [-l <location> -i <initramfs/ext2> -t <path-to-initrd-template-file>]"
	echo "`basename $0` kernel remove -n <name> -u <username> -p <password>"
	echo
	echo "- Managing server-states -"
	echo "`basename $0` state backup -n <name>"
	echo "`basename $0` state restore -n <name>"
	echo "`basename $0` state remove -n <name>"
	echo "`basename $0` state list"
	echo
	echo "- Managing server-configuration -"
	echo "`basename $0` init_config [restore]"
	echo
	echo "- Login to resources -"
	echo "`basename $0` login -i <resource-ip>"
	echo


}



# main
case "$1" in
	kernel)
		shift
		if [ $# == 0 ]; then
			openqrm_usage
			exit 0
		fi

		case "$1" in
			add)
				shift
				if [ $# == 0 ]; then
					openqrm_usage
					exit 0
				fi
				while [ $# -ne 0 ]; do
					case "$1" in
						-n)
							BOOT_IMAGE_NAME=$2
							shift
							;;
						-v)
							BOOT_IMAGE_VERSION=$2
							shift
							;;			
						-l)
							BOOT_IMAGE_LOCATION=$2
							shift
							;;
						-i)
							BOOT_IMAGE_INITRD_TYPE=$2
							shift
							;;
						-t)
							BOOT_IMAGE_INITRD_TEMPLATE=$2
							shift
							;;
						-u)
							OPENQRM_USERNAME=$2
							shift
							;;
						-p)
							OPENQRM_PASSWORD=$2
							shift
							;;
					esac
					shift
				done
				if [ "$BOOT_IMAGE_NAME" == "" ] || [ "$BOOT_IMAGE_VERSION" == "" ] || [ "$OPENQRM_USERNAME" == "" ] || [ "$OPENQRM_PASSWORD" == "" ]; then
					openqrm_usage
					exit 1
				fi
				if [ "$BOOT_IMAGE_LOCATION" == "" ]; then
					BOOT_IMAGE_LOCATION=/
				fi
				if [ "$BOOT_IMAGE_INITRD_TYPE" == "" ]; then
					BOOT_IMAGE_INITRD_TYPE="initramfs"
				fi
				if [ "$BOOT_IMAGE_INITRD_TEMPLATE" == "" ]; then
					BOOT_IMAGE_INITRD_TEMPLATE=$OPENQRM_DEFAULT_INITRD_TEMPLATE
				fi
				openqrm_server_create_kernel $BOOT_IMAGE_NAME $BOOT_IMAGE_VERSION $BOOT_IMAGE_LOCATION $BOOT_IMAGE_INITRD_TYPE $BOOT_IMAGE_INITRD_TEMPLATE
				if ! openqrm_server_manage_kernel add $OPENQRM_USERNAME $OPENQRM_PASSWORD $BOOT_IMAGE_NAME $BOOT_IMAGE_VERSION; then
					echo "WARNING: Could not add the kernel to the openQRM-server!"
					exit -1
				fi
				;;

			remove)
				shift
				if [ $# == 0 ]; then
					openqrm_usage
					exit 0
				fi
				while [ $# -ne 0 ]; do
					case "$1" in
						-n)
							BOOT_IMAGE_NAME=$2
							shift
							;;
						-u)
							OPENQRM_USERNAME=$2
							shift
							;;
						-p)
							OPENQRM_PASSWORD=$2
							shift
							;;
					esac
					shift
				done
				if [ "$BOOT_IMAGE_NAME" == "" ] || [ "$OPENQRM_USERNAME" == "" ] || [ "$OPENQRM_PASSWORD" == "" ]; then
					openqrm_usage
					exit 1
				fi
				rm -f $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/boot/vmlinuz-$BOOT_IMAGE_NAME
				rm -f $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/boot/System.map-$BOOT_IMAGE_NAME
				rm -f $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/boot/modules-$BOOT_IMAGE_NAME.tgz
				rm -f $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/boot/initrd-$BOOT_IMAGE_NAME.img
				if ! openqrm_server_manage_kernel remove $OPENQRM_USERNAME $OPENQRM_PASSWORD $BOOT_IMAGE_NAME $BOOT_IMAGE_VERSION; then
					echo "WARNING: Could not remove the kernel to the openQRM-server!"
					exit -1
				fi
				;;

		esac
		;;


	state)
		shift
		if [ $# == 0 ]; then
			openqrm_usage
			exit 0
		fi
		export OPENQRM_SERVER_BASE_DIR

		case "$1" in
			backup)
				shift
				if [ $# == 0 ]; then
					openqrm_usage
					exit 0
				fi
				while [ $# -ne 0 ]; do
					case "$1" in
						-n)
							BACKUP_STATE_NAME=$2
							shift
							;;
					esac
					shift
				done
				if [ "$BACKUP_STATE_NAME" == "" ]; then
					openqrm_usage
					exit 1
				fi
				openqrm_server_state backup $BACKUP_STATE_NAME
				;;

			restore)
				shift
				if [ $# == 0 ]; then
					openqrm_usage
					exit 0
				fi
				while [ $# -ne 0 ]; do
					case "$1" in
						-n)
							BACKUP_STATE_NAME=$2
							shift
							;;
					esac
					shift
				done
				if [ "$BACKUP_STATE_NAME" == "" ]; then
					openqrm_usage
					exit 1
				fi
				openqrm_server_state restore $BACKUP_STATE_NAME
				;;

			remove)
				shift
				if [ $# == 0 ]; then
					openqrm_usage
					exit 0
				fi
				while [ $# -ne 0 ]; do
					case "$1" in
						-n)
							BACKUP_STATE_NAME=$2
							shift
							;;
					esac
					shift
				done
				if [ "$BACKUP_STATE_NAME" == "" ]; then
					openqrm_usage
					exit 1
				fi
				openqrm_server_state remove $BACKUP_STATE_NAME
				;;

			list)
				openqrm_server_state list
				;;
		esac
		;;




	login)
		shift
		if [ $# == 0 ]; then
			openqrm_usage
			exit 0
		fi
        while [ $# -ne 0 ]; do
            case "$1" in
                -i)
                    RESOURCE_IP_ADDRESS=$2
                    shift
                    ;;
            esac
            shift
        done
        if [ "$RESOURCE_IP_ADDRESS" == "" ]; then
            openqrm_usage
            exit 1
        fi
        echo "Login to resource $RESOURCE_IP_ADDRESS ..."
        $OPENQRM_SERVER_BASE_DIR/openqrm/bin/dbclient -K 10 -y -i $OPENQRM_SERVER_BASE_DIR/openqrm/etc/dropbear/dropbear_rsa_host_key -p $OPENQRM_EXEC_PORT root@$RESOURCE_IP_ADDRESS

		;;



	init_config)
		shift
        RESTORE_LAST_STATE=$1

        if [ -f $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/unconfigured ]; then
            echo "Initialyzing the openQRM Database"

            # initialyze the database
            chmod +x $OPENQRM_SERVER_BASE_DIR/openqrm/etc/db/$OPENQRM_DATABASE_TYPE/openqrm-$OPENQRM_DATABASE_TYPE-functions
            if ! $OPENQRM_SERVER_BASE_DIR/openqrm/etc/db/$OPENQRM_DATABASE_TYPE/openqrm-$OPENQRM_DATABASE_TYPE-functions init; then
                echo "Initialyzing the openQRM Database failed !"
                exit -1
            fi

            # check if we should restore the last state
            if [ "$RESTORE_LAST_STATE" == "restore" ]; then
                echo "Restoring last openQRM state backup"
                # check if backups are not locked
                if [ ! -f $OPENQRM_SERVER_STATE_DIR/locked ]; then
                    if [ "$OPENQRM_RESTORE_STATE" != "false" ]; then
                        # check if there is a server state to restore
                        LAST_SERVER_STATE_BACKUP=`ls -tr $OPENQRM_SERVER_STATE_DIR/uninstall-* 2>/dev/null | tail -n1 | sed -s "s/\.tgz//g"`
                        if [ "$LAST_SERVER_STATE_BACKUP" != "" ]; then
                            LAST_SERVER_STATE_BACKUP=`basename $LAST_SERVER_STATE_BACKUP`
                            echo "Found backup of last openQRM Server state $LAST_SERVER_STATE_BACKUP, restoring it"
                            openqrm_server_state restore $LAST_SERVER_STATE_BACKUP
                        fi
                    fi
                else
                    echo "Found openQRM Server state backups locked by $OPENQRM_SERVER_STATE_DIR/locked"
                fi
            fi

            # create $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.cfg/default
            echo "Creating default PXE-configuration"
            mkdir -p $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.cfg/
            openqrm_server_create_pxe_config -1 default default

            # add automatic startup to init
            openqrm_chkconfig add openqrm

            # here we create + add the default kernel+kernel-version to the openQRM Server
            # via the kernel-action.form. If this returns bad something is wrong
            DEFAULT_KERNEL_VERSION=`uname -r`
            echo "Creating the default kernel version $DEFAULT_KERNEL_VERSION"
            INITRD_TYPE="initramfs"
            openqrm_server_create_kernel default $DEFAULT_KERNEL_VERSION / $INITRD_TYPE
            if ! openqrm_server_manage_kernel add openqrm openqrm default $DEFAULT_KERNEL_VERSION; then
                echo "Could not create/add the default kernel ! Initialization failed !"
                exit -1
            fi

            # remove configure lock
            rm -f $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/unconfigured

            # start monitoring subsystem and plugins
            if [ -x /usr/bin/screen.real ]; then
                RUNSCREEN="/usr/bin/screen.real"
            else
                RUNSCREEN=`which screen`
            fi
            SCREEN_NAME=`date +%T%x | sed -e "s/://g" | sed -e "s#/##g"`
            $RUNSCREEN -dmS $SCREEN_NAME $OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-monitord
            if [ -d $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/plugins/ ]; then
                for OPENQRM_PLUGIN in `ls $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/plugins/`; do
                    if [ -x $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN ]; then
                        $RUNSCREEN -dmS $OPENQRM_PLUGIN $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN start
                    fi
                done
            fi
            echo "Successfully initialyzed and started the openQRM Server"
            exit 0

        else
            echo "This openQRM Server is already configured. Skipping re-init"
            exit 0
        fi


		;;



	*)
		openqrm_usage
		;;

esac


