#!/bin/bash
########################## build functions ##########################

# in the stage these function are used the files may be not installed yet
# so we source the relative path
OPENQRM_SOURCE_DIR=`dirname $0`/..
OPENQRM_SOURCE_DIR=$(pushd $OPENQRM_SOURCE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $OPENQRM_SOURCE_DIR/etc/openqrm-server.conf

OPENQRM_INITRD_COMPONENTS="/bin/bash /sbin/portmap /usr/bin/rsync /sbin/modprobe /sbin/depmod /sbin/insmod /sbin/lsmod /sbin/mke2fs"
OPENQRM_INITRD_DIRECTORIES="bin etc etc/rc.d/init.d etc/sysconfig etc/X11 lib lib/modules lib/i686 loopfs mnt old_root proc sys sysroot usr usr/lib usr/bin usr/sbin var var/lock var/lock/subsys var/log var/run /var/lib /var/lib/nfs /var/lib/nfs/statd"



# function displaying the library files (not links) a binary depends on
# -> this is generic
function openqrm_build_find_libs() {
	BINARY=$1
	for LIBRARY in `ldd $BINARY | awk {' print $3 '}`; do
		REAL_LIBRARYFILE=`readlink $LIBRARY`
		FULL_PATH_TO_LIBRARY=`dirname $LIBRARY`
		if [ "$FULL_PATH_TO_LIBRARY" != "." ]; then
			echo $FULL_PATH_TO_LIBRARY/$REAL_LIBRARYFILE
		fi
	done



}


# function to download+cache source packages in the package-dir
# -> this is for "make all" / comilation phase
function openqrm_cache_or_download() {
	# 1 param: 		component name
	# 2 param:		download-location
	OPENQRM_SOURCE_COMPONENT_NAME=$1
	. $OPENQRM_SOURCE_DIR/etc/build.conf/$OPENQRM_SOURCE_COMPONENT_NAME.conf
	OPENQRM_SOURCE_COMPONENT_FILE=`basename $OPENQRM_SOURCE_DOWNLOAD`
	CURRENT_DIR=`pwd`
	if [ -f $OPENQRM_BUILD_TMP_DIR/openqrm-build/$OPENQRM_SOURCE_COMPONENT_NAME/source/$OPENQRM_SOURCE_COMPONENT_FILE ]; then
		echo "-> found component $OPENQRM_SOURCE_COMPONENT_NAME ($OPENQRM_SOURCE_COMPONENT_FILE) already downloaded"
	else
		mkdir -p $OPENQRM_BUILD_TMP_DIR/openqrm-build/$OPENQRM_SOURCE_COMPONENT_NAME/source/
		cd $OPENQRM_BUILD_TMP_DIR/openqrm-build/$OPENQRM_SOURCE_COMPONENT_NAME/source/
		if ! wget $OPENQRM_SOURCE_DOWNLOAD; then
			echo "ERROR: Could not download $OPENQRM_SOURCE_COMPONENT_NAME from $OPENQRM_SOURCE_DOWNLOAD"
			echo "       Please put $OPENQRM_SOURCE_COMPONENT_FILE in $OPENQRM_BUILD_TMP_DIR/openqrm-build/$OPENQRM_SOURCE_COMPONENT_NAME/source/ and try again."
			exit 1
		fi
	fi
	cp -f $OPENQRM_BUILD_TMP_DIR/openqrm-build/$OPENQRM_SOURCE_COMPONENT_NAME/source/$OPENQRM_SOURCE_COMPONENT_FILE $OPENQRM_BUILD_TMP_DIR/openqrm-build/$OPENQRM_SOURCE_COMPONENT_NAME/
	cd $CURRENT_DIR
}



#function to compile a component from the source
# -> this is for "make all" / compilation phase
function openqrm_compile_from_source() {
	# 1 param: 		component name
	# 2 param:		download-location
	# optional variables :
	# OPENQRM_CONFIGURE		command to use for configure (default "./configure" if exists)
	# OPENQRM_PRE_MAKE		commands to run before make
	# OPENQRM_POST_MAKE		commands to run after make

	OPENQRM_SOURCE_COMPONENT_NAME=$1
	. $OPENQRM_SOURCE_DIR/etc/build.conf/$OPENQRM_SOURCE_COMPONENT_NAME.conf
	OPENQRM_SOURCE_COMPONENT_FILE=`basename $OPENQRM_SOURCE_DOWNLOAD`
	CURRENT_DIR=`pwd`
	# check if it is already compiled
	if [ ! -f $OPENQRM_BUILD_TMP_DIR/openqrm-build/$OPENQRM_SOURCE_COMPONENT_NAME/$OPENQRM_SOURCE_BINARY_RESULT ]; then
		# nope, then we have to build it
		# unpack
		cd $OPENQRM_BUILD_TMP_DIR/openqrm-build/$OPENQRM_SOURCE_COMPONENT_NAME/
		OPENQRM_SOURCE_COMPONENT_FILE_TYPE=`echo $OPENQRM_SOURCE_COMPONENT_FILE | sed -e "s/.*\.//g"`
		if [ "$OPENQRM_SOURCE_COMPONENT_FILE_TYPE" == "bz2" ]; then
			tar -xjf $OPENQRM_SOURCE_COMPONENT_FILE
		else
			tar -xzf $OPENQRM_SOURCE_COMPONENT_FILE
		fi
		rm -f $OPENQRM_SOURCE_COMPONENT_FILE
		cd $OPENQRM_SOURCE_COMPONENT_NAME-$OPENQRM_SOURCE_VERSION

		# configure
		if [ "$OPENQRM_CONFIGURE" != "" ]; then
			$OPENQRM_CONFIGURE
		elif [ -f ./configure ]; then
			chmod +x ./configure && ./configure
		fi

		# pre-make
		eval $OPENQRM_PRE_MAKE

		# make
		make $OPENQRM_MAKE_TARGET
		# we do not run make install, if needed pls run it in post-make

		# post-make
		eval $OPENQRM_POST_MAKE

		unset OPENQRM_CONFIGURE OPENQRM_PRE_MAKE OPENQRM_POST_MAKE
		cd $CURRENT_DIR
	else
		echo "-> Found $OPENQRM_SOURCE_BINARY_RESULT already in the build-cache"
		echo "-> Skipping compilation, taking the ready build component from the cache"
	fi
}



# function to create the default initrd-template during the compile stage
# -> this is for "make install" / installation phase
function openqrm_create_default_initrd_template() {

	echo "Creating the default initrd-template"
	CURRENT_DIR=`pwd`
	# getting + compiling busybox
	. $OPENQRM_SOURCE_DIR/etc/build.conf/busybox.conf
	openqrm_cache_or_download busybox
	OPENQRM_SOURCE_COMPONENT_BUILD_DIR=$OPENQRM_BUILD_TMP_DIR/openqrm-build/busybox/busybox-$OPENQRM_SOURCE_VERSION/
	export OPENQRM_PRE_MAKE="cp $OPENQRM_SOURCE_DIR/etc/build.conf/busybox.configuration $OPENQRM_SOURCE_COMPONENT_BUILD_DIR/.config && make oldconfig"
	export OPENQRM_POST_MAKE="make install"
	openqrm_compile_from_source busybox
	# getting hwdata
	openqrm_cache_or_download hwdata-knoppix
	export DESTDIR=$OPENQRM_BUILD_TMP_DIR/openqrm-build/hwdata-knoppix/hwdata-install
	openqrm_compile_from_source hwdata-knoppix
	# kudzu
	openqrm_cache_or_download kudzu-knoppix
	export OPENQRM_MAKE_TARGET=libkudzu.a
	openqrm_compile_from_source kudzu-knoppix
	# hwsetup
	openqrm_cache_or_download hwsetup
	# we need some more includes/libs as provided in the hwsetup Makefile
	# so we compile it manually
	. $OPENQRM_SOURCE_DIR/etc/build.conf/kudzu-knoppix.conf
	OPENQRM_SOURCE_KUDZU_DIR="$OPENQRM_BUILD_TMP_DIR/openqrm-build/kudzu-knoppix/kudzu-knoppix-$OPENQRM_SOURCE_VERSION/"
	. $OPENQRM_SOURCE_DIR/etc/build.conf/hwsetup.conf
	OPENQRM_SOURCE_HWSETUP_DIR="$OPENQRM_BUILD_TMP_DIR/openqrm-build/hwsetup/hwsetup-$OPENQRM_SOURCE_VERSION/"
	cd $OPENQRM_BUILD_TMP_DIR/openqrm-build/hwsetup/hwsetup-$OPENQRM_SOURCE_VERSION
	cc -I$OPENQRM_SOURCE_KUDZU_DIR -DBLACKLIST -Wall -fPIC -O2 -s -o hwsetup hwsetup.c -L$OPENQRM_SOURCE_KUDZU_DIR -lkudzu -lpci -lz
	cd $CURRENT_DIR

	# create the initroot
	mkdir -p $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot
	cp -aR $OPENQRM_SOURCE_COMPONENT_BUILD_DIR/_install/* $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/

	# create lib dir + copy ld-linux
	mkdir -p $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/lib
	cp -a /lib/ld-* $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/lib/

	# add the libs busybox depends on
	for LIB in `openqrm_build_find_libs $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/bin/busybox`; do
		LIB=`echo $LIB | cut -d'-' -f1 | cut -d'.' -f1`
		if [ "$LIB" != "/lib/" ]; then
			cp -a $LIB""* $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/lib/
		fi
	done
	# add some more utils + their libs
	for UTIL in $OPENQRM_INITRD_COMPONENTS; do
		cp -a $UTIL $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/bin
		echo "Adding $UTIL to default initrd-template"
		for LIB in `openqrm_build_find_libs $UTIL`; do
			LIB=`echo $LIB | cut -d'-' -f1 | cut -d'.' -f1`
			if [ "$LIB" != "/lib/" ]; then
				cp -a $LIB""* $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/lib/
			fi
		done
	done
	# creating initrd directories
	for DIR in $OPENQRM_INITRD_DIRECTORIES; do
		mkdir -p $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/$DIR
	done
	touch $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/var/lib/nfs/rmtab 
	touch $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/var/lib/nfs/xtab  
	touch $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/var/lib/nfs/etab
	touch $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/var/lib/nfs/state
	cd $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/etc
	ln -sf /proc/mounts mtab
	ln -sf rc.d/init.d init.d
	touch fstab
	echo "root:x:0:0:root:/root:/bin/bash" > passwd
	echo "root:x:0:root" > group
	echo "passwd:     files" > nsswitch.conf
	echo "shadow:     files" >> nsswitch.conf
	echo "group:      files" >> nsswitch.conf
	# installing hwdata, libkudzu and hwsetup
	cp -aR $OPENQRM_BUILD_TMP_DIR/openqrm-build/hwdata-knoppix/hwdata-install/* $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/
	cp -a $OPENQRM_SOURCE_KUDZU_DIR/libkudzu.a $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/lib/
	cp -a $OPENQRM_SOURCE_HWSETUP_DIR/hwsetup $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/sbin/

	# creating the initrd devices
	rm -rf $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/dev
	$OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/bin/busybox makedevs -d $OPENQRM_SOURCE_DIR/etc/build.conf/initrd-devices.conf $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/
	cd $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/dev/
	ln -sf tty0 systty
	ln -sf ram1 ram

	# create rcS
	cat >> $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/etc/rc.d/init.d/rcS << EOF
#!/bin/bash
export SHELL=/bin/bash
echo "openQRM resource is starting rcS" > /dev/console

export \$(eval cat /proc/cmdline)

if [ -f /reboot ]; then
	echo "openQRM resource is rebooting now"
	/sbin/reboot
fi

if [ -f /halt ]; then
	echo "openQRM resource is shutting down now"
	/sbin/halt
fi

EOF
	chmod +x $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/etc/rc.d/init.d/rcS

	# create inittab
	cat >> $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/etc/inittab << EOF

# inittab
::askfirst:-/bin/bash
tty2::askfirst:-/bin/bash
tty3::askfirst:-/bin/bash
tty4::askfirst:-/bin/bash
::sysinit:/etc/init.d/rcS
::restart:/sbin/init

# Stuff to do before rebooting
::ctrlaltdel:/sbin/reboot
::shutdown:/sbin/halt

EOF
	cd $CURRENT_DIR
}


# function to create a tgz file out of the initroot/initrd-content
# -> this is for "make install" / installation phase
function openqrm_pack_default_initrd_template() {
	# pack
	CURRENT_DIR=`pwd`
	cd $OPENQRM_BUILD_TMP_DIR/openqrm-build/initroot/
	tar -czf $OPENQRM_SERVER_BASE_DIR/openqrm/etc/templates/openqrm-initrd-default.tgz *
	cd $CURRENT_DIR
}



# function download and unpack the kerne for default boot-image
# -> this is for "make all" / compilation phase
function openqrm_get_kernel_default_boot_image() {
	# download
	openqrm_cache_or_download defaultkernel
}


# function to create the default boot-image
# -> this is for "make install" / installation phase
function openqrm_create_default_boot_image() {
	echo "Creating the 'default' openQRM boot-image"
	. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions
	. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions
	CURRENT_DIR=`pwd`
	# get the defaultkernel config
	# -> the build.conf dir is not going to be installed so
	#    we source the file in the source dir
	. $OPENQRM_SOURCE_DIR/etc/build.conf/defaultkernel.conf

	# unpack the downloaded kernel to a tmp dir
	rm -rf $OPENQRM_BUILD_TMP_DIR/openqrm-build/default
	mkdir -p $OPENQRM_BUILD_TMP_DIR/openqrm-build/default
	KERNEL_FILE=`basename $OPENQRM_SOURCE_DOWNLOAD`
	cp $OPENQRM_BUILD_TMP_DIR/openqrm-build/defaultkernel/source/$KERNEL_FILE $OPENQRM_BUILD_TMP_DIR/openqrm-build/default/

	# in case we have a deb kernel file
	if [ -f /etc/debian_version ]; then
		cd $OPENQRM_BUILD_TMP_DIR/openqrm-build/default
		ar -x $KERNEL_FILE
		rm -f control.tar.gz debian-binary $KERNEL_FILE
		tar -xzf data.tar.gz
		rm -f data.tar.gz
	else
	# we have a rpm as kernel file
		echo "Not yet supported"
	fi

	
	openqrm_server_create_boot_image default $OPENQRM_SOURCE_VERSION $OPENQRM_BUILD_TMP_DIR/openqrm-build/default


	cd $CURRENT_DIR
}



# case for running functions called from Makefiles
case "$1" in
	initrd)
		openqrm_create_default_initrd_template
		;;
	pack_initrd)
		openqrm_pack_default_initrd_template
		;;
	get_kernel_default_boot_image)
		openqrm_get_kernel_default_boot_image
		;;
	default_boot_image)
		openqrm_create_default_boot_image
		;;
esac
