#!/bin/bash
# this is the main function file for openQRM
# only general + generic functions should go in here
#
# This file is part of openQRM.
#
# openQRM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# openQRM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with openQRM.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2009, Matthias Rechenburg <matt@openqrm.com>
#

if [ "$OPENQRM_SERVER_BASE_DIR" == "" ]; then
	echo "ERROR: Please export OPENQRM_SERVER_BASE_DIR before sourcing $0"
	exit 1
fi
# some static defines
OPENQRM_RESOURCE_PARAMETER_FILE="/var/openqrm/openqrm-resource.conf"

# be sure cmd output is english
export LANGUAGE=C
export LANG=C
export LC_ALL=C

# A more portable "chkconfig".
# Uses chkconfig or rc.d-update as found, if not then "manual".
function openqrm_chkconfig() {
	action="$1"
	service="$2"

	if [ $action != "add" ] && [ $action != "del" ] ; then
		echo "openqrm_chkconfig: action must be either \"add\" or \"del\""
		return 1
	fi
	if [ -z "${service}" ] ; then
		echo "openqrm_chkconfig: service must be valid service name"
		return 1
	fi


	# For Redhat/SuSe
	if [ -x /sbin/chkconfig ] ; then
		case $action in
			add)
				local do_chkconfig=1
				# check if the init is not configured
				chkconfig --list ${service} > /dev/null 2>&1 && do_chkconfig=

				# maybe it is configured, but for our runlevel not (tam)
				if [ -z "$do_chkconfig" ]; then
					do_chkconfig=1
					local runlevel=$(grep initdefault /etc/inittab | grep id |cut -d ':' -f2)
					for f in /etc/rc${runlevel}.d/S??${service} /etc/init.d/rc${runlevel}.d/S??${service}; do
						[ -e $f ] && do_chkconfig=
					done
				fi
				if [ $do_chkconfig ]; then
                	        	chkconfig --add ${service}
					if [ ! -f /etc/UnitedLinux-release ]; then
                        	        	chkconfig ${service} on
					else
	                        	        chkconfig --add ${service}
					fi
				fi
				;;
			del)
				#check if service exists
				if chkconfig --list ${service} > /dev/null 2>&1 ; then
					chkconfig --del ${service}
				fi
				;;

		esac
	# For Debian
	elif [ -x /usr/sbin/update-rc.d ] ; then
		# according to manuals, update-rc.d does nothing if links already exist
		if [ $action == "add" ] ; then
            # check for start + stop leven
            start_l=`grep chkconfig /etc/init.d/${service} | grep ^'#' | awk {' print $4 '}`
            stop_l=`grep chkconfig /etc/init.d/${service} | grep ^'#' | awk {' print $5 '}`
			update-rc.d ${service}  defaults $start_l $stop_l
		elif [ $action == "del" ] ; then
			update-rc.d -f ${service} remove 1>/dev/null 2>&1
		fi
	# "Manual".  Uses S91 by default
	else
		# Get default runlevel
		runlevel=$( grep default /etc/inittab | grep ^id: | cut -f 2 -d: )

		# Find directory for script links
		if [ -d /etc/rc.d/ ] ; then
		        rcdir=/etc/rc.d/rc${runlevel}.d
		else
		        rcdir=/etc/rc${runlevel}.d
		fi

		if [ $action == "add" ] ; then
			if [ ! -f $rcdir/S??${service} ] && [ -f /etc/init.d/${service} ] ; then
			       ln -s /etc/init.d/${service} $rcdir/S91${service}
			fi
		elif [ $action == "del" ] ; then
			if [ -f $rcdir/S??${service} ] ; then
			       rm $rcdir/S??${service}
			fi
		fi
	fi
	return 0
}



# create short name for distro for the package stage
function openqrm_get_distro()
{
	# find out which distribution it is
	# find out which version it is
	# give the ROOT_DIR as the first cmdline param
	local ROOT_DIR=${1:-/}
	if [ -f $ROOT_DIR/etc/fedora-release ]; then
		RELEASE=$(cat $ROOT_DIR/etc/fedora-release | head -1)
			case $RELEASE in
				*Fedora*9*)
					echo "fedora9"
					;;
				*Fedora*10*)
					echo "fedora10"
					;;
				*)
					echo "fedora"
					;;
			esac
	elif [ -f $ROOT_DIR/etc/redhat-release ]; then
		RELEASE=$(cat $ROOT_DIR/etc/redhat-release | head -1)
		case $RELEASE in
			*Werewolf*)
				echo "fc8"
				;;
			*Moonshine*)
				echo "fc7"
				;;
			*Zod*)
				echo "fc6"
				;;
			*Bordeaux*)
				echo "fc5"
				;;
			*Stentz*)
				echo "fc4"
				;;
			*Nahant*)
				echo "el4"
				;;
			*Shrike*)
				echo "rh9"
				;;
			*Psyche*)
				echo "rh8"
				;;
			*Valhalla*)
				echo "rh73"
				;;
			*Taroon*)
				echo "el3"
				;;
			*CentOS*5*)
				echo "centos5"
				;;
			*)
				echo "rh"
				;;
		esac
	elif [ -f $ROOT_DIR/etc/UnitedLinux-release ]; then
		RELEASE=$(cat $ROOT_DIR/etc/UnitedLinux-release | head -1)
		case $RELEASE in
			*UnitedLinux*)
				echo "suse8"
				;;
			*)
				echo "suse"
				;;
		esac
	elif [ -f $ROOT_DIR/etc/SuSE-release ]; then
		RELEASE=$(cat $ROOT_DIR/etc/SuSE-release | head -1)
		case $RELEASE in
			*openSUSE*10*)
				echo "opensuse10"
				;;
			*SUSE*9*)
				echo "suse9"
				;;
			*SUSE*10*)
				echo "suse10"
				;;
			*SUSE*11*)
				echo "suse11"
				;;
			*)
				echo "suse"
				;;
		esac

	elif [ -f $ROOT_DIR/etc/debian_version ]; then
		RELEASE=$(cat $ROOT_DIR/etc/debian_version | head -1)
		case $RELEASE in
			*3.1*)
				echo "debian31"
				;;
			*4.0*)
				echo "debian40"
				;;
			*5.0*)
				echo "debian50"
				;;
			*lenny/sid*)
				if [ -f $ROOT_DIR/etc/lsb-release ]; then
					if grep hardy $ROOT_DIR/etc/lsb-release 1>/dev/null; then
						echo "ubuntu804"
					elif grep intrepid $ROOT_DIR/etc/lsb-release 1>/dev/null; then
						echo "ubuntu810"
					else
						echo "ubuntu804"
					fi
				else
					echo "ubuntu804"
				fi
				;;
			*)
				echo "debian"
				;;
		esac
	else
		echo "generic"
	fi

}

#
# get the distribution name
# $1:      root directory of the installation (optional; default is "/")
# returns: one of fedora|rhel|suse|ubuntu|debian|unknown
#
function openqrm_get_distro_name()
{
	local ROOT_DIR=${1:-/}
	if [-f "$ROOT_DIR/etc/fedora-release" ]; then 
		echo "fedora"
	elif [ -f "$ROOT_DIR/etc/redhat-release" ]; then
		# CentOS uses /etc/redhat-release, too
		echo 'rhel';
	elif [ -f "$ROOT_DIR/etc/UnitedLinux-release" ]; then
		echo "suse"
	elif [ -f "$ROOT_DIR/etc/SuSE-release" ]; then
		echo "suse"
	elif [ -f "$ROOT_DIR/etc/ubuntu_version" ]; then
		echo "ubuntu"
	elif [ -f "$ROOT_DIR/etc/debian_version" ]; then
		echo "debian"
	else
		echo "unknown"
	fi
}

#
# get the distribution's version
#
# you can choose to get the result as integer or as string. Use the integer
# output if you want to have a condition like distro_version > 100 (equals 10.0)
# Use string output for user-visible display. Default is "string".
#
# Note one Debian specific feature: if testing/unstable is installed (there is no 
# version number for these), "string" will return "testing/unstable", "integer" 
# returns -1!
# 
# Note that old Redhat releases (before 2003, ending with Redhat 9) are NOT
# supported. There is only RedHat Enterprise (RHEL) and Fedora.
#
# integer will return 
# - version * 10 (e.g. 103 instead of 10.3) for Debian and SUSE
# - version for RHEL/CentOS and Fedora
#
# FIXME: use lsb_release as soon as it is usable by many distributions 
# (required since LSB 3.0, but not installed by default on RHEL/CentOS)
# 
#
# $1:      string|integer return as integer or as string (optional; default is string)
# $2:      root directory of the installation (optional; default is "/")
# returns: the distribution's version number
#
function openqrm_get_distro_version()
{
	local RETURN_AS=$1
	if [ "$1" == '' ]; then
		RETURN_AS=string
	fi

	case `openqrm_get_distro_name()` in
		"suse")
			# tested with: openSUSE 10.3
			# XXX: This is not tested for SLES/SLED yet
			if [ $RETURN_AS == 'string' ]; then
				local VERSION=$(cat "$ROOT_DIR/etc/SuSE-release" | tail -1 | sed 's/VERSION = \([0-9]\+\.[0-9]\)/\1/')
				echo $VERSION
			elif [ $RETURN_AS == 'integer' ]; then
				local VERSION=$(cat "$ROOT_DIR/etc/SuSE-release" | tail -1 | sed 's/VERSION = \([0-9]\+\)\.\([0-9]\)/\1\2/')
				echo $VERSION
			fi
		;;
		"rhel")
			# tested with: CentOS 5.1
			# XXX: RHEL/CentOS does not give us the service release number (e.g. only 5 instead of 5.1)
			local VERSION=$(cat "$ROOT_DIR/etc/redhat-release" | head -n1 | sed 's/.*release \([0-9]\+\).*/\1/')
                        echo $VERSION
		;;
		"fedora")
			# tested with: Fedora Core 3, Fedora Core 6, Fedora 8
                        local VERSION=$(cat "$ROOT_DIR/etc/fedora-release" | head -n1 | sed 's/.*release \([0-9]\+\) .*/\1/')
                        echo $VERSION
		;;
		"debian")
			# tested with: 4.0 (etch), unstable/testing
			if [ $RETURN_AS == 'string' ]; then
                                local VERSION=$(cat "$ROOT_DIR/etc/debian_version")
                                echo $VERSION
                        elif [ $RETURN_AS == 'integer' ]; then
				if [ `cat "$ROOT_DIR/etc/debian_version"` == 'testing/unstable' ]; then
					echo -1
				else
                                	local VERSION=$(cat "$ROOT_DIR/etc/debian_version" | sed 's/\([0-9]\+\)\.\([0-9]\)/\1\2/')
                                	echo $VERSION
				fi
			fi
			;;
    		*)
    		echo 0
    		;;
    esac
}


function urlencodechar() {
	# notice : "%", "*" and "\" are not supported
	UCHAR=$1
	UCHAR=${UCHAR/\~/%7E}
	UCHAR=${UCHAR/\!/%21}
	UCHAR=${UCHAR/\@/%40}
	UCHAR=${UCHAR/\\#/%23}
	UCHAR=${UCHAR/\\$/%24}
	#UCHAR=${UCHAR/\%/%25}
	UCHAR=${UCHAR/\^/%5E}
	UCHAR=${UCHAR/\&/%26}
	#UCHAR=${UCHAR/\\*/%2A}
	UCHAR=${UCHAR/\(/%28}
	UCHAR=${UCHAR/\)/%29}
	UCHAR=${UCHAR/\+/%2B}
	UCHAR=${UCHAR/\|/%7C}
	UCHAR=${UCHAR/\{/%7B}
	UCHAR=${UCHAR/\}/%7D}
	UCHAR=${UCHAR/\:/%3A}
	UCHAR=${UCHAR/\"/%22}
	UCHAR=${UCHAR/\</%3C}
	UCHAR=${UCHAR/\>/%3E}
	UCHAR=${UCHAR/\\?/%3F}
	UCHAR=${UCHAR/\`/%60}
	UCHAR=${UCHAR/\=/%3D}
	#UCHAR=${UCHAR/\\/%5C}
	UCHAR=${UCHAR/\[/%5B}
	UCHAR=${UCHAR/\]/%5D}
	UCHAR=${UCHAR/\;/%3B}
	UCHAR=${UCHAR/\'/%27}
	UCHAR=${UCHAR/\,/%2C}
	UCHAR=${UCHAR/\//%2F}
	# whitespace
	if [ -z $UCHAR ]; then
	        UCHAR=%20
	fi
	echo "$UCHAR"
}


function urlencodestring() {
	USERINPUT=$@
	LENGTH=${#USERINPUT}
	for (( LOOP=0; LOOP<$LENGTH; LOOP++ )); do
		TESTCHAR=`echo ${USERINPUT:$LOOP:1}`
		TESTCHAR=`urlencodechar $TESTCHAR`
		echo -n $TESTCHAR
	done
}


# function to send events to the openQRM-server
# param 1 = resource_id
# param 2 = event_name
# param 3 = event_priority
# param 4 = event_source
# param 5 = event_description
function openqrm_post_event() {
	resource_id=`urlencodestring $1`
	event_name=`urlencodestring $2`
	event_priority=`urlencodestring $3`
	event_source=`urlencodestring $4`
	event_description=`urlencodestring $5`
    # are we on the openQRM server or on a resource ?
    if [ -f $OPENQRM_RESOURCE_PARAMETER_FILE ]; then
        . $OPENQRM_RESOURCE_PARAMETER_FILE
    elif [ -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf ]; then
        . $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
        . $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions
        openqrm_server_get_config
        resource_id=0
        resource_openqrmserver=$OPENQRM_SERVER_IP_ADDRESS
        openqrm_web_protocol=$OPENQRM_WEB_PROTOCOL
    fi
    # define wget to use with https
    if [ "$openqrm_web_protocol" == "https" ]; then
        WGET_NO_CERT_CHECK="--no-check-certificate"
    fi
	MESSAGEDATA="resource_id=$resource_id&event_name=$event_name&event_priority=$event_priority&event_source=$event_source&event_description=$event_description";
	OPENQRM_RESOURCE_EVENT_URL="$openqrm_web_protocol://$resource_openqrmserver/openqrm/action/resource-monitor.php?resource_command=post_event&$MESSAGEDATA"
	if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null "$OPENQRM_RESOURCE_EVENT_URL"; then
		echo "ERROR: Could not post event to the openQRM-server at $resource_openqrmserver !" | logger
		return 1
	fi
}



# a generic function to start portmap
# -> on some systems (e.g. fedora) we need to start rpcbind
function openqrm_portmap_start() {
	if which rpcbind 1>/dev/null; then
		rpcbind
		rpc.statd
	else
		portmap
	fi
}



# a generic function to stop portmap
# -> on some systems (e.g. fedora) we need to stop rpcbind
function openqrm_portmap_stop() {
	if which rpcbind 1>/dev/null; then
		killall rpc.statd
		killall rpcbind
	else
		killall portmap
	fi
}




# a function to validate an ip address
function openqrm_validate_ip() {
	IP_A=$1
	OLDIFS=$IFS
	IFS=.
	set -- $IP_A
	if [ "$#" -ne "4" ]; then
        IFS=$OLDIFS
		return 1
	fi

	for oct in $1 $2 $3 $4; do
		echo $oct | egrep "^[0-9]+$" >/dev/null 2>&1
		if [ "$?" -ne "0" ]; then
            IFS=$OLDIFS
			return 1
		else
			if [ "$oct" -lt "0" -o "$oct" -gt "255" ]; then
                IFS=$OLDIFS
                return 1
			fi
		fi
	done
	echo "$IP_A" | grep "\.$" >/dev/null 2>&1
	if [ "$?" -eq "0" ]; then
        IFS=$OLDIFS
		return 1
	fi
	IFS=$OLDIFS
	return 0
}



