#!/bin/bash
# openqrm	openQRM Server init script
#
# chkconfig: 2345 98 24
# description: openQRM is the next generation Linux Data Center management

# support for LSB init script
### BEGIN INIT INFO
# Provides: openqrm
# Required-Start: $local_fs $network $remote_fs
# Required-Stop: $local_fs $network $remote_fs
# Default-Start:  2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: openQRM Server init script
# Description: openQRM Server init script
### END INIT INFO

#
# This file is part of openQRM.
#
# openQRM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# openQRM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with openQRM.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2009, Matthias Rechenburg <matt@openqrm.com>
#

export LANG=C
PATH=/usr/bin:/sbin:/bin:/usr/sbin:$PATH
export PATH
LOCKFILE=/var/lock/subsys/openqrm
mkdir -p $(dirname $LOCKFILE)
# a new line for sed
NEWLINE='
'
. /lib/lsb/init-functions

# static basedir for ubuntu/debian packaging
if [ -f /etc/default/openqrm ]; then
    . /etc/default/openqrm
else
    OPENQRM_SERVER_BASE_DIR="/usr/share"
fi
export OPENQRM_SERVER_BASE_DIR
# get the openqrm-server configuration + functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions

# functions


function stop_exec_subsystem() {
    killall dropbear 1>/dev/null 2>&1
    killall openqrm-cmd-queue 1>/dev/null 2>&1
    # in case killall is not available
    kill `ps ax | grep dropbear | grep -v grep | grep openqrm | awk {' print $1 '}` 2>/dev/null
    kill `ps ax | grep openqrm-cmd-queue | grep -v grep | awk {' print $1 '}` 2>/dev/null
}



function openqrm_server_init() {

	log_begin_msg "First startup detected. Running initialization."
    /bin/rm -f ${LOCKFILE}
	# make sure to have all enabled plugins stopped and uninstalled
	if [ -d $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/plugins/ ]; then
		for OPENQRM_PLUGIN in `ls $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/plugins/`; do
			if [ -x $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN ]; then
				$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN stop
				rm -f $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/plugins/$OPENQRM_PLUGIN
			fi
		done
	fi

    # here we start the init

	# need to copy pxelinux.0 to the tftpboot dir
	# sym-linking it does not work because the tftpd-server does not support symlinks
    log_begin_msg "Preparing $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.0"
    mkdir -p $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/boot
    if [ ! -f $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.0 ]; then
        if [ -f /usr/lib/syslinux/pxelinux.0 ]; then
            cp -a /usr/lib/syslinux/pxelinux.0 $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.0
        elif [ -f /usr/share/syslinux/pxelinux.0 ]; then
            cp -a /usr/share/syslinux/pxelinux.0 $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.0
        else
            log_end_msg 1
            return 1
        fi
    fi

    # make sure apache and db are up
    if ! ps ax | grep apache2 | grep -v grep 1>/dev/null; then
        $OPENQRM_WEBSERVER_INIT start
    fi

	# link the web application directory to the documentroot
	HTPASSWD="htpasswd"
    ln -sf $OPENQRM_SERVER_BASE_DIR/openqrm/web/ $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm
    # the default apache config normally does not allow to override the authconfig (needed for basic auth)
    # so we allow it for the openqrm directory
    cat $OPENQRM_SERVER_BASE_DIR/openqrm/etc/httpd/openqrm-httpd.conf | sed -e "s#OPENQRM_WEBSERVER_DOCUMENT_ROOT#$OPENQRM_WEBSERVER_DOCUMENT_ROOT#g" >> /etc/apache2/conf.d/openqrm-httpd.conf
	$OPENQRM_WEBSERVER_INIT reload

	# create the .htaccess file
	cat $OPENQRM_SERVER_BASE_DIR/openqrm/etc/httpd/openqrm-htaccess.conf | sed -e "s#OPENQRM_WEBSERVER_DOCUMENT_ROOT#$OPENQRM_WEBSERVER_DOCUMENT_ROOT#g" > $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/.htaccess
	# create the default admin user
	$HTPASSWD -bc $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/.htpasswd openqrm openqrm
	chmod 666 $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/.htpasswd

	# create the image-auth dir
	mkdir -p $OPENQRM_SERVER_BASE_DIR/openqrm/web/action/image-auth
	chmod 777 $OPENQRM_SERVER_BASE_DIR/openqrm/web/action/image-auth

    # create the openqrm-client link in the right arch
    KERNEL_ARCH=`uname -m`
    if echo $KERNEL_ARCH | grep i.*86 1>/dev/null; then
        # i386
        OPENQRM_CLIENT_ARCH=i386
    else
        OPENQRM_CLIENT_ARCH=$KERNEL_ARCH
    fi
    cd $OPENQRM_SERVER_BASE_DIR/openqrm/web/boot-service/
    ln -sf openqrm-client.tgz openqrm-client.$OPENQRM_CLIENT_ARCH.tgz
    cd - 1>/dev/null

    # init and start the remote execution layer
	case "$OPENQRM_EXECUTION_LAYER" in
		dropbear)
			# init the openQRM exec-mechanism via dropbear
			/bin/rm -rf $OPENQRM_SERVER_BASE_DIR/openqrm/etc/dropbear
			mkdir -p $OPENQRM_SERVER_BASE_DIR/openqrm/etc/dropbear/
			$OPENQRM_SERVER_BASE_DIR/openqrm/bin/dropbearkey -t rsa -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/dropbear/dropbear_rsa_host_key
			# allow the webserver user to read it
			chmod 600 $OPENQRM_SERVER_BASE_DIR/openqrm/etc/dropbear/dropbear_rsa_host_key
			# create authorized_keys
			PUBLIC_KEY=`$OPENQRM_SERVER_BASE_DIR/openqrm/bin/dropbearkey -y -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/dropbear/dropbear_rsa_host_key | grep ssh`
			if [ ! -d /root/.ssh ]; then
				mkdir /root/.ssh
			fi
			if [ ! -f /root/.ssh/authorized_keys ]; then
				echo "$PUBLIC_KEY" > /root/.ssh/authorized_keys
			else
				OPENQRM_HOST=`echo $PUBLIC_KEY | awk {' print $3 '}`
				if grep $OPENQRM_HOST /root/.ssh/authorized_keys 1>/dev/null; then
					sed -i -e "s#.*$OPENQRM_HOST.*##g" /root/.ssh/authorized_keys
				fi
				echo "$PUBLIC_KEY" >> /root/.ssh/authorized_keys
			fi
			# and put it in the boot-service dir for the resources to download
			echo "$PUBLIC_KEY" > $OPENQRM_SERVER_BASE_DIR/openqrm/web/boot-service/openqrm-server-public-rsa-key
            stop_exec_subsystem
			# start the openqrm-execd daemon
            log_daemon_msg "Starting openQRM Exec-subsystem"
			$OPENQRM_SERVER_BASE_DIR/openqrm/sbin/dropbear -p $OPENQRM_EXEC_PORT -r $OPENQRM_SERVER_BASE_DIR/openqrm/etc/dropbear/dropbear_rsa_host_key
			# start the openqrm-cmd-queue
            log_daemon_msg "Starting openQRM Command-Queue"
			$OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-cmd-queue &
			;;
		*)
			log_failure_msg "Un-supported command execution layer $openqrm_execution_layer ! Exiting."
			return 1
			;;
	esac

    # create unconfigured file containing a list of available network cards to setup openQRM on
    ifconfig -a | grep -v inet6  | grep -B1 inet | grep -i link | grep -v lo | awk {' print $1 '} > $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/unconfigured
    log_end_msg 0
}




# this function is being ran from the ui after
# openqrm-server.conf is being setup correctly
function openqrm_server_init_config() {
    RESTORE_LAST_STATE=$1

    if [ -f $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/unconfigured ]; then
        log_begin_msg "Initialyzing the openQRM Database"

        # initialyze the database
        chmod +x $OPENQRM_SERVER_BASE_DIR/openqrm/etc/db/$OPENQRM_DATABASE_TYPE/openqrm-$OPENQRM_DATABASE_TYPE-functions
        if ! $OPENQRM_SERVER_BASE_DIR/openqrm/etc/db/$OPENQRM_DATABASE_TYPE/openqrm-$OPENQRM_DATABASE_TYPE-functions init; then
            log_end_msg 1
            return -1
        fi

        # check if we should restore the last state
        if [ "$RESTORE_LAST_STATE" == "restore" ]; then
            log_begin_msg "Restoring last openQRM state backup"
            # check if backups are not locked
            if [ ! -f $OPENQRM_SERVER_STATE_DIR/locked ]; then
                if [ "$OPENQRM_RESTORE_STATE" != "false" ]; then
                    # check if there is a server state to restore
                    LAST_SERVER_STATE_BACKUP=`ls -tr $OPENQRM_SERVER_STATE_DIR/uninstall-* 2>/dev/null | tail -n1 | sed -s "s/\.tgz//g"`
                    if [ "$LAST_SERVER_STATE_BACKUP" != "" ]; then
                        LAST_SERVER_STATE_BACKUP=`basename $LAST_SERVER_STATE_BACKUP`
                        log_begin_msg "Found backup of last openQRM Server state $LAST_SERVER_STATE_BACKUP, restoring it"
                        openqrm_server_state restore $LAST_SERVER_STATE_BACKUP
                    fi
                fi
            else
                log_warning_msg "Found openQRM Server state backups locked by $OPENQRM_SERVER_STATE_DIR/locked"
            fi
        else
            log_begin_msg "NOTICE: Skipping openQRM state restore"
        fi
        log_end_msg 0

        # create $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.cfg/default
        log_begin_msg "Creating default PXE-configuration"
        mkdir -p $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.cfg/
        openqrm_server_create_pxe_config -1 default default
        log_end_msg 0

        # add automatic startup to init
        openqrm_chkconfig add openqrm

        # here we create + add the default kernel+kernel-version to the openQRM Server
        # via the kernel-action.form. If this returns bad something is wrong
        DEFAULT_KERNEL_VERSION=`uname -r`
        log_begin_msg "Creating the default kernel version $DEFAULT_KERNEL_VERSION"
        INITRD_TYPE="initramfs"
        openqrm_server_create_kernel default $DEFAULT_KERNEL_VERSION / $INITRD_TYPE
        if ! openqrm_server_manage_kernel add openqrm openqrm default $DEFAULT_KERNEL_VERSION; then
            log_end_msg 1
            return -1
        fi
        log_end_msg 0

        # remove configure lock
        rm -f $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/unconfigured

        # (re-) start
        $0 start
        log_success_msg "Successfully initialyzed and started the openQRM Server"
        return 0

    else
        log_warning_msg "This openQRM Server is already configured. Skipping re-init"
        return 0
    fi

}





function openqrm_server_uninstall() {

	log_begin_msg "Uninstalling openQRM Server ver. $OPENQRM_SERVER_VERSION"

	# backup state
    chmod +x $OPENQRM_SERVER_BASE_DIR/openqrm/etc/db/$OPENQRM_DATABASE_TYPE/openqrm-$OPENQRM_DATABASE_TYPE-functions
	openqrm_server_state backup uninstall

	# stopping and uninstalling all enabled plugins
	for OPENQRM_PLUGIN in `ls $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/plugins/`; do
		if [ -x $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN ]; then
			$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN stop
			rm -f $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/plugins/$OPENQRM_PLUGIN
		fi
	done

	# drop db
	$OPENQRM_SERVER_BASE_DIR/openqrm/etc/db/$OPENQRM_DATABASE_TYPE/openqrm-$OPENQRM_DATABASE_TYPE-functions drop

	# removing the apache web + config
	rm -f $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm
    rm -f /etc/apache2/conf.d/openqrm-httpd.conf
	$OPENQRM_WEBSERVER_INIT reload

	# remove default file
	rm -f $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.cfg/default

    stop_exec_subsystem
	case "$OPENQRM_EXECUTION_LAYER" in
		dropbear)
			# remove dropbear key
			rm -rf $OPENQRM_SERVER_BASE_DIR/openqrm/etc/dropbear
			rm -rf $OPENQRM_SERVER_BASE_DIR/openqrm/var
			;;
	esac
	log_end_msg 0
}


function openqrm_server_start() {

	if [ -f ${LOCKFILE} ]; then
		log_failure_msg "openQRM Server ver. $OPENQRM_SERVER_VERSION is already running"
        return 1
    fi
    # check if we are at first-startup, if yes do initialization
    if [ ! -f /etc/apache2/conf.d/openqrm-httpd.conf ]; then
        openqrm_server_init
    fi
    if [ -f $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/unconfigured ]; then
        if [ "$OPENQRM_SERVER_IP_ADDRESS" != "" ]; then
            log_success_msg "Please configure your openQRM Server at : http://$OPENQRM_SERVER_IP_ADDRESS/openqrm/"
        else
            log_success_msg "Please configure your openQRM Server at : http://[server-ip-address]/openqrm/"
        fi
        log_success_msg "-> User : openqrm"
        log_success_msg "-> Password : openqrm"
        sleep 2
        log_end_msg 0

    else
        log_begin_msg "Starting the openQRM Server ver. $OPENQRM_SERVER_VERSION"
        # check openqrm-interface
        ifconfig "$OPENQRM_SERVER_INTERFACE" | grep inet 1>/dev/null 2>&1 || \
            { echo "Interface $OPENQRM_SERVER_INTERFACE is down. Please configure and activate it and try again"; return 1; }
        CONFIGURED_IP=$(cat $OPENQRM_SERVER_BASE_DIR/openqrm/tftpboot/pxelinux.cfg/default | grep "openqrm=" | sed -e "s/.*openqrm=//" | awk {' print $1 '})
        if [ "$OPENQRM_SERVER_IP_ADDRESS" != "$CONFIGURED_IP" ]; then
            # create lockfile again to forcre re-configuration
            ifconfig -a | grep -v inet6  | grep -B1 inet | grep -i link | grep -v lo | awk {' print $1 '} > $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/unconfigured
            log_failure_msg "Interface $OPENQRM_SERVER_INTERFACE has the wrong ip-configuration"
            log_end_msg 1
            return 1
        fi

        # start the execution layer
        case "$OPENQRM_EXECUTION_LAYER" in
            dropbear)
                stop_exec_subsystem
                # start the openqrm-execd daemon
                $OPENQRM_SERVER_BASE_DIR/openqrm/sbin/dropbear -p $OPENQRM_EXEC_PORT -r $OPENQRM_SERVER_BASE_DIR/openqrm/etc/dropbear/dropbear_rsa_host_key
                # start the openqrm-cmd-queue
                $OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-cmd-queue &
                ;;
            *)
                log_failure_msg "ERROR: Un-supported command execution layer $openqrm_execution_layer ! Exiting."
                log_end_msg 1
                ;;
        esac

        # and the monitoring infra-structure
        $OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-monitord &
        log_end_msg 0

        # start all enabled plugins
        log_begin_msg "Starting enabled openQRM Server plugins"
        for OPENQRM_PLUGIN in `ls $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/plugins/`; do
            if [ -x $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN ]; then
                $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN start
            fi
        done
        touch ${LOCKFILE}
        log_end_msg 0
    fi

}


function openqrm_server_stop() {

	if [ ! -f ${LOCKFILE} ]; then
		log_warning_msg "openQRM Server ver. $OPENQRM_SERVER_VERSION is not running"
    else
        # stop all enabled plugins
        log_begin_msg "Stopping enabled openQRM Server plugins"
        for OPENQRM_PLUGIN in `ls $OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/plugins/`; do
            if [ -x $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN ]; then
                $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/$OPENQRM_PLUGIN/etc/init.d/openqrm-plugin-$OPENQRM_PLUGIN stop
            fi
        done
        log_end_msg 0

        log_begin_msg "Stopping the openQRM Server ver. $OPENQRM_SERVER_VERSION"
        case "$OPENQRM_EXECUTION_LAYER" in
            dropbear)
                stop_exec_subsystem
                ;;
            openqrm-execd)
                killall openqrm-exec-port-monitor 1>/dev/null 2>&1
                killall openqrm-execd 1>/dev/null 2>&1
                ;;
            *)
                log_end_msg 1
                return 1
                ;;
        esac
        killall openqrm-monitord 1>/dev/null 2>&1
        /bin/rm -f ${LOCKFILE}
        log_end_msg 0
    fi
}


function openqrm_server_status() {
	if [ -f ${LOCKFILE} ]; then
		log_success_msg "openQRM Server ver. $OPENQRM_SERVER_VERSION is running"
        return 0
	else
		log_failure_msg "openQRM Server ver. $OPENQRM_SERVER_VERSION is not running"
        return 3
	fi
}


# main
ADDITIONAL_PARAM=$2
case "$1" in
	start)
		openqrm_server_start
		;;
	stop)
		openqrm_server_stop
		;;
	status)
		openqrm_server_status
		;;
	restart)
		openqrm_server_stop
		sleep 1
		openqrm_server_start
		;;
	reload)
		openqrm_server_stop
		sleep 1
		openqrm_server_start
		;;
	force-reload)
		openqrm_server_stop
		sleep 1
		openqrm_server_start
		;;
	init)
		openqrm_server_init
		;;
	init_config)
		openqrm_server_init_config $ADDITIONAL_PARAM
		;;
	uninstall)
		openqrm_server_uninstall
		;;
	*)
		echo "Usage: $0 {start|stop|status|restart|reload|force-reload|init|uninstall}"
		exit 1

esac



