#!/bin/bash
# this script automatically manages vmware-server2
#
# This file is part of openQRM.
#
# openQRM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# openQRM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with openQRM.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2009, Matthias Rechenburg <matt@openqrm.com>
#
OPENQRM_SERVER_BASE_DIR=$(dirname $0)/../../../..
OPENQRM_SERVER_BASE_DIR=$(pushd $OPENQRM_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/vmware-server2/include/openqrm-plugin-vmware-server2-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/vmware-server2/etc/openqrm-plugin-vmware-server2.conf
if [ -f $OPENQRM_RESOURCE_PARAMETER_FILE ]; then
	. $OPENQRM_RESOURCE_PARAMETER_FILE
	OPENQRM_SERVER_IP=$resource_openqrmserver
elif [ -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf ]; then
	. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
	. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions
	openqrm_server_get_config
	OPENQRM_SERVER_IP=$OPENQRM_SERVER_IP_ADDRESS
	resource_id=0
	resource_openqrmserver=$OPENQRM_SERVER_IP_ADDRESS
    openqrm_web_protocol=$OPENQRM_WEB_PROTOCOL
fi
export LANG=C
OPENQRM_POSTENCODE="$OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-postencode"
OPENQRM_VMWARE_SERVER_VM_TEMPLATE="$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/vmware-server2/etc/templates/openqrm-vmware-server2-vm"
OPENQRM_VMWARE_SERVER_CMD_CHECK_DELAY="sleep 5"
VMWARE_VIM_CMD="vmware-vim-cmd ${VMWARE_VIM_CMD_ARGS}"
# define wget to use with https
if [ "$openqrm_web_protocol" == "https" ]; then
    WGET_NO_CERT_CHECK="--no-check-certificate"
fi

# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	vmware_server2_log "ERROR: Please run this script as root!"
	exit 6
fi

# is this a vmware-server2 ?
if ! which $VMWARE_VIM_CMD 1>/dev/null 2>&1; then
	vmware_server2_log "ERROR: VMware-server2 util $VMWARE_VIM_CMD not installed, exiting!"
	exit 6
fi

# using the first datastore on the vmware-server2-tools
# trying hard since as experienced vmware-server2 sometimes throughs errors instead of a list
LOOP=0
LOOP_MAX=10
while [ "$url" == "" ]; do
    eval `vmware-vim-cmd hostsvc/datastorebrowser/list firefox 2 | grep url | uniq | head -n1 | sed -e "s# ##g" | sed -e "s#,##g"`
    if [ "$url" == "" ]; then
        vmware_server2_log "WARNING: Could not find a default datastore on the VMware-server2, retrying $LOOP time !"
    fi
    if [ "$LOOP" == "$LOOP_MAX" ]; then
    	vmware_server2_log "ERROR: Could not find a default datastore on the VMware-server2, exiting!"
        exit 1
    fi
    LOOP=$(( LOOP + 1 ))
done

OPENQRM_VM_DIR=$url


function vmware-server2_usage() {
	vmware_server2_log "Usage : $0 start/stop/reboot/add/delete/remove/list <-n vm-name>"
	vmware_server2_log "Usage : $0 setboot <-m mac-address> <-b local/net>"
	vmware_server2_log "Usage : $0 create <-n vm-name> <-m mac-address> <-r memory> [-d disk-size ] [-c cpus ] [-s swap-size ] [-va vnc-password ] [-vp vnc-port ]"
	vmware_server2_log "        $0 post_vm_list <-u username> <-p password>"
	exit 1
}


# returns the vmware-server2 vm id
function vmware_server2_get_vmid() {
	local VM_NAME=$1
	local VMID=`$VMWARE_VIM_CMD vmsvc/getallvms | grep $VM_NAME.vmx | awk {' print $1 '}`
	if [ "$VMID" == "" ]; then
		vmware_server2_log "ERROR: Could not find the vm id for the VMware Server 2 vm $VM_NAME"
		openqrm_post_event 0 "vmware_server2_get_vmid" 3 "openqrm-vmware-server2" "Could not find the vm id for the VMWare-server2 vm $VM_NAME!"
		return 1
	else
		echo $VMID
	fi	
}

# returns the full path the the vmx file of a vm
function vmware_server2_get_vmx() {
	local VM_NAME=$1
	local VMX=`find $OPENQRM_VM_DIR/* -name $VM_NAME.vmx`
	if [ "$VMX" == "" ]; then
		vmware_server2_log "ERROR: Could not find the vmx config file for the VMware Server 2 vm $VM_NAME"
		openqrm_post_event 0 "vmware_server2_get_vmx" 3 "openqrm-vmware-server2" "Could not find the vmx config file for the VMware Server 2 vm $VM_NAME!"
		return 1
	else
		echo $VMX
	fi	
}


VMWARE_SERVER_COMMAND=$1
# re-run in background via screen
if [ "$RUN_IN_BACKGROUND" != "true" ]; then
    if [ -x /usr/bin/screen.real ]; then
        RUNSCREEN="/usr/bin/screen.real"
    else
        RUNSCREEN=`which screen`
    fi
    export RUN_IN_BACKGROUND=true
    SCREEN_NAME=`date +%T%x | sed -e "s/://g" | sed -e "s#/##g"`
    $RUNSCREEN -dmS $SCREEN_NAME $0 $@
    exit
fi
shift

while [ $# -ne 0 ]; do
	case "$1" in
		-n)
			VMWARE_SERVER_VM_NAME=$2
			shift
			;;
		-c)
			VMWARE_SERVER_VM_CPU=$2
			shift
			;;
		-m)
			VMWARE_SERVER_VM_MAC=$2
			shift
			;;
		-m2)
			VMWARE_SERVER_VM_MAC2=$2
			shift
			;;
		-m3)
			VMWARE_SERVER_VM_MAC3=$2
			shift
			;;
		-m4)
			VMWARE_SERVER_VM_MAC4=$2
			shift
			;;
		-r)
			VMWARE_SERVER_VM_RAM=$2
			shift
			;;
		-d)
			VMWARE_SERVER_VM_DISK=$2
			shift
			;;
		-u)
			VMWARE_SERVER_OPENQRM_USERNAME=$2
			shift
			;;
		-p)
			VMWARE_SERVER_OPENQRM_PASSWORD=$2
			shift
			;;
		-b)
			VMWARE_SERVER_VM_BOOT=$2
			shift
			;;
		-s)
			VMWARE_SERVER_VM_SWAP=$2
			shift
			;;
		-va)
			VMWARE_SERVER_VM_VNC_AUTH=$2
			shift
			;;
		-vp)
			VMWARE_SERVER_VM_VNC_PORT=$2
			shift
			;;
		-x)
			VMWARE_SERVER_VM_COMPONENT_NUMBER=$2
			shift
			;;
		*)
			vmware_server2_log "ERROR: Free commandline arguments are not allowed"
			vmware-server2_usage
			exit 6
			;;
	esac
	shift
done




# main
if [ "$VMWARE_SERVER_COMMAND" == "" ]; then
	vmware-server2_usage
fi

if [ "$VMWARE_SERVER_COMMAND" == "post_vm_list" ]; then
		if [ "$VMWARE_SERVER_OPENQRM_USERNAME" == "" ]; then
			vmware-server2_usage
		fi
		if [ "$VMWARE_SERVER_OPENQRM_PASSWORD" == "" ]; then
			vmware-server2_usage
		fi
else

	if [ "$VMWARE_SERVER_COMMAND" != "list" ] && [ "$VMWARE_SERVER_COMMAND" != "setboot" ]; then
		if [ "$VMWARE_SERVER_VM_NAME" == "" ]; then
			vmware-server2_usage
		fi
	fi
fi


case "$VMWARE_SERVER_COMMAND" in 

	create)
		if [ "$VMWARE_SERVER_VM_MAC" == "" ]; then
			vmware-server2_usage
		fi
		if [ "$VMWARE_SERVER_VM_RAM" == "" ]; then
			vmware-server2_usage
		fi
		vmware_server2_lock aquire
		vmware_server2_log "Creating VMware vm $VMWARE_SERVER_VM_NAME -> $OPENQRM_VM_DIR/$VMWARE_SERVER_VM_NAME/$VMWARE_SERVER_VM_NAME.vmx"
		# creating the vmx
        # some defaults
        if [ "$VMWARE_SERVER_VM_CPU" == "" ]; then
            VMWARE_SERVER_VM_CPU=1
        fi
		mkdir -p $OPENQRM_VM_DIR/$VMWARE_SERVER_VM_NAME/
        echo '#!/usr/bin/vmware' > $OPENQRM_VM_DIR/$VMWARE_SERVER_VM_NAME/$VMWARE_SERVER_VM_NAME.vmx
		cat $OPENQRM_VMWARE_SERVER_VM_TEMPLATE |	\
			sed -e "s/@@VMWARE_SERVER_VM_NAME@@/$VMWARE_SERVER_VM_NAME/g" |	\
			sed -e "s/@@OPENQRM_RESOURCE_RAM@@/$VMWARE_SERVER_VM_RAM/g"	| \
			sed -e "s/@@OPENQRM_RESOURCE_CPU@@/$VMWARE_SERVER_VM_CPU/g" |	\
			sed -e "s/@@VMWARE_SERVER_VM_MAC@@/$VMWARE_SERVER_VM_MAC/g" |   \
			sed -e "s/@@VMWARE_SERVER_INTERNAL_BRIDGE@@/$OPENQRM_VMWARE_SERVER_INTERNAL_BRIDGE/g"	\
			>> $OPENQRM_VM_DIR/$VMWARE_SERVER_VM_NAME/$VMWARE_SERVER_VM_NAME.vmx

		# addtional nics -> nic2
		if [ "$VMWARE_SERVER_VM_MAC2" != "" ]; then
			vmware_server2_log " Creating nic2"
			cat >> $OPENQRM_VM_DIR/$VMWARE_SERVER_VM_NAME/$VMWARE_SERVER_VM_NAME.vmx << EOF
Ethernet1.present = "TRUE"
ethernet1.address = "$VMWARE_SERVER_VM_MAC2"
ethernet1.networkName = "$OPENQRM_VMWARE_SERVER_EXTERNAL_BRIDGE"
EOF
		fi
		# addtional nics -> nic3
		if [ "$VMWARE_SERVER_VM_MAC3" != "" ]; then
			vmware_server2_log " Creating nic3"
			cat >> $OPENQRM_VM_DIR/$VMWARE_SERVER_VM_NAME/$VMWARE_SERVER_VM_NAME.vmx << EOF
Ethernet2.present = "TRUE"
ethernet2.address = "$VMWARE_SERVER_VM_MAC3"
ethernet2.networkName = "$OPENQRM_VMWARE_SERVER_EXTERNAL_BRIDGE"
EOF
		fi
		# addtional nics -> nic4
		if [ "$VMWARE_SERVER_VM_MAC4" != "" ]; then
			vmware_server2_log " Creating nic4"
			cat >> $OPENQRM_VM_DIR/$VMWARE_SERVER_VM_NAME/$VMWARE_SERVER_VM_NAME.vmx << EOF
Ethernet3.present = "TRUE"
ethernet3.address = "$VMWARE_SERVER_VM_MAC4"
ethernet3.networkName = "$OPENQRM_VMWARE_SERVER_EXTERNAL_BRIDGE"
EOF
		fi
        # disk
		if [ "$VMWARE_SERVER_VM_DISK" != "" ]; then
			vmware_server2_log "-> Creating disk"
			mkdir -p $OPENQRM_VM_DIR/$VMWARE_SERVER_VM_NAME
			vmware-vdiskmanager -c -s $VMWARE_SERVER_VM_DISK""Mb -a lsilogic -t 0 $OPENQRM_VM_DIR/$VMWARE_SERVER_VM_NAME/$VMWARE_SERVER_VM_NAME.vmdk
			# add the disk to the config file
			cat >> $OPENQRM_VM_DIR/$VMWARE_SERVER_VM_NAME/$VMWARE_SERVER_VM_NAME.vmx << EOF
scsi0:0.present = "true"
scsi0:0.fileName = "$VMWARE_SERVER_VM_NAME.vmdk"
scsi0:0.deviceType = "scsi-hardDisk"
scsi0:0.redo = ""
EOF
		fi
        # swap
		if [ "$VMWARE_SERVER_VM_SWAP" != "" ]; then
			vmware_server2_log "-> Creating swap"
			mkdir -p $OPENQRM_VM_DIR/$VMWARE_SERVER_VM_NAME
			vmware-vdiskmanager -c -s $VMWARE_SERVER_VM_SWAP""Mb -a lsilogic -t 0 $OPENQRM_VM_DIR/$VMWARE_SERVER_VM_NAME/$VMWARE_SERVER_VM_NAME.swap.vmdk
			# add the disk to the config file
			cat >> $OPENQRM_VM_DIR/$VMWARE_SERVER_VM_NAME/$VMWARE_SERVER_VM_NAME.vmx << EOF
scsi0:1.present = "true"
scsi0:1.fileName = "$VMWARE_SERVER_VM_NAME.swap.vmdk"
scsi0:1.deviceType = "scsi-hardDisk"
scsi0:1.redo = ""
EOF
		fi
        # vnc ?
        if [ "$VMWARE_SERVER_VM_VNC_AUTH" != "" ] && [ "$VMWARE_SERVER_VM_VNC_PORT" != "" ]; then
			cat >> $OPENQRM_VM_DIR/$VMWARE_SERVER_VM_NAME/$VMWARE_SERVER_VM_NAME.vmx << EOF
RemoteDisplay.vnc.enabled = TRUE
RemoteDisplay.vnc.port = "$VMWARE_SERVER_VM_VNC_PORT"
RemoteDisplay.vnc.password = "$VMWARE_SERVER_VM_VNC_AUTH"
EOF
        fi
	
		# register
		chmod +x $OPENQRM_VM_DIR/$VMWARE_SERVER_VM_NAME/$VMWARE_SERVER_VM_NAME.vmx
		$VMWARE_VIM_CMD solo/registervm $OPENQRM_VM_DIR/$VMWARE_SERVER_VM_NAME/$VMWARE_SERVER_VM_NAME.vmx
		# start
		VMID=`vmware_server2_get_vmid $VMWARE_SERVER_VM_NAME`		

		$VMWARE_VIM_CMD vmsvc/power.on $VMID | logger
        # restart once to apply the changes to the vmx file
        $VMWARE_VIM_CMD vmsvc/power.off $VMID | logger
		$VMWARE_VIM_CMD vmsvc/power.on $VMID | logger
		$OPENQRM_VMWARE_SERVER_CMD_CHECK_DELAY

		VM_STATE=`$VMWARE_VIM_CMD vmsvc/get.summary $VMID | grep powerState`
		if echo $VM_STATE | grep poweredOn 1>/dev/null; then
			vmware_server2_log openqrm-vmware-server2 "NOTICE: VMware-server2 vm $VMID starting."
			openqrm_post_event 0 "openqrm-vmware-server2" 5 "openqrm-vmware-server2" "VMware-server2 vm $VMID starting."
		else
			vmware_server2_log openqrm-vmware-server2 "ERROR: VMware-server2 vm $VMID failed to start."
			openqrm_post_event 0 "openqrm-vmware-server2" 3 "openqrm-vmware-server2" "VMware-server2 vm $VMID failed to start!"
		fi		
		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$VMWARE_SERVER_OPENQRM_USERNAME" != "" ] && [ "$VMWARE_SERVER_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $VMWARE_SERVER_OPENQRM_USERNAME -p $VMWARE_SERVER_OPENQRM_PASSWORD
		fi
		vmware_server2_lock release
		;;
	add)
		vmware_server2_lock aquire
		vmware_server2_log "Adding VMware-server2 vm $VMWARE_SERVER_VM_NAME"
		VMX_CONFIG=`vmware_server2_get_vmx $VMWARE_SERVER_VM_NAME`
		$VMWARE_VIM_CMD solo/registervm $VMX_CONFIG | logger
		$OPENQRM_VMWARE_SERVER_CMD_CHECK_DELAY
		VMID=`vmware_server2_get_vmid $VMWARE_SERVER_VM_NAME`
		REGISTERED=`$VMWARE_VIM_CMD vmsvc/getallvms | grep "^$VMID "`
		if [ "$REGISTERED" == "" ]; then
			vmware_server2_log openqrm-vmware-server2 "ERROR: VMware-server2 vm $VMID failed to register!"
			openqrm_post_event 0 "openqrm-vmware-server2" 3 "openqrm-vmware-server2" "VMware-server2 vm $VMID failed to register!"
		else
			vmware_server2_log openqrm-vmware-server2 "NOTICE: VMware-server2 vm $VMID registerd,"
			openqrm_post_event 0 "openqrm-vmware-server2" 5 "openqrm-vmware-server2" "VMware-server2 vm $VMID registered."
		fi
		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$VMWARE_SERVER_OPENQRM_USERNAME" != "" ] && [ "$VMWARE_SERVER_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $VMWARE_SERVER_OPENQRM_USERNAME -p $VMWARE_SERVER_OPENQRM_PASSWORD
		fi
		vmware_server2_lock release
		;;
	start)
		vmware_server2_lock aquire
		vmware_server2_log "Starting VMware vm $VMWARE_SERVER_VM_NAME"

		VMID=`vmware_server2_get_vmid $VMWARE_SERVER_VM_NAME`
		$VMWARE_VIM_CMD vmsvc/power.on $VMID | logger
		$OPENQRM_VMWARE_SERVER_CMD_CHECK_DELAY
		VM_STATE=`$VMWARE_VIM_CMD vmsvc/get.summary $VMID | grep powerState`
		if echo $VM_STATE | grep poweredOn 1>/dev/null; then
			vmware_server2_log openqrm-vmware-server2 "NOTICE: VMware-server2 vm $VMID starting."
			openqrm_post_event 0 "openqrm-vmware-server2" 5 "openqrm-vmware-server2" "VMware-server2 vm $VMID starting."
		else
			vmware_server2_log openqrm-vmware-server2 "ERROR: VMware-server2 vm $VMID failed to start."
			openqrm_post_event 0 "openqrm-vmware-server2" 3 "openqrm-vmware-server2" "VMware-server2 vm $VMID failed to start!"
		fi
		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$VMWARE_SERVER_OPENQRM_USERNAME" != "" ] && [ "$VMWARE_SERVER_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $VMWARE_SERVER_OPENQRM_USERNAME -p $VMWARE_SERVER_OPENQRM_PASSWORD
		fi
		vmware_server2_lock release
		;;
	stop)
		vmware_server2_lock aquire
		vmware_server2_log "Stopping VMware vm $VMWARE_SERVER_VM_NAME"
		VMID=`vmware_server2_get_vmid $VMWARE_SERVER_VM_NAME`
		$VMWARE_VIM_CMD vmsvc/power.off $VMID | logger
		$OPENQRM_VMWARE_SERVER_CMD_CHECK_DELAY
		VM_STATE=`$VMWARE_VIM_CMD vmsvc/get.summary $VMID | grep powerState`
		if echo $VM_STATE | grep poweredOff 1>/dev/null; then
			vmware_server2_log openqrm-vmware-server2 "NOTICE: VMware-server2 vm $VMID stopped"
			openqrm_post_event 0 "openqrm-vmware-server2" 5 "openqrm-vmware-server2" "VMware-server2 vm $VMID stopped."
		else
			vmware_server2_log openqrm-vmware-server2 "ERROR: VMware-server2 vm $VMID failed to stop"
			openqrm_post_event 0 "openqrm-vmware-server2" 3 "openqrm-vmware-server2" "VMware-server2 vm $VMID failed to stop!"
		fi		
		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$VMWARE_SERVER_OPENQRM_USERNAME" != "" ] && [ "$VMWARE_SERVER_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $VMWARE_SERVER_OPENQRM_USERNAME -p $VMWARE_SERVER_OPENQRM_PASSWORD
		fi
		vmware_server2_lock release
		;;
	reboot)
		vmware_server2_lock aquire
		vmware_server2_log "Rebooting VMware vm $VMWARE_SERVER_VM_NAME"
		VMID=`vmware_server2_get_vmid $VMWARE_SERVER_VM_NAME`
		$VMWARE_VIM_CMD vmsvc/power.off $VMID | logger
		$OPENQRM_VMWARE_SERVER_CMD_CHECK_DELAY
		$VMWARE_VIM_CMD vmsvc/power.on $VMID | logger
		$OPENQRM_VMWARE_SERVER_CMD_CHECK_DELAY
		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$VMWARE_SERVER_OPENQRM_USERNAME" != "" ] && [ "$VMWARE_SERVER_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $VMWARE_SERVER_OPENQRM_USERNAME -p $VMWARE_SERVER_OPENQRM_PASSWORD
		fi
		vmware_server2_lock release
		;;
	remove)
		vmware_server2_lock aquire
		vmware_server2_log "Removing VMware vm $VMWARE_SERVER_VM_NAME"

		VMID=`vmware_server2_get_vmid $VMWARE_SERVER_VM_NAME`
		# make sure it is stopped
		$VMWARE_VIM_CMD vmsvc/power.off $VMID | logger
		$OPENQRM_VMWARE_SERVER_CMD_CHECK_DELAY
		# unregister
		$VMWARE_VIM_CMD vmsvc/unregister $VMID | logger
		$OPENQRM_VMWARE_SERVER_CMD_CHECK_DELAY
		REGISTERED=`$VMWARE_VIM_CMD vmsvc/getallvms | grep "^$VMID "`
		if [ "$REGISTERED" == "" ]; then
			vmware_server2_log openqrm-vmware-server2 "NOTICE: VMware-server2 vm $VMID unregisterd"
			openqrm_post_event 0 "openqrm-vmware-server2" 5 "openqrm-vmware-server2" "VMware-server2 vm $VMID unregistered."
		else
			vmware_server2_log openqrm-vmware-server2 "ERROR: VMware-server2 vm $VMID failed to unregister"
			openqrm_post_event 0 "openqrm-vmware-server2" 3 "openqrm-vmware-server2" "VMware-server2 vm $VMID failed to unregister!"
		fi
		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$VMWARE_SERVER_OPENQRM_USERNAME" != "" ] && [ "$VMWARE_SERVER_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $VMWARE_SERVER_OPENQRM_USERNAME -p $VMWARE_SERVER_OPENQRM_PASSWORD
		fi
		vmware_server2_lock release
		;;
	delete)
		vmware_server2_lock aquire
		vmware_server2_log "Deleting VMware vm $VMWARE_SERVER_VM_NAME"
		VMX_CONFIG=`vmware_server2_get_vmx $VMWARE_SERVER_VM_NAME`
		# make sure it is registered so we can destroy it via its id
		FOUND_VMID=true
		while ! vmware_server2_get_vmid $VMWARE_SERVER_VM_NAME; do
			$VMWARE_VIM_CMD solo/registervm $VMX_CONFIG | logger
			$OPENQRM_VMWARE_SERVER2_CMD_CHECK_DELAY
			VMID=`vmware_server2_get_vmid $VMWARE_SERVER_VM_NAME`
			DEL_LOOP=$(( DEL_LOOP + 1 ))
			if [ "$DEL_LOOP" == "3" ]; then
				FOUND_VMID=false
				break
			fi
		done
		if [ "$FOUND_VMID" == "true" ]; then
			VMID=`vmware_server2_get_vmid $VMWARE_SERVER_VM_NAME`
            # make sure it is stopped
            $VMWARE_VIM_CMD vmsvc/power.off $VMID | logger
            # unregister
            $VMWARE_VIM_CMD vmsvc/unregister $VMID | logger
            # destroy
			$VMWARE_VIM_CMD vmsvc/destroy $VMID | logger
            $OPENQRM_VMWARE_SERVER_CMD_CHECK_DELAY
            # remove hard
            rm -rf $OPENQRM_VM_DIR/$VMWARE_SERVER_VM_NAME
            vmware_server2_log openqrm-vmware-server2 "NOTICE: Removed $VMWARE_SERVER_VM_NAME/$VMID from VMware-server2-host."
            openqrm_post_event 0 "openqrm-vmware-server2" 5 "openqrm-vmware-server2" "Removed $VMWARE_SERVER_VM_NAME/$VMID from VMware-server2-host."
        else
            vmware_server2_log openqrm-vmware-server2 "ERROR: Could not remove $VMWARE_SERVER_VM_NAME/$VMID from VMware-server2-host."
            openqrm_post_event 0 "openqrm-vmware-server2" 2 "openqrm-vmware-server2" "Could not remove $VMWARE_SERVER_VM_NAME/$VMID from VMware-server2-host."
        fi

		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$VMWARE_SERVER_OPENQRM_USERNAME" != "" ] && [ "$VMWARE_SERVER_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $VMWARE_SERVER_OPENQRM_USERNAME -p $VMWARE_SERVER_OPENQRM_PASSWORD
		fi
		vmware_server2_lock release
		;;
	list)
		vmware_server2_log "Listing VMware vms"
		$VMWARE_VIM_CMD vmsvc/getallvms | grep -v Vmid
		;;
	post_vm_list)
		vmware_server2_log "Posting vm list to the openQRM-server"
		VM_LIST_TMP=$resource_id.vm_list
        > $VM_LIST_TMP
        for VMID in `$VMWARE_VIM_CMD vmsvc/getallvms | grep -v Vmid | awk {' print $1 '}`; do
            VM_TMPFILE=`mktemp /tmp/oq-vm.XXXXXX` || exit 1
            $VMWARE_VIM_CMD vmsvc/get.summary $VMID > $VM_TMPFILE
            # name
            VM_NAME=`grep "name =" $VM_TMPFILE | cut -d '"' -f2`
            # state
            VM_STATE=`grep "powerState =" $VM_TMPFILE | cut -d '"' -f2`
            # mem
            VM_MEM=`grep "memorySizeMB =" $VM_TMPFILE | cut -d '=' -f2 | sed -e "s/,//g" | awk {' print $1 '}`
            # cpu
            VM_CPU=`grep "numCpu =" $VM_TMPFILE | cut -d '=' -f2 | sed -e "s/,//g" | awk {' print $1 '}`
            # nics
            VM_NET=`grep "numEthernetCards =" $VM_TMPFILE | cut -d '=' -f2 | sed -e "s/,//g" | awk {' print $1 '}`
            # disks
            VM_DISK=`grep "numVirtualDisks =" $VM_TMPFILE | cut -d '=' -f2 | sed -e "s/,//g" | awk {' print $1 '}`
            # mac
            VM_MAC=`grep "ethernet0.address =" $OPENQRM_VM_DIR/$VM_NAME/$VM_NAME.vmx | cut -d'"' -f2`
            echo "$VMID""@""$VM_NAME""@""$VM_MAC""@""$VM_STATE""@""$VM_MEM""@""$VM_CPU""@""$VM_NET""@""$VM_DISK" >> $VM_LIST_TMP
            rm -f $VM_TMPFILE
        done
#		$VMWARE_VIM_CMD vmsvc/getallvms | grep -v Vmid > $VM_LIST_TMP
#        sed -i -e "s/ \{1,\}/@/g" $VM_LIST_TMP
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$VMWARE_SERVER_OPENQRM_USERNAME --http-password=$VMWARE_SERVER_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $VM_LIST_TMP` $openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/vmware-server2/vmware-server2-action.php?vmware_server_command=get_vmware_server; then
			vmware_server2_log "ERROR: Could not post vm list to the openQRM-server at $OPENQRM_SERVER_IP!"
			vmware_server2_log "ERROR: Could not post vm list to the openQRM-server at $OPENQRM_SERVER_IP!" | logger
		fi
		rm -f $VM_LIST_TMP
		rm -f $VM_LIST_TMP.post
		;;
	setboot)
        unset VMWARE_SERVER_VM_NAME
		if [ "$VMWARE_SERVER_VM_MAC" == "" ]; then
			vmware-server2_usage
		fi
		if [ "$VMWARE_SERVER_VM_BOOT" == "" ]; then
			vmware-server2_usage
		fi
		vmware_server2_lock aquire
		vmware_server2_log "Setting vm with mac $VMWARE_SERVER_VM_MAC to boot from $VMWARE_SERVER_VM_BOOT"
        # this command is is running from the openQRM engine which does
        # not know about the vm-name
        for VMWARE_SERVER_VM_NET_CONF in `find $OPENQRM_VM_DIR -name *.vmx`; do
            if grep -i $VMWARE_SERVER_VM_MAC $VMWARE_SERVER_VM_NET_CONF; then
                VMWARE_SERVER_VM_NAME=`dirname $VMWARE_SERVER_VM_NET_CONF`
                VMWARE_SERVER_VM_NAME=`basename $VMWARE_SERVER_VM_NAME`
                vmware_server2_log "found $VMWARE_SERVER_VM_MAC"
                break
            fi
        done
        if [ "$VMWARE_SERVER_VM_NAME" == "" ]; then
    		vmware_server2_log "Cloud not find VMWARE_SERVER vm with mac $VMWARE_SERVER_VM_MAC on this host"
            vmware_server2_lock release
            exit 1
        fi
        case "$VMWARE_SERVER_VM_BOOT" in
            local)
        		vmware_server2_log "Setting VMware-Server 2 vm $VMWARE_SERVER_VM_NAME with mac $VMWARE_SERVER_VM_MAC to local-boot"
                ;;
            net)
        		vmware_server2_log "Setting VMware-Server 2 vm $VMWARE_SERVER_VM_NAME with mac $VMWARE_SERVER_VM_MAC to net-boot"
                ;;
        esac
		# hard restart it to apply its configuration
        # we do it here because the openQRM server engine does not
        # know anything about the vm name to restart it later
		vmware_server2_log "Rebooting VMware vm $VMWARE_SERVER_VM_NAME"
		VMID=`vmware_server2_get_vmid $VMWARE_SERVER_VM_NAME`
		$VMWARE_VIM_CMD vmsvc/power.off $VMID | logger
		$OPENQRM_VMWARE_SERVER_CMD_CHECK_DELAY
		$VMWARE_VIM_CMD vmsvc/power.on $VMID | logger
		$OPENQRM_VMWARE_SERVER_CMD_CHECK_DELAY
		vmware_server2_lock release
		;;

	post_vm_config)
		VM_CONFIG="$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/vmware-esx/web/vmware-esx-stat/$VMWARE_SERVER_HOST_IP.$VMWARE_SERVER_VM_NAME.vm_config"
		VM_CONFIG_TMP="$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/vmware-esx/web/vmware-esx-stat/$VMWARE_SERVER_HOST_IP.$VMWARE_SERVER_VM_NAME.vm_config.tmp"
		VM_CMD_OUT="$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/vmware-esx/web/vmware-esx-stat/$VMWARE_SERVER_HOST_IP.$VMWARE_SERVER_VM_NAME.vm_config.vmx"

        VMID=`vmware_server2_get_vmid $VMWARE_SERVER_VM_NAME`
        VMX_CONFIG=`vmware_server2_get_vmx $VMWARE_SERVER_VM_NAME`
		vmware_server2_log "Posting vm config for $VMWARE_SERVER_VM_NAME (vm-id $VMID)"
		VM_LIST_TMP=$resource_id.$VMWARE_SERVER_VM_NAME.vm_config
        > $VM_LIST_TMP
        # cpus
        VMWARE_VM_CPUS=`grep numvcpu $VMX_CONFIG | cut -d'=' -f2 | cut -d'"' -f2`
        VMWARE_VM_MAC=`grep "ethernet0.address =" $VMX_CONFIG | cut -d'=' -f2 | cut -d'"' -f2`
        VMWARE_VM_MAC2=`grep "ethernet1.address =" $VMX_CONFIG | cut -d'=' -f2 | cut -d'"' -f2`
        VMWARE_VM_MAC3=`grep "ethernet2.address =" $VMX_CONFIG | cut -d'=' -f2 | cut -d'"' -f2`
        VMWARE_VM_MAC4=`grep "ethernet3.address =" $VMX_CONFIG | cut -d'=' -f2 | cut -d'"' -f2`
        VMWARE_VM_MEM=`grep memsize $VMX_CONFIG | cut -d'=' -f2 | cut -d'"' -f2`
        VMWARE_VM_VNC_PORT=`grep RemoteDisplay.vnc.port $VMX_CONFIG | cut -d'=' -f2 | cut -d'"' -f2`
        VMWARE_VM_VNC_PASS=`grep RemoteDisplay.vnc.password $VMX_CONFIG | cut -d'=' -f2 | cut -d'"' -f2`

		echo "OPENQRM_VMWARE_VM_CPUS=\"$VMWARE_VM_CPUS\"" > $VM_LIST_TMP
		echo "OPENQRM_VMWARE_VM_RAM=\"$VMWARE_VM_MEM\"" >> $VM_LIST_TMP
		echo "OPENQRM_VMWARE_VM_MAC_1=\"$VMWARE_VM_MAC\"" >> $VM_LIST_TMP
		echo "OPENQRM_VMWARE_VM_MAC_2=\"$VMWARE_VM_MAC2\"" >> $VM_LIST_TMP
		echo "OPENQRM_VMWARE_VM_MAC_3=\"$VMWARE_VM_MAC3\"" >> $VM_LIST_TMP
		echo "OPENQRM_VMWARE_VM_MAC_4=\"$VMWARE_VM_MAC4\"" >> $VM_LIST_TMP
		echo "OPENQRM_VMWARE_VM_VNC=\"$VMWARE_VM_VNC_PORT\"" >> $VM_LIST_TMP
		echo "OPENQRM_VMWARE_VM_VNC_PASS=\"$VMWARE_VM_VNC_PASS\"" >> $VM_LIST_TMP
        # post the file
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$VMWARE_SERVER_OPENQRM_USERNAME --http-password=$VMWARE_SERVER_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $VM_LIST_TMP` $openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/vmware-server2/vmware-server2-action.php?vmware_server_command=get_vmware_server; then
			vmware_server2_log "ERROR: Could not post vm list to the openQRM-server at $OPENQRM_SERVER_IP!"
			vmware_server2_log "ERROR: Could not post vm list to the openQRM-server at $OPENQRM_SERVER_IP!" | logger
		fi
		rm -f $VM_LIST_TMP
		rm -f $VM_LIST_TMP.post
		;;

	update_vm_ram)
        VMID=`vmware_server2_get_vmid $VMWARE_SERVER_VM_NAME`
        VMX_CONFIG=`vmware_server2_get_vmx $VMWARE_SERVER_VM_NAME`
		vmware_server2_log "Updating RAM on vm $VMWARE_SERVER_VM_NAME (vm-id $VMID)"
        UPDATE_RAM_CMD="sed -i -e \"s/^memsize.*/memsize = \"\"$VMWARE_SERVER_VM_RAM\"\"/g\" $VMX_CONFIG"
        vmware_server2_log "Running : $UPDATE_RAM_CMD"
		vmware_server2_lock aquire
        "$UPDATE_RAM_CMD"
        $0 post_vm_config -i $VMWARE_SERVER_HOST_IP -n $VMWARE_SERVER_VM_NAME
		vmware_server2_lock release
		;;

	update_vm_cpus)
        VMID=`vmware_server2_get_vmid $VMWARE_SERVER_VM_NAME`
        VMX_CONFIG=`vmware_server2_get_vmx $VMWARE_SERVER_VM_NAME`
		vmware_server2_log "Updating CPUs on vm $VMWARE_SERVER_VM_NAME (vm-id $VMID)"
        UPDATE_CPU_CMD="sed -i -e \"s/^numvcpus.*/numvcpus = \"\"$VMWARE_SERVER_VM_CPU\"\"/g\" $VMX_CONFIG"
        vmware_server2_log "Running : $UPDATE_CPU_CMD"
		vmware_server2_lock aquire
        "$UPDATE_CPU_CMD"
        $0 post_vm_config -i $VMWARE_SERVER_HOST_IP -n $VMWARE_SERVER_VM_NAME
		vmware_server2_lock release
		;;

	add_vm_nic)
		if [ "$VMWARE_SERVER_VM_NAME" == "" ]; then
			vmware_esx_usage
		fi
		if [ "$VMWARE_SERVER_VM_MAC" == "" ]; then
			vmware_esx_usage
		fi
		if [ "$VMWARE_SERVER_VM_COMPONENT_NUMBER" == "" ]; then
			vmware_esx_usage
		fi
		vmware_server2_lock aquire
		vmware_server2_log "Adding nic $VMWARE_SERVER_VM_COMPONENT_NUMBER mac $VMWARE_SERVER_VM_MAC to VMWare Server2 vm $VMWARE_SERVER_VM_NAME"
		VM_VMX="$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/vmware-esx/web/vmware-esx-stat/$VMWARE_SERVER_HOST_IP.$VMWARE_SERVER_VM_NAME.vm_config.vmx"
        if [ ! -f $VM_VMX ]; then
            vmware_server2_log "No such config file $VM_VMX"
        else
            #VMID=`vmware_server2_get_vmid $VMWARE_SERVER_VM_NAME`
            # get remove config path
            VMX_CONFIG=`vmware_server2_get_vmx $VMWARE_SERVER_VM_NAME`
            # adjust local config
			cat >> $VM_VMX << EOF
Ethernet$VMWARE_SERVER_VM_COMPONENT_NUMBER.present = "TRUE"
ethernet$VMWARE_SERVER_VM_COMPONENT_NUMBER.address = "$VMWARE_SERVER_VM_MAC"
ethernet$VMWARE_SERVER_VM_COMPONENT_NUMBER.networkName = "$OPENQRM_VMWARE_SERVER_EXTERNAL_BRIDGE"
EOF
        fi
        $0 post_vm_config -i $VMWARE_SERVER_HOST_IP -n $VMWARE_SERVER_VM_NAME
		vmware_server2_lock release
		;;
	remove_vm_nic)
		if [ "$VMWARE_SERVER_VM_NAME" == "" ]; then
			vmware_esx_usage
		fi
		if [ "$VMWARE_SERVER_VM_COMPONENT_NUMBER" == "" ]; then
			vmware_esx_usage
		fi
		vmware_server2_lock aquire
		echo "Removing nic $VMWARE_SERVER_VM_COMPONENT_NUMBER from VMWare Server2 vm $VMWARE_SERVER_VM_NAME"
		VM_VMX="$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/vmware-esx/web/vmware-esx-stat/$VMWARE_SERVER_HOST_IP.$VMWARE_SERVER_VM_NAME.vm_config.vmx"
        if [ ! -f $VM_VMX ]; then
            vmware_server2_log "No such config file $VM_VMX"
        else
            #VMID=`vmware_server2_get_vmid $VMWARE_SERVER_VM_NAME`
            # get remove config path
            VMX_CONFIG=`vmware_server2_get_vmx $VMWARE_SERVER_VM_NAME`
            # adjust local config
            sed -i -e "s/Ethernet$VMWARE_SERVER_VM_COMPONENT_NUMBER.*//g" $VM_VMX
            sed -i -e "s/ethernet$VMWARE_SERVER_VM_COMPONENT_NUMBER.*//g" $VM_VMX
            sed -i '/^$/d' $VM_VMX
        fi


        $0 post_vm_config -i $VMWARE_SERVER_HOST_IP -n $VMWARE_SERVER_VM_NAME
		vmware_server2_lock release
		;;

	update_vm_vnc)
		if [ "$VMWARE_SERVER_VM_NAME" == "" ]; then
			vmware_esx_usage
		fi
		if [ "$VMWARE_SERVER_VM_VNC_AUTH" == "" ]; then
			vmware_esx_usage
		fi
		if [ "$VMWARE_SERVER_VM_VNC_PORT" == "" ]; then
			vmware_esx_usage
		fi
		vmware_server2_lock aquire
		echo "Setting VNC parameter for VMWare Server2 vm $VMWARE_SERVER_VM_NAME"
		VM_VMX="$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/vmware-esx/web/vmware-esx-stat/$VMWARE_SERVER_HOST_IP.$VMWARE_SERVER_VM_NAME.vm_config.vmx"
        if [ ! -f $VM_VMX ]; then
            vmware_server2_log "No such config file $VM_VMX"
        else
            #VMID=`vmware_server2_get_vmid $VMWARE_SERVER_VM_NAME`
            # get remove config path
            VMX_CONFIG=`vmware_server2_get_vmx $VMWARE_SERVER_VM_NAME`
            # adjust local config
            sed -i -e "s/RemoteDisplay.vnc.*//g" $VM_VMX
			cat >> $VM_VMX << EOF
RemoteDisplay.vnc.enabled = TRUE
RemoteDisplay.vnc.port = "$VMWARE_SERVER_VM_VNC_PORT"
RemoteDisplay.vnc.password = "$VMWARE_SERVER_VM_VNC_AUTH"
EOF
            sed -i '/^$/d' $VM_VMX
        fi


        $0 post_vm_config -i $VMWARE_SERVER_HOST_IP -n $VMWARE_SERVER_VM_NAME
		vmware_server2_lock release
		;;

	remove_vm_vnc)
		if [ "$VMWARE_SERVER_VM_NAME" == "" ]; then
			vmware_esx_usage
		fi
		vmware_server2_lock aquire
		echo "Removing VNC config for VMWare Server2 vm $VMWARE_SERVER_VM_NAME"
		VM_VMX="$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/vmware-esx/web/vmware-esx-stat/$VMWARE_SERVER_HOST_IP.$VMWARE_SERVER_VM_NAME.vm_config.vmx"
        if [ ! -f $VM_VMX ]; then
            vmware_server2_log "No such config file $VM_VMX"
        else
            #VMID=`vmware_server2_get_vmid $VMWARE_SERVER_VM_NAME`
            # get remove config path
            VMX_CONFIG=`vmware_server2_get_vmx $VMWARE_SERVER_VM_NAME`
            # adjust local config
            sed -i -e "s/RemoteDisplay.vnc.*//g" $VM_VMX
            sed -i '/^$/d' $VM_VMX
        fi


        $0 post_vm_config -i $VMWARE_SERVER_HOST_IP -n $VMWARE_SERVER_VM_NAME
		vmware_server2_lock release
		;;











	*)
		vmware-server2_usage
		;;


esac

