#!/bin/bash
# this is the functions file for the linux-vserver-plugin

if [ -f /var/openqrm/openqrm-resource.conf ]; then
	. /var/openqrm/openqrm-resource.conf
fi
VETH="$resource_basedir/openqrm/plugins/linux-vserver/bin/vethd"
LINUX_VSERVER_VDEVICE_NAME="lvif"
# using the linux-vserver-tools domain location
OPENQRM_VM_DIR=/var/lib/vservers/
OPENQRM_VM_CONFIG_DIR=/etc/vservers/
OPENQRM_VIF_CONFIG="$OPENQRM_VM_CONFIG_DIR/openqrm-vif.conf"

################ common linux-vserver functions

# logs for linux-vserver
function linux_vserver_log() {
	local COMPONENT=$1
	shift
	local MESSAGE=$@
	logger -i -t "linux-vserver plug-in" "$COMPONENT : $MESSAGE"
}


# locking function
function linux_vserver_lock() {
	local COMMAND=$1
	local RET=1
	
	if [ ! -d `dirname $LVM_MGMT_LOCK_FILE` ]; then
		mkdir -p `dirname $LVM_MGMT_LOCK_FILE`
	fi
	case "$COMMAND" in
		aquire)
				lockfile -s $LVM_MGMT_LOCK_DELAY -r $LVM_MGMT_LOCK_RETRY -l $LVM_MGMT_LOCK_TIMEOUT $LVM_MGMT_LOCK_FILE
				RET=$?
				linux_vserver_log linux_vserver_lock "Aquired the lock"
				return $RET
				;;
		release)
				/bin/rm -f $LVM_MGMT_LOCK_FILE
				RET=$?
				linux_vserver_log linux_vserver_lock "Released the lock"
				return $RET
				;;
		*)
			linux_vserver_log linux_vserver_lock "No such command. Try 'aquire' or 'release'"
			return 1
			;;	
	esac
}



################ linux-vserver functions


# trick the dhcpd server
function linux_vserver_get_next_ip() {
	local PARTITION_MAC=$1
	local RET=0
	# create the virtual interface to trick the dhcpd
	OPENQRM_INTERFACE=`ifconfig | grep eth | grep ":oq" | cut -d':' -f 1`
	if ! $VETH -v $LINUX_VSERVER_VDEVICE_NAME -e $OPENQRM_INTERFACE -m $PARTITION_MAC; then
		linux_vserver_log get_next_ip "ERROR Could not start virtual interface $LINUX_VSERVER_VDEVICE_NAME !"
		return 1
	fi
	# now we request a new ip from the dhcpd on the bridge
	if dhclient $LINUX_VSERVER_VDEVICE_NAME; then
		PARTITION_IP=`ifconfig $LINUX_VSERVER_VDEVICE_NAME | grep "inet " | awk {' print $2 '} | cut -d':' -f 2`
		PARTITION_BROADCAST=`ifconfig $LINUX_VSERVER_VDEVICE_NAME | grep "inet " | awk {' print $3 '} | cut -d':' -f 2`
		PARTITION_SUBNET=`ifconfig $LINUX_VSERVER_VDEVICE_NAME | grep "inet " | awk {' print $4 '} | cut -d':' -f 2`
		RET=0
	else
		linux_vserver_log get_next_ip "ERROR Failed to get a new ip-address on $LINUX_VSERVER_VDEVICE_NAME !"
		RET=1
	fi
	# clean up
	ifconfig $LINUX_VSERVER_VDEVICE_NAME down
	DHCLIENT_PID=`ps ax | grep "dhclient $LINUX_VSERVER_VDEVICE_NAME" | grep -v grep | awk {' print $1 '}`
	kill $DHCLIENT_PID
	kill -9 $DHCLIENT_PID 1>/dev/null 2>&1
	sleep 1
	# stop the virtual interface
	kill `ps ax | grep $LINUX_VSERVER_VDEVICE_NAME | grep vethd | grep -v grep | awk {' print $1 '}`
	export PARTITION_IP PARTITION_BROADCAST PARTITION_SUBNET
	return $RET
}


function linux_vserver_manage_vif() {
	local CMD=$1
	local LINUX_VSERVER_VM_NAME=$2
	local VDEVICE_NAME=`cat $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/interfaces/0/dev`
	local PARTITION_MAC=`cat $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/interfaces/0/mac`

	case "$CMD" in
		start)
			OPENQRM_INTERFACE=`ifconfig | grep eth | grep ":oq" | cut -d':' -f 1`
			# name the vif as the mac address
			if ! $VETH -v $VDEVICE_NAME -e $OPENQRM_INTERFACE -m $PARTITION_MAC; then
				linux_vserver_log linux_vserver_manage_vif "ERROR Could not start virtual interface $VDEVICE_NAME !"
				return 1
			fi
			;;
		stop)
			VDEVICE_NAME_PID=`ps ax | grep $VETH | grep -w $VDEVICE_NAME | grep -v grep | awk {' print $1 '}`
			kill $VDEVICE_NAME_PID
			kill -9 $VDEVICE_NAME_PID 1>/dev/null 2>&1
			;;
		*)
			return 1
	esac


}


# to bind the sshd to a specific ip address
function bind_sshd() {
	FS_ROOT=$1
	SSHD_IP=$2
	SSHD_CONFIG=$FS_ROOT/etc/ssh/sshd_config
	if grep ^ListenAddress $SSHD_CONFIG 1>/dev/null 2>&1; then
		sed -i -e "s/^ListenAddress.*/ListenAddress $SSHD_IP/g" $SSHD_CONFIG
	else
		echo "# configured by openQRM" >> $SSHD_CONFIG
		echo "ListenAddress $SSHD_IP" >> $SSHD_CONFIG
	fi
}





