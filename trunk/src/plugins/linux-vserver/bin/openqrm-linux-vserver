#!/bin/bash
# this script automatically manages linux-vserver
#
# This file is part of openQRM.
#
# openQRM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# openQRM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with openQRM.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2009, Matthias Rechenburg <matt@openqrm.com>
#
OPENQRM_SERVER_BASE_DIR=$(dirname $0)/../../../..
OPENQRM_SERVER_BASE_DIR=$(pushd $OPENQRM_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/linux-vserver/include/openqrm-plugin-linux-vserver-functions
if [ -f $OPENQRM_RESOURCE_PARAMETER_FILE ]; then
	. $OPENQRM_RESOURCE_PARAMETER_FILE
	OPENQRM_SERVER_IP=$resource_openqrmserver
	SYSTEM_IP=$resource_ip
elif [ -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf ]; then
	. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
	. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions
	openqrm_server_get_config
	OPENQRM_SERVER_IP=$OPENQRM_SERVER_IP_ADDRESS
	SYSTEM_IP=$OPENQRM_SERVER_IP_ADDRESS
	resource_id=0
	resource_openqrmserver=$OPENQRM_SERVER_IP_ADDRESS
fi
OPENQRM_POSTENCODE="$OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-postencode.py"
OPENQRM_LINUX_VSERVER_IDLE_TEMPLATE="$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/linux-vserver/etc/templates/openqrm-initrd-default.tgz"
export LANG=C

# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	echo "ERROR: Please run this script as root!"
	exit 6
fi

function linux_vserver_usage() {
	echo "Usage : $0 start/stop/reboot/delete/list <-n vm-name>"
	echo "Usage : $0 create <-n vm-name> <-m mac-address> <-i ip-address>"
	echo "        $0 post_vm_list <-u username> <-p password>"
	exit 1
}


function linux_vserver_restart_exec() {
	if [ -f $OPENQRM_RESOURCE_PARAMETER_FILE ]; then
		. $OPENQRM_RESOURCE_PARAMETER_FILE
		OPENQRM_SYSTEM_IP=$resource_ip
		OPENQRM_EXEC_PORT=$resource_execdport
	elif [ -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf ]; then
		. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions
		openqrm_server_get_config
		OPENQRM_SYSTEM_IP=$OPENQRM_SERVER_IP_ADDRESS
	fi
	killall openqrm-exec-port-monitor 1>/dev/null 2>&1
	killall openqrm-execd 1>/dev/null 2>&1
	$OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-exec-port-monitor $OPENQRM_SYSTEM_IP $OPENQRM_EXEC_PORT | $OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-execd &
}


LINUX_VSERVER_COMMAND=$1
shift

while [ $# -ne 0 ]; do
	case "$1" in
		-n)
			LINUX_VSERVER_VM_NAME=$2
			shift
			;;
		-m)
			LINUX_VSERVER_VM_MAC=$2
			shift
			;;
		-i)
			LINUX_VSERVER_VM_IP=$2
			shift
			;;
		-u)
			LINUX_VSERVER_OPENQRM_USERNAME=$2
			shift
			;;
		-p)
			LINUX_VSERVER_OPENQRM_PASSWORD=$2
			shift
			;;
		*)
			echo "ERROR: Free commandline arguments are not allowed"
			linux_vserver_usage
			exit 6
			;;
	esac
	shift
done




# main
if [ "$LINUX_VSERVER_COMMAND" == "" ]; then
	linux_vserver_usage
fi

if [ "$LINUX_VSERVER_COMMAND" == "post_vm_list" ]; then
		if [ "$LINUX_VSERVER_OPENQRM_USERNAME" == "" ]; then
			linux_vserver_usage
		fi
		if [ "$LINUX_VSERVER_OPENQRM_PASSWORD" == "" ]; then
			linux_vserver_usage
		fi
else

	if [ "$LINUX_VSERVER_COMMAND" != "list" ]; then
		if [ "$LINUX_VSERVER_VM_NAME" == "" ]; then
			linux_vserver_usage
		fi
	fi
fi


case "$LINUX_VSERVER_COMMAND" in 

	create)
		if [ "$LINUX_VSERVER_VM_MAC" == "" ]; then
			linux_vserver_usage
		fi
		if [ "$LINUX_VSERVER_VM_IP" == "" ]; then
			linux_vserver_usage
		fi
		CURRENT_DIR=`pwd`
		linux_vserver_lock aquire
		echo "Creating Linux-VServer vm $LINUX_VSERVER_VM_NAME -> /etc/vservers/$LINUX_VSERVER_VM_NAME"
		# gathering some infos
		if [ "$LINUX_VSERVER_VM_IP" == "dhcp" ]; then
			echo "-> gathering an ip-address for $LINUX_VSERVER_VM_MAC ..."
			if ! linux_vserver_get_next_ip $LINUX_VSERVER_VM_MAC; then
				linux_vserver_lock release
				exit 1			
			fi
			export LINUX_VSERVER_VM_IP=$PARTITION_IP
			export OPENQRM_LINUX_VSERVER_SUBNET_MASK=$PARTITION_SUBNET
		else
			export OPENQRM_LINUX_VSERVER_SUBNET_MASK=`ifconfig | grep $SYSTEM_IP | cut -d':' -f3 | awk {' print $1 '}`
		fi
		export OPENQRM_LINUX_VSERVER_DEFAULT_GATEWAY=`route -n | grep ^0.0.0.0 | head -n1 | awk {' print $2 '}`
		export OPENQRM_RESOURCE_ID=-1
		export OPENQRM_KERNEL_VERSION=`uname -r`

		# find the next free interface name
		if [ -f $OPENQRM_VIF_CONFIG ]; then
			# ask config file
			LAST_NETWORK_INTERFACE=`cat $OPENQRM_VIF_CONFIG | sort | tail -n1 |  awk {' print $1 '} | sed -e "s/eth//g"`
		else
			# ask ifconfig
			LAST_NETWORK_INTERFACE=`ifconfig -a | grep ^eth | grep -v :oq | awk {' print $1 '} | sort | tail -n1 | sed -e "s/eth//g"`
		fi
		FIRST_FREE_NETWORK_INTERFACE=$(( LAST_NETWORK_INTERFACE + 1 ))
		LINUX_VSERVER_VM_INTERFACE="eth$FIRST_FREE_NETWORK_INTERFACE"

		# creating the config dirs
		mkdir -p $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME
		mkdir -p $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/apps
		mkdir -p $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/apps/pkgmgmt
		mkdir -p $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/apps/init
		mkdir -p $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/uts
		mkdir -p $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/interfaces
		mkdir -p $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/interfaces/0
		mkdir -p $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/cpuset
		# creating the config files
		touch $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/apps/pkgmgmt/internal
		echo "$LINUX_VSERVER_VM_NAME" > $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/name
		echo "$LINUX_VSERVER_VM_NAME" > $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/uts/nodename
		if [ "$OPENQRM_LINUX_VSERVER_SUBNET_MASK" == "255.255.255.0" ]; then
			echo "24" > $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/interfaces/0/prefix
		elif [ "$OPENQRM_LINUX_VSERVER_SUBNET_MASK" == "255.255.0.0" ]; then
			echo "16" > $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/interfaces/0/prefix
		elif [ "$OPENQRM_LINUX_VSERVER_SUBNET_MASK" == "255.0.0.0" ]; then
			echo "8" > $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/interfaces/0/prefix
		else
			echo "8" > $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/interfaces/0/prefix
		fi		
		echo "$LINUX_VSERVER_VM_INTERFACE" > $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/interfaces/0/dev
		echo "$LINUX_VSERVER_VM_IP" > $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/interfaces/0/ip
		echo "$LINUX_VSERVER_VM_MAC" > $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/interfaces/0/mac
		cat >> $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/fstab << EOF
none    /proc           proc    defaults                0 0
none    /tmp            tmpfs   size=16m,mode=1777      0 0
none    /dev/pts        devpts  gid=5,mode=620          0 0
EOF

		# creating the config links
		cd $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/
		ln -s /var/run/vservers/$LINUX_VSERVER_VM_NAME run
		ln -s $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME vdir

		# create the vm fs from the initrd-template
		mkdir -p $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME
		cd $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME
		tar -xzf $OPENQRM_LINUX_VSERVER_IDLE_TEMPLATE
		mkdir -p $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/tmp
		mkdir -p $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/dev/pts
		# creating the devices
		if ! $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/bin/busybox makedevs -d $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/etc/initrd-devices.conf $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/; then
			# copy from hosts /dev
			cp -aR /dev/* $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/dev/
		fi

		# adapt rc
		rm -f $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/etc/rc.d/rc
		cat >> $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/etc/rc.d/rc << EOF
#!/bin/bash
INIT=\$1
if [ "\$INIT" == "6" ]; then
        $OPENQRM_SERVER_BASE_DIR/openqrm/etc/init.d/openqrm-client stop
        killall bash
        killall rc
fi
nohup /etc/init.d/rcS 
while (true); do sleep 10; done &
EOF
		chmod +x $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/etc/rc.d/rc

		# adapt rcS
		rm -f $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/etc/rc.d/init.d/rcS
		cat >> $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/etc/rc.d/init.d/rcS << EOF
#!/bin/bash
export SHELL=/bin/bash
export \$(eval cat /proc/cmdline)
echo "openQRM resource \$id is starting rcS" > /dev/console
$OPENQRM_SERVER_BASE_DIR/openqrm/etc/init.d/openqrm-client start
/bin/bash
EOF
		chmod +x $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/etc/rc.d/init.d/rcS
		cd $CURRENT_DIR
		# copy the openQRM dir
		mkdir $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/$OPENQRM_SERVER_BASE_DIR/
		cp -aR $OPENQRM_SERVER_BASE_DIR/openqrm $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/$OPENQRM_SERVER_BASE_DIR/

		# send new resource to openQRM to get resource-config
		mkdir -p `dirname $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/$OPENQRM_RESOURCE_PARAMETER_FILE`
		wget -q -O $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/$OPENQRM_RESOURCE_PARAMETER_FILE "http://$OPENQRM_SERVER_IP/openqrm/action/resource-monitor.php?resource_command=get_parameter&resource_id=$OPENQRM_RESOURCE_ID&resource_mac=$LINUX_VSERVER_VM_MAC&resource_ip=$LINUX_VSERVER_VM_IP"

		# add to a main vif config file, start all at init
		echo "$LINUX_VSERVER_VM_INTERFACE $LINUX_VSERVER_VM_NAME" >> $OPENQRM_VIF_CONFIG
		# bring up vethd interface
		if ! linux_vserver_manage_vif start $LINUX_VSERVER_VM_NAME; then
			linux_vserver_lock release
			exit 1
		fi
		# start as idle
		nohup vserver $LINUX_VSERVER_VM_NAME start &
		# restart openqrm-exec
		linux_vserver_restart_exec
		linux_vserver_lock release
		;;
	start)
		linux_vserver_lock aquire
		echo "Starting Linux-VServer vm $LINUX_VSERVER_VM_NAME"
		# source current parameters of the vm
		. $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/$OPENQRM_RESOURCE_PARAMETER_FILE
		# update parameters for the resource
		wget -q -O $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/$OPENQRM_RESOURCE_PARAMETER_FILE "http://$OPENQRM_SERVER_IP/openqrm/action/resource-monitor.php?resource_command=get_parameter&resource_id=$resource_id&resource_mac=$resource_mac&resource_ip=$resource_ip"
		. $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/$OPENQRM_RESOURCE_PARAMETER_FILE
		# check if assigned to an appliance or idle 
		if [ "$image_type" != "ram" ]; then
			eval $image_deployment_parameter
			# get the root-mount functions according the deployment type
			wget -q -O $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/root-mount.$image_type "http://$OPENQRM_SERVER_IP/openqrm/boot-service/root-mount.$image_type"
			# adapt root-mount functions of the deployment method
			sed -i -e "s#/mnt2#XXXXX#g" $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/root-mount.$image_type
			sed -i -e "s#/mnt#$OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME#g" $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/root-mount.$image_type
			sed -i -e "s#XXXXX#/mnt2#g" $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/root-mount.$image_type
			sed -i -e "s#/var/openqrm/openqrm-resource.conf#$OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/$OPENQRM_RESOURCE_PARAMETER_FILE#g" $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/root-mount.$image_type
			# mount the fs-image
			. $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/root-mount.$image_type
			mount_rootfs

			# copy the resource-config to the fs-image
			mkdir -p /$OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/`dirname $OPENQRM_RESOURCE_PARAMETER_FILE`
			cp -f $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/$OPENQRM_RESOURCE_PARAMETER_FILE /$OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/`dirname $OPENQRM_RESOURCE_PARAMETER_FILE`
			# add openqrm-client
			mkdir $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/$OPENQRM_SERVER_BASE_DIR/
			cp -aR $OPENQRM_SERVER_BASE_DIR/openqrm $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/$OPENQRM_SERVER_BASE_DIR/
			# adapt sshd-config
			if [ ! -f $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/etc/ssh/sshd_config.lv_openqrm ]; then
				cp -f $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/etc/ssh/sshd_config /etc/ssh/sshd_config.lv_openqrm
			fi
			bind_sshd $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME $resource_ip
		fi
		nohup vserver $LINUX_VSERVER_VM_NAME start &
		# restart openqrm-exec
		linux_vserver_restart_exec
		linux_vserver_lock release
		;;
	stop)
		linux_vserver_lock aquire
		echo "Stopping Linux-VServer vm $LINUX_VSERVER_VM_NAME"
		# source current parameters of the vm
		. $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME/$OPENQRM_RESOURCE_PARAMETER_FILE
		# check if assigned to an appliance or idle 
		if [ "$image_type" != "ram" ]; then
			# restore sshd-conf
			cp -f /etc/ssh/sshd_config.lv_openqrm /etc/ssh/sshd_config
		fi
		# stop vm
		vserver $LINUX_VSERVER_VM_NAME stop
		if [ "$image_type" != "ram" ]; then
			# umount
			umount $OPENQRM_VM_DIR/$LINUX_VSERVER_VM_NAME
		fi
		linux_vserver_lock release
		;;
	reboot)
		linux_vserver_lock aquire
		echo "Rebooting Linux-VServer vm $LINUX_VSERVER_VM_NAME"
		nohup vserver $LINUX_VSERVER_VM_NAME restart &
		linux_vserver_restart_exec
		linux_vserver_lock release
		;;
	delete)
		linux_vserver_lock aquire
		echo "Removing Linux-VServer vm $LINUX_VSERVER_VM_NAME"
		LINUX_VSERVER_VM_INTERFACE=`cat $OPENQRM_VM_CONFIG_DIR/$LINUX_VSERVER_VM_NAME/interfaces/0/dev`
		vserver $LINUX_VSERVER_VM_NAME stop
		# get vif interface name
		# remove physically
		echo 'y' | vserver $LINUX_VSERVER_VM_NAME delete
		# bring down vethd interface
		if ! linux_vserver_manage_vif stop $LINUX_VSERVER_VM_NAME; then
			exit 1			
			linux_vserver_lock release
		fi
		sed -i -e "s/$LINUX_VSERVER_VM_INTERFACE.*//g" $OPENQRM_VIF_CONFIG
		linux_vserver_lock release
		;;
	list)
		echo "Listing Linux-VServer vms"
		vserver-stat
		;;
	post_vm_list)
		linux_vserver_lock aquire
		echo "Posting vm list to the openQRM-server"
		VM_LIST_TMP=$resource_id.vm_list
		vserver-stat > $VM_LIST_TMP
		# add #'s at the beginning to make later parsing easier
		cat $VM_LIST_TMP | sed -e "s/^/#/g" > $VM_LIST_TMP.up
		mv -f $VM_LIST_TMP.up $VM_LIST_TMP
		ls /etc/vservers/ | grep -v newvserver-vars | grep -v openqrm-vif.conf >> $VM_LIST_TMP
		if ! wget -q -O /dev/null --http-user=$LINUX_VSERVER_OPENQRM_USERNAME --http-password=$LINUX_VSERVER_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $VM_LIST_TMP` http://$OPENQRM_SERVER_IP/openqrm/base/plugins/linux-vserver/linux-vserver-action.php?linux_vserver_command=get_linux_vserver; then
			echo "ERROR: Could not post vm list to the openQRM-server at $OPENQRM_SERVER_IP!"
			echo "ERROR: Could not post vm list to the openQRM-server at $OPENQRM_SERVER_IP!" | logger
		fi
		rm -f $VM_LIST_TMP
		rm -f $VM_LIST_TMP.post
		linux_vserver_lock release
		;;
	*)
		linux_vserver_usage
		;;


esac

