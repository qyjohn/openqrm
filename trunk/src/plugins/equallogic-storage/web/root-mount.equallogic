#!/bin/bash
# this is the root-mount initrd-service
# which proivdes function to mount/remount the remote
# iscsi-rootfs according to the image_deployment_parameters at /mnt
#
# This file is part of openQRM.
#
# openQRM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# openQRM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with openQRM.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2009, Matthias Rechenburg <matt@openqrm.com>
#

# equallogic-storage
# Required defines in the image_deploy_paramters
#
#
# Optional parameters 
#
# IMAGE_INSTALL_FROM_NFS			- can be set to an (nfs) location from
#									  which the image will be installed at
#									  deployment time
#									  syntax is : storage_id:ip_of_nfs-server:path_to_target_image
#
# IMAGE_TRANSFER_TO_NFS				- can be set to an (nfs) location from
#									  which the image will be transfered to at
#									  deployment time
#									  syntax is : storage_id:ip_of_nfs-server:path_to_target_image
#
# IMAGE_INSTALL_FROM_LOCAL			- set to a local harddisk device (e.g. /dev/hda1) this
#									  option will install the equallogic-storage image on 
#									  boot-time from the local-device
#
# IMAGE_TRANSFER_TO_LOCAL			- set to a local harddisk device (e.g. /dev/hda1) this option will transfrom
#									  the equallogic-storage image on boot-time to the local-device
#
#
#
# IMAGE_INSTALL_FROM_LOCAL_FS_TYPE	- set to a local harddisk device fs-type (e.g. ext3)
#
# IMAGE_TRANSFER_TO_LOCAL_FS_TYPE	- set to a local harddisk device fs-type (e.g. ext3)
#
# IMAGE_NFS_MOUNT_OPTIONS			- can be e.g. set to proto=tcp for the install/transform phase
#

# get the deployment parameters from openqrm.conf
OPENQRM_RESOURCE_PARAMETER_FILE="/var/openqrm/openqrm-resource.conf"
. $OPENQRM_RESOURCE_PARAMETER_FILE
eval $image_deployment_parameter
export OPENQRM_SERVER_BASE_DIR=$resource_basedir
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions

# nfs-options for the install+transform phase
if [ "$IMAGE_NFS_MOUNT_OPTIONS" != "" ]; then
	IMAGE_NFS_MOUNT_OPTIONS=",$IMAGE_NFS_MOUNT_OPTIONS"
fi
# default to ext3
if [ "$IMAGE_INSTALL_FROM_LOCAL_FS_TYPE" == "" ]; then
	IMAGE_INSTALL_FROM_LOCAL_FS_TYPE="ext3"
fi
if [ "$IMAGE_TRANSFER_TO_LOCAL_FS_TYPE" == "" ]; then
	IMAGE_TRANSFER_TO_LOCAL_FS_TYPE="ext3"
fi

# here we gather the target name + lun from the image_rootdevice
IMAGE_TARGET=`echo $image_rootdevice | cut -d'/' -f3`
IMAGE_LUN=`echo $image_rootdevice | cut -d'/' -f4`

# define wget to use with https
if [ "$openqrm_web_protocol" == "https" ]; then
    export WGET="wget --no-check-certificate -q"
else
    export WGET="wget -q"
fi
#######################################################################
# required functions ##################################################
#######################################################################

function mount_rootfs() {

    # setup the bonded network here
    OPENQRM_RESOURCE_OTHER_INTERFACES=`ifconfig -a | grep -i hwaddr | grep -v $OPENQRM_RESOURCE_MAC_ADDRESS | awk {' print $1 '}`
    # set up extra nics in case they are needed for root_fs
    # note that we just assume dhcp runs on these networks
    for interface in $OPENQRM_RESOURCE_OTHER_INTERFACES; do
        ifconfig $interface up
        udhcpc -i $interface -q
    done

    # check to find the right binaries fitting to kernel + rootfs
    if [ "$kernel_name" == "default" ]; then
        # we get the default binaries
        # get iscsid via wget from the openQRM-servers boot-service dir
        $WGET -O /sbin/iscsid $openqrm_web_protocol://$resource_openqrmserver/openqrm/boot-service/iscsid
        $WGET -O /sbin/iscsiadm $openqrm_web_protocol://$resource_openqrmserver/openqrm/boot-service/iscsiadm
    else
        # we try to get the binaries fitting to the kernel name
        # -> if a special version is not available we go with the default
        if ! $WGET -O /sbin/iscsid $openqrm_web_protocol://$resource_openqrmserver/openqrm/boot-service/iscsid.$kernel_name; then
            $WGET -O /sbin/iscsid $openqrm_web_protocol://$resource_openqrmserver/openqrm/boot-service/iscsid
        fi
        if ! $WGET -O /sbin/iscsiadm $openqrm_web_protocol://$resource_openqrmserver/openqrm/boot-service/iscsiadm.$kernel_name; then
            $WGET -O /sbin/iscsiadm $openqrm_web_protocol://$resource_openqrmserver/openqrm/boot-service/iscsiadm
        fi

    fi
    chmod +x /sbin/iscsi*

    # get the resize components
    $WGET -O /eq-resize.$kernel_name.tgz /sbin/iscsiadm $openqrm_web_protocol://$resource_openqrmserver/openqrm/boot-service/eq-resize.$kernel_name.tgz
    cd /
    tar -xzf eq-resize.$kernel_name.tgz
    rm -f eq-resize.$kernel_name.tgz
	mkdir -p /tmp

	# load iscsi related modules
	modprobe iscsi_tcp
	modprobe libiscsi
	modprobe scsi_transport_iscsi
	modprobe scsi_mod
	modprobe sg
	modprobe sd_mod
	modprobe ib_iser

	# create config /etc/iscsi/iscsid.conf
	mkdir -p /etc/iscsi/
	cat >> /etc/iscsi/iscsid.conf << EOF
node.startup = manual
node.session.timeo.replacement_timeout = 120
node.conn[0].timeo.login_timeout = 15
node.conn[0].timeo.logout_timeout = 15
node.conn[0].timeo.noop_out_interval = 5
node.conn[0].timeo.noop_out_timeout = 30
node.session.iscsi.InitialR2T = No
node.session.iscsi.ImmediateData = Yes
node.session.iscsi.FirstBurstLength = 262144
node.session.iscsi.MaxBurstLength = 16776192
node.conn[0].iscsi.MaxRecvDataSegmentLength = 262144
node.conn[0].iscsi.MaxXmitDataSegmentLength = 262144
node.session.cmds_max = 1024
node.session.queue_depth = 128
node.session.err_timeo.abort_timeout = 15
node.session.err_timeo.lu_reset_timeout = 20
node.session.iscsi.FastAbort = No

discovery.sendtargets.auth.authmethod = CHAP
discovery.sendtargets.auth.username = $image_name
discovery.sendtargets.auth.password = $IMAGE_ISCSI_AUTH
discovery.sendtargets.iscsi.MaxRecvDataSegmentLength = 65536

node.session.auth.authmethod = CHAP
node.session.auth.username = $image_name
node.session.auth.password = $IMAGE_ISCSI_AUTH

EOF

	# create /etc/iscsi/initiatorname.iscsi
	cat >> /etc/iscsi/initiatorname.iscsi << EOF
InitiatorName=iqn.2009-07.openqrm.$image_name
EOF
	# also create /etc/initiatorname.iscsi, some open-iscsi version looking for that
	cp /etc/iscsi/initiatorname.iscsi /etc/initiatorname.iscsi

	# start syslog + klogd
	syslogd &
	klogd&

	# start iscsid
	/sbin/iscsid &
	sleep 2

	# 

	# discover
	echo "equallogic-storage: Discoverying Iscsi-target $image_storage_server_ip:3260"
	iscsiadm -m discovery -t sendtargets -p $image_storage_server_ip:3260

    # get targetname
	IMAGE_TARGET=`iscsiadm -m discovery -t sendtargets -p $image_storage_server_ip:3260 | grep $IMAGE_LUN | awk {' print $2 '}`
    if [ "$IMAGE_TARGET" == "" ]; then
		echo "ERROR: Could not find the iscsi-target name in discovery results"
		# give a shell for the admin
		/bin/bash
    else
        echo "NOTICE: Found target $IMAGE_TARGET"
    fi

	# login
	iscsiadm -m node -T $IMAGE_TARGET -p $image_storage_server_ip:3260 --login

	# let udev settle
	sleep 4

    # check that udev found the new device
    FIND_ISCSI_BLOCK_DEVICE=`find /sys/class/iscsi_session/session*/device/target*/*/ -name block | head -n1`
    if [ "$FIND_ISCSI_BLOCK_DEVICE" == "" ]; then
        FIND_ISCSI_BLOCK_DEVICE=`find /sys/class/iscsi_session/session*/device/target*/*/ -name block:s* | head -n1`
        if [ "$FIND_ISCSI_BLOCK_DEVICE" == "" ]; then
            echo "ERROR: Udev did not detect the new device"
            echo "ERROR: Could not look-up the Iscsi device in the sys-fs dir"
            # give a shell for the admin
            /bin/bash
        fi
    fi
    # check for different sysfs styles
    if [ -h $FIND_ISCSI_BLOCK_DEVICE ]; then
        ISCSI_BLOCK_DEVICE_NAME=`readlink $FIND_ISCSI_BLOCK_DEVICE`
        ISCSI_BLOCK_DEVICE_NAME=`basename $ISCSI_BLOCK_DEVICE_NAME`
        echo "SUCCESS: Found $ISCSI_BLOCK_DEVICE_NAME in sys-fs (as symlink)"
    elif [ -d $FIND_ISCSI_BLOCK_DEVICE ]; then
        ISCSI_BLOCK_DEVICE_NAME=`ls $FIND_ISCSI_BLOCK_DEVICE`
        echo "SUCCESS: Found $ISCSI_BLOCK_DEVICE_NAME in sys-fs (as dir)"
    else
        echo "ERROR: Udev did not detect the new device"
        echo "ERROR: Could not look-up the Iscsi device in the sys-fs dir"
        # give a shell for the admin
        /bin/bash
    fi
    # export the blockdevice name for the further functions
    export ISCSI_BLOCK_DEVICE="/dev/$ISCSI_BLOCK_DEVICE_NAME"

      # If CREATE_FS=TRUE, this is the first time we access the Equallogic LUN so we force filesystem creation.
      if [ "$CREATE_FS" == "TRUE" ]; then

              # forcibly create filesystem
              echo "NOTICE: CREATE_FS parameter found, forcibly creating $image_rootfstype filesystem on $ISCSI_BLOCK_DEVICE"
              mke2fs -F -j $ISCSI_BLOCK_DEVICE

              # Remove the CREATE_FS deployment parameter
              if ! $WGET -O /dev/null "$openqrm_web_protocol://${resource_openqrmserver}/openqrm/boot-service/root-mount.equallogic.action.php?equallogic_root_mount_command=create_fs_finished&equallogic_root_mount_image_id=$image_id"; then
 	               echo "ERROR: Could not post create_fs_finished for image $image_id to the openQRM-server at ${resource_openqrmserver}!"
              else
      	         echo "Posted create_fs_finished for image $image_id to the openQRM-server at $resource_openqrmserver!"
          		fi
      else
              # Check if we need to resize the FS
              if [ "$RESIZE_FS" == "TRUE"  ]; then

                  echo "NOTICE: Resize FS request found, resizing $image_rootfstype filesystem on $ISCSI_BLOCK_DEVICE"
                  # here we resize the disk if needed, if not needed this won't hurt
                  /sbin/e2fsck -f -y $ISCSI_BLOCK_DEVICE
                  /sbin/resize2fs -fp $ISCSI_BLOCK_DEVICE

                  # post it to openqrm
                  if ! $WGET -O /dev/null "$openqrm_web_protocol://${resource_openqrmserver}/openqrm/boot-service/root-mount.equallogic.action.php?equallogic_root_mount_command=resize_fs_finished&equallogic_root_mount_image_id=$image_id"; then
     	               echo "ERROR: Could not post resize fs finished status for image $image_id to the openQRM-server at ${resource_openqrmserver}!"
                  else
          	         echo "Posted resize fs finished status for image $image_id to the openQRM-server at $resource_openqrmserver!"
              		fi
              else
 	               echo "No resize_fs parameter found, not resizing"
              fi
      fi

      # finallly mount
      if ! mount -t $image_rootfstype $ISCSI_BLOCK_DEVICE /mnt; then
              echo "ERROR: Could not mount $ISCSI_BLOCK_DEVICE via iscsi"
              # give a shell for the admin
              /bin/bash
      else
              echo "equallogic-storage: Mounted $ISCSI_BLOCK_DEVICE rw"
      fi

	if  [ "$IMAGE_INSTALL_FROM_NFS" != "" ]; then
		install_rootfs_from_nfs
	else
		echo "equallogic-storage: Skipping install phase"
	fi
	if  [ "$IMAGE_TRANSFER_TO_NFS" != "" ]; then
		transfer_rootfs_to_nfs
	else
		echo "equallogic-storage: Skipping transfer-to-nfs phase"
	fi
	if  [ "$IMAGE_INSTALL_FROM_LOCAL" != "" ]; then
		install_rootfs_from_local
	else
		echo "equallogic-storage: Skipping install-from-local phase"
	fi
	if  [ "$IMAGE_TRANSFER_TO_LOCAL" != "" ]; then
		transfer_rootfs_to_local
	else
		echo "equallogic-storage: Skipping transfer-to-local phase"
	fi
}


function remount_rootfs() {

	REMOUNT_LOOP=0
	# remont /mnt ro
	while ! mount -t $image_rootfstype -o ro,remount $ISCSI_BLOCK_DEVICE /mnt; do
		echo -n "."
		sleep 1
		REMOUNT_LOOP=$[ REMOUNT_LOOP + 1 ]
		if [ "$REMOUNT_LOOP" == "10" ]; then
			echo "ERROR: equallogic-storage could not remount /mnt "
			/bin/bash
		fi
	done
	echo "equallogic-storage: Re-mounted $ISCSI_BLOCK_DEVICE ro"
	
}


function create_fstab() {
	rm -f $IMAGE_FSTAB
	echo "$ISCSI_BLOCK_DEVICE   /     $image_rootfstype  defaults   0 0" >> $IMAGE_FSTAB
}


#######################################################################
# optional functions ##################################################
#######################################################################

function install_rootfs_from_nfs() {
	modprobe sunrpc 1>/dev/null 2>&1
	modprobe lockd 1>/dev/null 2>&1
	modprobe nfs 1>/dev/null 2>&1
	rm -rf /dev/null
	mknod -m 666 /dev/null c 1 3
	openqrm_portmap_start
	STORAGE_ID=`echo $IMAGE_INSTALL_FROM_NFS | cut -d':' -f1`
	IMAGE_INSTALL_FROM_NFS=`echo $IMAGE_INSTALL_FROM_NFS | cut -d':' -f2-`
	echo "equallogic-storage: Installing $resource_image from $IMAGE_INSTALL_FROM_NFS ($STORAGE_ID)"
	mkdir -p /mnt2
	if ! mount -t nfs -o ro$IMAGE_NFS_MOUNT_OPTIONS $IMAGE_INSTALL_FROM_NFS /mnt2; then
		echo "ERROR: Could not mount $IMAGE_INSTALL_FROM_NFS by nfs"
		# give a shell for the admin
		/bin/bash
	fi
	echo "equallogic-storage: Starting install-from-nfs phase. This can take a while ...."
	rsync -aq /mnt2/* /mnt/
	echo "equallogic-storage: Install-from-nfs phase finished. Continuing boot-up"
	umount /mnt2
	rmdir /mnt2
	openqrm_portmap_stop
}


function transfer_rootfs_to_nfs() {
	modprobe sunrpc 1>/dev/null 2>&1
	modprobe lockd 1>/dev/null 2>&1
	modprobe nfs 1>/dev/null 2>&1
	rm -rf /dev/null
	mknod -m 666 /dev/null c 1 3
	openqrm_portmap_start
	STORAGE_ID=`echo $IMAGE_TRANSFER_TO_NFS | cut -d':' -f1`
	IMAGE_TRANSFER_TO_NFS=`echo $IMAGE_TRANSFER_TO_NFS | cut -d':' -f2-`
	echo "equallogic-storage: Transfering $resource_image to $IMAGE_TRANSFER_TO_NFS ($STORAGE_ID)"
	mkdir -p /mnt2
	if ! mount -t nfs -o rw$IMAGE_NFS_MOUNT_OPTIONS $IMAGE_TRANSFER_TO_NFS /mnt2; then
		echo "ERROR: Could not mount $IMAGE_TRANSFER_TO_NFS by nfs"
		# give a shell for the admin
		/bin/bash
	fi
	echo "equallogic-storage: Starting transfer-to-nfs phase. This can take a while ...."
	rsync -aq /mnt/* /mnt2/
	echo "equallogic-storage: Transfer-to-nfs phase finished. Continuing boot-up"
	umount /mnt2
	rmdir /mnt2
	openqrm_portmap_stop
}


function install_rootfs_from_local() {
	modprobe ext3 1>/dev/null 2>&1
	mkdir -p /mnt2
	if ! mount -t $IMAGE_INSTALL_FROM_LOCAL_FS_TYPE -o ro $IMAGE_INSTALL_FROM_LOCAL /mnt2; then
		echo "ERROR: Could not mount $IMAGE_INSTALL_FROM_LOCAL / $IMAGE_INSTALL_FROM_LOCAL_FS_TYPE"
		# give a shell for the admin
		/bin/bash
	fi
	echo "equallogic-storage: Starting install-to-local phase. This can take a while ...."
	rsync -aq /mnt2/* /mnt/
	echo "equallogic-storage: Install-to-local phase finished. Continuing boot-up"
	umount /mnt2
	rmdir /mnt2
}


function transfer_rootfs_to_local() {
	modprobe ext3 1>/dev/null 2>&1
	mkdir -p /mnt2
	if ! mount -t $IMAGE_TRANSFER_TO_LOCAL_FS_TYPE -o rw $IMAGE_TRANSFER_TO_LOCAL /mnt2; then
		echo "ERROR: Could not mount $IMAGE_TRANSFER_TO_LOCAL / $IMAGE_TRANSFER_TO_LOCAL_FS_TYPE"
		# give a shell for the admin
		/bin/bash
	fi
	echo "equallogic-storage: Starting transfer-to-local phase. This can take a while ...."
	rsync -aq /mnt/* /mnt2/
	echo "equallogic-storage: Transfer-to-local phase finished. Continuing boot-up"
	umount /mnt2
	rmdir /mnt2
}



