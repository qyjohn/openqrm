#!/bin/bash

# this script automatically manages nfs and iscsi on lvm
OPENQRM_SERVER_BASE_DIR=$(dirname $0)/../../../..
OPENQRM_SERVER_BASE_DIR=$(pushd $OPENQRM_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/lvm-storage/include/openqrm-plugin-lvm-storage-functions
. /var/openqrm/openqrm-resource.conf

# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	echo "ERROR: Please run this script as root!"
	exit 6
fi

function lvm_storage_usage() {
	echo "Usage : $0 add/remove/snap/list <-n image-name> <-v volume-group> <-t nfs/iscsi>"
	echo "             [-m size in MB]"
	echo "             [-s image-snapshot-name]"
	echo "        $0 post_vg <-u username> <-p password>"
	echo "        $0 post_lv <-u username> <-p password> <-v volume-group>"
	exit 1
}


LVM_COMMAND=$1
shift

while [ $# -ne 0 ]; do
	case "$1" in
		-n)
			LVM_IMAGE_NAME=$2
			shift
			;;
		-m)
			LVM_IMAGE_SIZE=$2
			shift
			;;
		-s)
			LVM_IMAGE_SNAPSHOT_NAME=$2
			shift
			;;
		-t)
			LVM_IMAGE_TYPE=$2
			shift
			;;
		-u)
			LVM_OPENQRM_USERNAME=$2
			shift
			;;
		-p)
			LVM_OPENQRM_PASSWORD=$2
			shift
			;;
		-v)
			LVM_STORAGE_SERVER_VOLUME_GROUP=$2
			shift
			;;
		*)
			echo "ERROR: Free commandline arguments are not allowed"
			lvm_storage_usage
			exit 6
			;;
	esac
	shift
done




# main
if [ "$LVM_COMMAND" == "" ]; then
	lvm_storage_usage
fi

if [ "$LVM_COMMAND" == "post_lv" ] || [ "$LVM_COMMAND" == "post_vg" ]; then
		if [ "$LVM_OPENQRM_USERNAME" == "" ]; then
			lvm_storage_usage
		fi
		if [ "$LVM_OPENQRM_PASSWORD" == "" ]; then
			lvm_storage_usage
		fi
		if [ "$LVM_COMMAND" == "post_lv" ]; then
			if [ "$LVM_STORAGE_SERVER_VOLUME_GROUP" == "" ]; then
				lvm_storage_usage
			fi
		fi
else

	if [ "$LVM_COMMAND" != "list" ]; then
		if [ "$LVM_IMAGE_NAME" == "" ]; then
			lvm_storage_usage
		fi
		if [ "$LVM_STORAGE_SERVER_VOLUME_GROUP" == "" ]; then
			lvm_storage_usage
		fi
		if [ "$LVM_IMAGE_TYPE" == "" ]; then
			lvm_storage_usage
		fi
	fi
fi
# load required lvm modules if needed
if ! grep dm_mod /proc/modules 1>/dev/null; then
	modprobe dm-mod 1>/dev/null
	modprobe dm-snapshot 1>/dev/null
	# give time to settle
	sleep 2
fi

if [ "$LVM_COMMAND" != "list" ] && [ "$LVM_COMMAND" != "post_vg" ]; then
	# check if volume group exists
	if ! `vgdisplay | grep $LVM_STORAGE_SERVER_VOLUME_GROUP 1>/dev/null`; then
		echo "ERROR: Could not find volume-group $LVM_STORAGE_SERVER_VOLUME_GROUP on the storage-server"
		exit 1
	fi
fi

case "$LVM_COMMAND" in 

	add)
	
		if [ "$LVM_IMAGE_SIZE" == "" ]; then
			LVM_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
			echo "Using default size of $DEFAULT_IMAGE_SIZE MB!"
			echo "... press return to continue"
			read
		fi
		export LVM_IMAGE_SIZE
		echo -n "Creating logical volume $LVM_IMAGE_NAME size $LVM_IMAGE_SIZE MB using volume group $LVM_STORAGE_SERVER_VOLUME_GROUP"

		lvcreate -L$LVM_IMAGE_SIZE -n$LVM_IMAGE_NAME $LVM_STORAGE_SERVER_VOLUME_GROUP

		if [ "$LVM_IMAGE_TYPE" == "iscsi" ]; then
			echo "Detected Iscsi-image. Adding to $IETDCONF"
			check_iscsi_target
			lvm_storage_lock aquire
			manage_iscsi add
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "nfs" ]; then
			# we mount them and add to exports
			echo "Detected NFS-image. Mounting and adding $LVM_IMAGE_NAME to /etc/fstab + /etc/exports"
			lvm_storage_lock aquire
			manage_fstab add
			manage_nfs add
			lvm_storage_lock release
		fi

		;;

	remove)

		echo -n "Removing logical volume $LVM_IMAGE_NAME on volume group $LVM_STORAGE_SERVER_VOLUME_GROUP"

		if [ "$LVM_IMAGE_TYPE" == "iscsi" ]; then
			echo "Detected Iscsi-image. Removing from $IETDCONF"
			check_iscsi_target
			lvm_storage_lock aquire
			manage_iscsi remove
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "nfs" ]; then
			echo "Detected NFS-image. Removing from /etc/exports"
			lvm_storage_lock aquire
			manage_nfs remove
			manage_fstab remove
			lvm_storage_lock release
		fi

		# give time to settle
		sync
		sleep 2
		lvchange -a n /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
		lvremove -f /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
		;;

	snap)
		if [ "$LVM_IMAGE_SNAPSHOT_NAME" == "" ]; then
			echo "ERROR: Please give a name for the snapshot using the -s cmdline parmeter"
			echo
			lvm_storage_usage
		fi
		if [ "$LVM_IMAGE_SIZE" == "" ]; then
			LVM_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
			echo "Using default size of $DEFAULT_IMAGE_SIZE MB!"
			echo "... press return to continue"
			read
		fi
		export LVM_IMAGE_SIZE
		
		# check that source fs-images exist
		if ! `lvdisplay /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME 1>/dev/null`; then
			echo "ERROR: Could not find /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME on the storage-server"
			exit 1
		fi
		echo -n "Creating snapshot size $LVM_IMAGE_SIZE from logical volume $LVM_IMAGE_NAME -> $LVM_IMAGE_SNAPSHOT_NAME"
		lvcreate --size $LVM_IMAGE_SIZE""m --snapshot --name $LVM_IMAGE_SNAPSHOT_NAME /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
		export LVM_IMAGE_NAME=$LVM_IMAGE_SNAPSHOT_NAME

		if [ "$LVM_IMAGE_TYPE" == "iscsi" ]; then
			echo "Detected Iscsi-image. Adding to $IETDCONF"
			check_iscsi_target
			lvm_storage_lock aquire
			manage_iscsi add
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "nfs" ]; then
			echo "Detected NFS-image. Mounting and adding $IMAGE_NAME to /etc/fstab + /etc/exports"
			lvm_storage_lock aquire
			manage_fstab add
			manage_nfs add snap
			lvm_storage_lock release
		fi
		;;

	list)
		lvm lvs
		;;
	post_vg)
		echo "Posting current volume group status to the openQRM-server"
		STORAGE_STATUS_TMP=$resource_id.vg.stat
		vgdisplay > $STORAGE_STATUS_TMP
		if ! wget -q -O /dev/null --http-user=$LVM_OPENQRM_USERNAME --http-password=$LVM_OPENQRM_PASSWORD  --post-file=`$resource_basedir/openqrm/plugins/lvm-storage/bin/openqrm_postencode.py $STORAGE_STATUS_TMP` http://$resource_openqrmserver/openqrm/base/plugins/9/lvm-storage-action.php?lvm_storage_command=get_storage; then
			echo "ERROR: Could not post the volume group status to the openQRM-server at $resource_openqrmserver!"
			echo "ERROR: Could not post the volume group status to the openQRM-server at $resource_openqrmserver!" | logger
		fi
		rm -f $STORAGE_STATUS_TMP
		rm -f $STORAGE_STATUS_TMP.post
		;;
	post_lv)
		echo "Posting current logic volume status to the openQRM-server"
		STORAGE_STATUS_TMP=$resource_id.$LVM_STORAGE_SERVER_VOLUME_GROUP.lv.stat
		lvdisplay > $STORAGE_STATUS_TMP
		if ! wget -q -O /dev/null --http-user=$LVM_OPENQRM_USERNAME --http-password=$LVM_OPENQRM_PASSWORD  --post-file=`$resource_basedir/openqrm/plugins/lvm-storage/bin/openqrm_postencode.py $STORAGE_STATUS_TMP` http://$resource_openqrmserver/openqrm/base/plugins/9/lvm-storage-action.php?lvm_storage_command=get_storage; then
			echo "ERROR: Could not post the logic volume status to the openQRM-server at $resource_openqrmserver!"
			echo "ERROR: Could not post the logic volume status to the openQRM-server at $resource_openqrmserver!" | logger
		fi
		rm -f $STORAGE_STATUS_TMP
		rm -f $STORAGE_STATUS_TMP.post
		;;
	*)
		lvm_storage_usage
		;;


esac

