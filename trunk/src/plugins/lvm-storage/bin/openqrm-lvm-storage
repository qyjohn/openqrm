#!/bin/bash

# this script automatically manages nfs and iscsi on lvm
OPENQRM_SERVER_BASE_DIR=$(dirname $0)/../../../..
OPENQRM_SERVER_BASE_DIR=$(pushd $OPENQRM_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/lvm-storage/include/openqrm-plugin-lvm-storage-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/aoe-storage/include/openqrm-plugin-aoe-storage-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/iscsi-storage/include/openqrm-plugin-iscsi-storage-functions
OPENQRM_POSTENCODE="$OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-postencode.py"
if [ -f $OPENQRM_RESOURCE_PARAMETER_FILE ]; then
	. $OPENQRM_RESOURCE_PARAMETER_FILE
	OPENQRM_SERVER_IP=$resource_openqrmserver
elif [ -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf ]; then
	. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
	OPENQRM_SERVER_IP=localhost
	resource_id=0
fi
export LANG=C

# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	echo "ERROR: Please run this script as root!"
	exit 6
fi

function lvm_storage_usage() {
	echo "Usage : $0 add/remove/snap/list <-n image-name> <-v volume-group> <-t lvm-nfs-deployment/lvm-iscsi-deployment/lvm-aoe-deployment>"
	echo "             [-m size in MB]"
	echo "             [-s image-snapshot-name]"
	echo "        $0 post_vg <-u username> <-p password>"
	echo "        $0 post_lv <-u username> <-p password> <-v volume-group>"
	exit 1
}


function lvm_aoe_restart_exec() {
	if [ -f $OPENQRM_RESOURCE_PARAMETER_FILE ]; then
		. $OPENQRM_RESOURCE_PARAMETER_FILE
		OPENQRM_SYSTEM_IP=$resource_ip
		OPENQRM_EXEC_PORT=$resource_execdport
	elif [ -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf ]; then
		. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions
		openqrm_server_get_config
		OPENQRM_SYSTEM_IP=$OPENQRM_SERVER_IP_ADDRESS
	fi
	killall openqrm-exec-port-monitor 1>/dev/null 2>&1
	killall openqrm-execd 1>/dev/null 2>&1
	$OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-exec-port-monitor $OPENQRM_SYSTEM_IP $OPENQRM_EXEC_PORT | $OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-execd &
}

LVM_COMMAND=$1
shift

while [ $# -ne 0 ]; do
	case "$1" in
		-n)
			LVM_IMAGE_NAME=$2
			shift
			;;
		-m)
			LVM_IMAGE_SIZE=$2
			shift
			;;
		-s)
			LVM_IMAGE_SNAPSHOT_NAME=$2
			shift
			;;
		-t)
			LVM_IMAGE_TYPE=$2
			shift
			;;
		-u)
			LVM_OPENQRM_USERNAME=$2
			shift
			;;
		-p)
			LVM_OPENQRM_PASSWORD=$2
			shift
			;;
		-v)
			LVM_STORAGE_SERVER_VOLUME_GROUP=$2
			shift
			;;
		-d)	
			LVM_DISK=$2
            shift
            ;;
		*)
			echo "ERROR: Free commandline arguments are not allowed"
			lvm_storage_usage
			exit 6
			;;
	esac
	shift
done




# main
if [ "$LVM_COMMAND" == "" ]; then
	lvm_storage_usage
fi

if [ "$LVM_COMMAND" == "post_lv" ] || [ "$LVM_COMMAND" == "post_vg" ]; then
		if [ "$LVM_OPENQRM_USERNAME" == "" ]; then
			lvm_storage_usage
		fi
		if [ "$LVM_OPENQRM_PASSWORD" == "" ]; then
			lvm_storage_usage
		fi
		if [ "$LVM_COMMAND" == "post_lv" ]; then
			if [ "$LVM_STORAGE_SERVER_VOLUME_GROUP" == "" ]; then
				lvm_storage_usage
			fi
		fi
else

	if [ "$LVM_COMMAND" != "list" ]; then
		if [ "$LVM_IMAGE_NAME" == "" ]; then
			lvm_storage_usage
		fi
		if [ "$LVM_STORAGE_SERVER_VOLUME_GROUP" == "" ]; then
			lvm_storage_usage
		fi
		if [ "$LVM_IMAGE_TYPE" == "" ]; then
			lvm_storage_usage
		fi
	fi
fi
# load required lvm modules if needed
if ! grep dm_mod /proc/modules 1>/dev/null; then
	modprobe dm-mod 1>/dev/null
	modprobe dm-snapshot 1>/dev/null
	# give time to settle
	sleep 2
fi

if [ "$LVM_COMMAND" != "list" ] && [ "$LVM_COMMAND" != "post_vg" ]; then
	# check if volume group exists
	if ! `vgdisplay | grep $LVM_STORAGE_SERVER_VOLUME_GROUP 1>/dev/null`; then
		echo "ERROR: Could not find volume-group $LVM_STORAGE_SERVER_VOLUME_GROUP on the storage-server"
		exit 1
	fi
fi

case "$LVM_COMMAND" in 

	add)
	
		if [ "$LVM_IMAGE_SIZE" == "" ]; then
			LVM_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
			echo "Using default size of $DEFAULT_IMAGE_SIZE MB!"
			echo "... press return to continue"
			read
		fi
		export LVM_IMAGE_SIZE
		echo -n "Creating logical volume $LVM_IMAGE_NAME size $LVM_IMAGE_SIZE MB using volume group $LVM_STORAGE_SERVER_VOLUME_GROUP"

		lvcreate -L$LVM_IMAGE_SIZE -n$LVM_IMAGE_NAME $LVM_STORAGE_SERVER_VOLUME_GROUP

		if [ "$LVM_IMAGE_TYPE" == "lvm-iscsi-deployment" ]; then
			echo "Detected Iscsi-image. Adding to $IETDCONF"
			check_iscsi_target
			lvm_storage_lock aquire
			manage_iscsi add
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "lvm-nfs-deployment" ]; then
			# we mount them and add to exports
			echo "Detected NFS-image. Mounting and adding $LVM_IMAGE_NAME to /etc/fstab + /etc/exports"
			lvm_storage_lock aquire
			manage_fstab add
			manage_nfs add
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "lvm-aoe-deployment" ]; then
			echo "Detected Aoe-image. Adding to $VBLADECONF"
			check_vblade
			lvm_storage_lock aquire
			manage_vblade add
			# vbladed used waitpid which blocks qrm-execd, using nohup, screen or & does not help so we restart the openqrm-client
			lvm_aoe_restart_exec
			lvm_storage_lock release
		fi

		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$LVM_OPENQRM_USERNAME" != "" ] && [ "$LVM_OPENQRM_PASSWORD" != "" ]; then
			$0 post_lv -u $LVM_OPENQRM_USERNAME -p $LVM_OPENQRM_PASSWORD -v $LVM_STORAGE_SERVER_VOLUME_GROUP
		fi

		;;

	remove)

		echo -n "Removing logical volume $LVM_IMAGE_NAME on volume group $LVM_STORAGE_SERVER_VOLUME_GROUP"

		if [ "$LVM_IMAGE_TYPE" == "lvm-iscsi-deployment" ]; then
			echo "Detected Iscsi-image. Removing from $IETDCONF"
			check_iscsi_target
			lvm_storage_lock aquire
			manage_iscsi remove
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "lvm-nfs-deployment" ]; then
			echo "Detected NFS-image. Removing from /etc/exports"
			lvm_storage_lock aquire
			manage_nfs remove
			manage_fstab remove
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "lvm-aoe-deployment" ]; then
			echo "Detected Aoe-image. Removing from $VBLADECONF"
			check_vblade
			lvm_storage_lock aquire
			manage_vblade remove
			lvm_storage_lock release
		fi

		# give time to settle
		sync
		sleep 2
		lvchange -a n /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
		lvremove -f /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME

		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$LVM_OPENQRM_USERNAME" != "" ] && [ "$LVM_OPENQRM_PASSWORD" != "" ]; then
			$0 post_lv -u $LVM_OPENQRM_USERNAME -p $LVM_OPENQRM_PASSWORD -v $LVM_STORAGE_SERVER_VOLUME_GROUP
		fi

		;;

	snap)
		if [ "$LVM_IMAGE_SNAPSHOT_NAME" == "" ]; then
			echo "ERROR: Please give a name for the snapshot using the -s cmdline parmeter"
			echo
			lvm_storage_usage
		fi
		if [ "$LVM_IMAGE_SIZE" == "" ]; then
			LVM_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
			echo "Using default size of $DEFAULT_IMAGE_SIZE MB!"
			echo "... press return to continue"
			read
		fi
		export LVM_IMAGE_SIZE
		
		# check that source fs-images exist
		if ! `lvdisplay /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME 1>/dev/null`; then
			echo "ERROR: Could not find /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME on the storage-server"
			exit 1
		fi
		echo -n "Creating snapshot size $LVM_IMAGE_SIZE from logical volume $LVM_IMAGE_NAME -> $LVM_IMAGE_SNAPSHOT_NAME"
		lvcreate --size $LVM_IMAGE_SIZE""m --snapshot --name $LVM_IMAGE_SNAPSHOT_NAME /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
		export LVM_IMAGE_NAME=$LVM_IMAGE_SNAPSHOT_NAME

		if [ "$LVM_IMAGE_TYPE" == "lvm-iscsi-deployment" ]; then
			echo "Detected Iscsi-image. Adding to $IETDCONF"
			check_iscsi_target
			lvm_storage_lock aquire
			manage_iscsi add
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "lvm-nfs-deployment" ]; then
			echo "Detected NFS-image. Mounting and adding $IMAGE_NAME to /etc/fstab + /etc/exports"
			lvm_storage_lock aquire
			manage_fstab add
			manage_nfs add snap
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "lvm-aoe-deployment" ]; then
			echo "Detected Aoe-image. Adding to $VBLADECONF"
			check_vblade
			lvm_storage_lock aquire
			manage_vblade add
			lvm_storage_lock release
		fi

		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$LVM_OPENQRM_USERNAME" != "" ] && [ "$LVM_OPENQRM_PASSWORD" != "" ]; then
			$0 post_lv -u $LVM_OPENQRM_USERNAME -p $LVM_OPENQRM_PASSWORD -v $LVM_STORAGE_SERVER_VOLUME_GROUP
		fi
		;;

	list)
		lvm lvs
		;;
	post_vg)
		echo "Posting current volume group status to the openQRM-server"
		STORAGE_STATUS_TMP=$resource_id.vg.stat
		vgdisplay > $STORAGE_STATUS_TMP
		if ! wget -q -O /dev/null --http-user=$LVM_OPENQRM_USERNAME --http-password=$LVM_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $STORAGE_STATUS_TMP` http://$OPENQRM_SERVER_IP/openqrm/base/plugins/lvm-storage/lvm-storage-action.php?lvm_storage_command=get_storage; then
			echo "ERROR: Could not post the volume group status to the openQRM-server at $resource_openqrmserver!"
			echo "ERROR: Could not post the volume group status to the openQRM-server at $resource_openqrmserver!" | logger
		fi
		rm -f $STORAGE_STATUS_TMP
		rm -f $STORAGE_STATUS_TMP.post
		;;
	post_lv)
		echo "Posting current logic volume status to the openQRM-server"
		STORAGE_STATUS_TMP=$resource_id.$LVM_STORAGE_SERVER_VOLUME_GROUP.lv.stat
		lvdisplay > $STORAGE_STATUS_TMP
		if ! wget -q -O /dev/null --http-user=$LVM_OPENQRM_USERNAME --http-password=$LVM_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $STORAGE_STATUS_TMP` http://$OPENQRM_SERVER_IP/openqrm/base/plugins/lvm-storage/lvm-storage-action.php?lvm_storage_command=get_storage; then
			echo "ERROR: Could not post the logic volume status to the openQRM-server at $resource_openqrmserver!"
			echo "ERROR: Could not post the logic volume status to the openQRM-server at $resource_openqrmserver!" | logger
		fi
		rm -f $STORAGE_STATUS_TMP
		rm -f $STORAGE_STATUS_TMP.post
		;;
	create_aoeblade)
			# currently just one static shelf !
			AOE_SHELF=1
			# slots are dynamic
			AOE_SLOT=`cat $VBLADECONF | grep disk | awk {' print $3 '} | sort -n -r | head -n 1`
			AOE_SLOT=$(( AOE_SLOT + 1 ))
			if [ -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf ]; then
				. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
				AOE_INTERFACE=$OPENQRM_SERVER_INTERFACE
			else
				AOE_INTERFACE=`ifconfig | grep $resource_mac | awk {' print $1 '} | tail -1`
			fi
			echo "disk $AOE_SHELF $AOE_SLOT $AOE_INTERFACE $LVM_DISK" >> $VBLADECONF
			# start vbladed
			vbladed $AOE_SHELF $AOE_SLOT $AOE_INTERFACE $LVM_DISK
			;;
	create_iscsilun)
		# Lvol2ISCSI-LUN
		IMAGE_LUN=`cat $IETDCONF | grep Lun | awk {' print $2 '} | sort -n -r | head -n 1`
		IMAGE_LUN=$(( IMAGE_LUN + 1 ))
		echo "	Lun $IMAGE_LUN Path=$LVM_DISK" >> $IETDCONF
		nohup /etc/init.d/iscsi-target restart
		;;
	*)
		lvm_storage_usage
		;;


esac

