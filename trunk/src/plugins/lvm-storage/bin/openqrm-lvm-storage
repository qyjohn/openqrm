#!/bin/bash
# this script automatically manages nfs and iscsi on lvm
#
# This file is part of openQRM.
#
# openQRM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# openQRM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with openQRM.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2009, Matthias Rechenburg <matt@openqrm.com>
#
OPENQRM_SERVER_BASE_DIR=$(dirname $0)/../../../..
OPENQRM_SERVER_BASE_DIR=$(pushd $OPENQRM_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/lvm-storage/include/openqrm-plugin-lvm-storage-functions
OPENQRM_POSTENCODE="$OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-postencode"
if [ -f $OPENQRM_RESOURCE_PARAMETER_FILE ]; then
	. $OPENQRM_RESOURCE_PARAMETER_FILE
	OPENQRM_SERVER_IP=$resource_openqrmserver
	OPENQRM_EXEC_PORT=$resource_execdport
elif [ -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf ]; then
	. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
	. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions
	openqrm_server_get_config
	OPENQRM_SERVER_IP=$OPENQRM_SERVER_IP_ADDRESS
	resource_id=0
	resource_openqrmserver=$OPENQRM_SERVER_IP_ADDRESS
fi
export LANG=C
LINEBR='
'

# using the resource_id as the shelf-id
AOE_SHELF=$resource_id
export AOE_SHELF

# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	echo "ERROR: Please run this script as root!"
	exit 6
fi

function lvm_storage_usage() {
	echo "Usage : $0 add/remove/snap/list/resize <-n image-name> <-v volume-group> <-t lvm-nfs-deployment/lvm-iscsi-deployment/lvm-aoe-deployment>"
	echo "             [-m size in MB]"
	echo "             [-s image-snapshot-name]"
	echo "             (for lvm-iscsi-deployment : <-i authidentifier>)"
	echo "        $0 auth <-r image-rootdevice> <-i authidentifier> <-t lvm-nfs-deployment/lvm-iscsi-deployment/lvm-aoe-deployment>"
	echo "        $0 post_vg <-u username> <-p password>"
	echo "        $0 post_lv <-u username> <-p password> <-v volume-group>"
	echo "        $0 post_identifier <-t lvm-nfs-deployment/lvm-iscsi-deployment/lvm-aoe-deployment> <-u username> <-p password>"
	exit 1
}



LVM_COMMAND=$1
shift

while [ $# -ne 0 ]; do
	case "$1" in
		-n)
			LVM_IMAGE_NAME=$2
			shift
			;;
		-m)
			LVM_IMAGE_SIZE=$2
			shift
			;;
		-s)
			LVM_IMAGE_SNAPSHOT_NAME=$2
			shift
			;;
		-t)
			LVM_IMAGE_TYPE=$2
			shift
			;;
		-i)
			LVM_IMAGE_AUTH=$2
			shift
			;;
		-r)
			LVM_IMAGE_ROOTDEVICE=$2
			shift
			;;
		-u)
			LVM_OPENQRM_USERNAME=$2
			shift
			;;
		-p)
			LVM_OPENQRM_PASSWORD=$2
			shift
			;;
		-v)
			LVM_STORAGE_SERVER_VOLUME_GROUP=$2
			shift
			;;
		*)
			echo "ERROR: Free commandline arguments are not allowed"
			lvm_storage_usage
			exit 6
			;;
	esac
	shift
done




# main
if [ "$LVM_COMMAND" == "" ]; then
	lvm_storage_usage
fi

if [ "$LVM_COMMAND" == "post_lv" ] || [ "$LVM_COMMAND" == "post_vg" ] || [ "$LVM_COMMAND" == "post_identifier" ]; then
		if [ "$LVM_OPENQRM_USERNAME" == "" ]; then
			lvm_storage_usage
		fi
		if [ "$LVM_OPENQRM_PASSWORD" == "" ]; then
			lvm_storage_usage
		fi
		if [ "$LVM_COMMAND" == "post_lv" ]; then
			if [ "$LVM_STORAGE_SERVER_VOLUME_GROUP" == "" ]; then
				lvm_storage_usage
			fi
		fi
		if [ "$LVM_COMMAND" == "post_identifier" ]; then
			if [ "$LVM_IMAGE_TYPE" == "" ]; then
				lvm_storage_usage
			fi
		fi

else

	if [ "$LVM_COMMAND" != "list" ] && [ "$LVM_COMMAND" != "auth" ]; then
		if [ "$LVM_IMAGE_NAME" == "" ]; then
			lvm_storage_usage
		fi
		if [ "$LVM_STORAGE_SERVER_VOLUME_GROUP" == "" ]; then
			lvm_storage_usage
		fi
		if [ "$LVM_IMAGE_TYPE" == "" ]; then
			lvm_storage_usage
		fi
	fi
fi
# load required lvm modules if needed
if ! grep dm_mod /proc/modules 1>/dev/null; then
	modprobe dm-mod 1>/dev/null 2>&1
	modprobe dm-snapshot 1>/dev/null 2>&1
	# give time to settle
	sleep 2
fi

if [ "$LVM_COMMAND" != "list" ] && [ "$LVM_COMMAND" != "post_vg" ] && [ "$LVM_COMMAND" != "post_identifier" ] && [ "$LVM_COMMAND" != "auth" ]; then
	# check if volume group exists
	if ! `vgdisplay | grep $LVM_STORAGE_SERVER_VOLUME_GROUP 1>/dev/null`; then
		echo "ERROR: Could not find volume-group $LVM_STORAGE_SERVER_VOLUME_GROUP on the storage-server"
		exit 1
	fi
fi

case "$LVM_COMMAND" in 

	add)
	
		if [ "$LVM_IMAGE_SIZE" == "" ]; then
			LVM_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
			echo "Using default size of $DEFAULT_IMAGE_SIZE MB!"
		fi
		export LVM_IMAGE_SIZE
		echo -n "Creating logical volume $LVM_IMAGE_NAME size $LVM_IMAGE_SIZE MB using volume group $LVM_STORAGE_SERVER_VOLUME_GROUP"

		lvcreate -L$LVM_IMAGE_SIZE -n$LVM_IMAGE_NAME $LVM_STORAGE_SERVER_VOLUME_GROUP

		if [ "$LVM_IMAGE_TYPE" == "lvm-iscsi-deployment" ]; then
			echo "Detected Iscsi-image. Adding to $IETDCONF"
			check_iscsi_target
			lvm_storage_lock aquire
			manage_iscsi add regular $LVM_IMAGE_AUTH
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "lvm-nfs-deployment" ]; then
			# we mount them and add to exports
			echo "Detected NFS-image. Mounting and adding $LVM_IMAGE_NAME to /etc/fstab + /etc/exports"
			lvm_storage_lock aquire
			manage_fstab add
			manage_nfs add regular $OPENQRM_SERVER_IP
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "lvm-aoe-deployment" ]; then
			echo "Detected Aoe-image. Adding to $VBLADECONF"
			check_vblade
			lvm_storage_lock aquire
			manage_vblade add
			lvm_storage_lock release
		fi

		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$LVM_OPENQRM_USERNAME" != "" ] && [ "$LVM_OPENQRM_PASSWORD" != "" ]; then
			$0 post_lv -u $LVM_OPENQRM_USERNAME -p $LVM_OPENQRM_PASSWORD -v $LVM_STORAGE_SERVER_VOLUME_GROUP -t $LVM_IMAGE_TYPE
		fi

		;;

	remove)

		echo -n "Removing logical volume $LVM_IMAGE_NAME on volume group $LVM_STORAGE_SERVER_VOLUME_GROUP"

		if [ "$LVM_IMAGE_TYPE" == "lvm-iscsi-deployment" ]; then
			echo "Detected Iscsi-image. Removing from $IETDCONF"
			check_iscsi_target
			lvm_storage_lock aquire
			manage_iscsi remove
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "lvm-nfs-deployment" ]; then
			echo "Detected NFS-image. Removing from /etc/exports"
			lvm_storage_lock aquire
			manage_nfs remove
			manage_fstab remove
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "lvm-aoe-deployment" ]; then
			echo "Detected Aoe-image. Removing from $VBLADECONF"
			check_vblade
			lvm_storage_lock aquire
			manage_vblade remove
			lvm_storage_lock release
		fi

		# give time to settle
		sync
		sleep 2
		lvchange -a n /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
		lvremove -f /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME

		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$LVM_OPENQRM_USERNAME" != "" ] && [ "$LVM_OPENQRM_PASSWORD" != "" ]; then
			$0 post_lv -u $LVM_OPENQRM_USERNAME -p $LVM_OPENQRM_PASSWORD -v $LVM_STORAGE_SERVER_VOLUME_GROUP -t $LVM_IMAGE_TYPE
		fi

		;;

	snap)
		if [ "$LVM_IMAGE_SNAPSHOT_NAME" == "" ]; then
			echo "ERROR: Please give a name for the snapshot using the -s cmdline parmeter"
			echo
			lvm_storage_usage
		fi
		if [ "$LVM_IMAGE_SIZE" == "" ]; then
			LVM_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
			echo "Using default size of $DEFAULT_IMAGE_SIZE MB!"
		fi
		export LVM_IMAGE_SIZE
		
		# check that source fs-images exist
		if ! `lvdisplay /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME 1>/dev/null`; then
			echo "ERROR: Could not find /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME on the storage-server"
			exit 1
		fi
		echo -n "Creating snapshot size $LVM_IMAGE_SIZE from logical volume $LVM_IMAGE_NAME -> $LVM_IMAGE_SNAPSHOT_NAME"
		lvcreate --size $LVM_IMAGE_SIZE""m --snapshot --name $LVM_IMAGE_SNAPSHOT_NAME /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
		export LVM_IMAGE_NAME=$LVM_IMAGE_SNAPSHOT_NAME

		if [ "$LVM_IMAGE_TYPE" == "lvm-iscsi-deployment" ]; then
			echo "Detected Iscsi-image. Adding to $IETDCONF"
			check_iscsi_target
			lvm_storage_lock aquire
			manage_iscsi add snap $LVM_IMAGE_AUTH
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "lvm-nfs-deployment" ]; then
			echo "Detected NFS-image. Mounting and adding $IMAGE_NAME to /etc/fstab + /etc/exports"
			lvm_storage_lock aquire
			manage_fstab add
			manage_nfs add snap $OPENQRM_SERVER_IP
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "lvm-aoe-deployment" ]; then
			echo "Detected Aoe-image. Adding to $VBLADECONF"
			check_vblade
			lvm_storage_lock aquire
			manage_vblade add snap
			lvm_storage_lock release
		fi

		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$LVM_OPENQRM_USERNAME" != "" ] && [ "$LVM_OPENQRM_PASSWORD" != "" ]; then
			$0 post_lv -u $LVM_OPENQRM_USERNAME -p $LVM_OPENQRM_PASSWORD -v $LVM_STORAGE_SERVER_VOLUME_GROUP -t $LVM_IMAGE_TYPE
		fi
		;;

	auth)
		echo "Authenticating $LVM_IMAGE_TYPE image $LVM_IMAGE_ROOTDEVICE to $LVM_IMAGE_AUTH"
		if [ "$LVM_IMAGE_TYPE" == "lvm-iscsi-deployment" ]; then
			lvm_storage_lock aquire
			manage_iscsi auth $LVM_IMAGE_AUTH
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "lvm-nfs-deployment" ]; then
			lvm_storage_lock aquire
			manage_nfs auth $LVM_IMAGE_AUTH
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "lvm-aoe-deployment" ]; then
			check_vblade
			lvm_storage_lock aquire
			manage_vblade auth $LVM_IMAGE_AUTH
			lvm_storage_lock release
		fi
		;;

	list)
		lvm lvs
		;;
	post_vg)
		echo "Posting current volume group status to the openQRM-server"
		STORAGE_STATUS_TMP=$resource_id.vg.stat
		vgs | grep -v VFree | sed -e "s/ \{1,\}//" > $STORAGE_STATUS_TMP
        sed -i -e "s/ \{1,\}/@/g" $STORAGE_STATUS_TMP
		if ! wget -q -O /dev/null --http-user=$LVM_OPENQRM_USERNAME --http-password=$LVM_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $STORAGE_STATUS_TMP` http://$OPENQRM_SERVER_IP/openqrm/base/plugins/lvm-storage/lvm-storage-action.php?lvm_storage_command=get_storage; then
			echo "ERROR: Could not post the volume group status to the openQRM-server at $resource_openqrmserver!"
			echo "ERROR: Could not post the volume group status to the openQRM-server at $resource_openqrmserver!" | logger
		fi
		rm -f $STORAGE_STATUS_TMP
		rm -f $STORAGE_STATUS_TMP.post
		;;
	post_lv)
		echo "Posting current $LVM_IMAGE_TYPE logic volume status to the openQRM-server"
		STORAGE_STATUS_TMP=$resource_id.$LVM_STORAGE_SERVER_VOLUME_GROUP.lv.stat
		> $STORAGE_STATUS_TMP
        for LVOL in `lvs $LVM_STORAGE_SERVER_VOLUME_GROUP | grep -v LSize | sed -e "s/ \{1,\}//" | awk {' print $1 '}`; do
			case $LVM_IMAGE_TYPE in
				lvm-nfs-deployment)
					if grep $LVOL /etc/exports 1>/dev/null; then
                        # is this a local-storage location ?
                        if [ ! -f /$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVOL/local-storage ]; then
                            lvs $LVM_STORAGE_SERVER_VOLUME_GROUP/$LVOL | grep -v LSize | sed -e "s/ \{1,\}//" >> $STORAGE_STATUS_TMP
                        fi
					fi
					;;

				lvm-iscsi-deployment)
					if grep $LVOL $IETDCONF 1>/dev/null; then
						lvs $LVM_STORAGE_SERVER_VOLUME_GROUP/$LVOL | grep -v LSize | sed -e "s/ \{1,\}//" >> $STORAGE_STATUS_TMP
					fi					
					;;

				lvm-aoe-deployment)
					if grep $LVOL $VBLADECONF 1>/dev/null; then
						lvs $LVM_STORAGE_SERVER_VOLUME_GROUP/$LVOL | grep -v LSize | sed -e "s/ \{1,\}//" >> $STORAGE_STATUS_TMP
					fi
					;;
			esac
		done
        sed -i -e "s/ \{1,\}/@/g" $STORAGE_STATUS_TMP
		if ! wget -q -O /dev/null --http-user=$LVM_OPENQRM_USERNAME --http-password=$LVM_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $STORAGE_STATUS_TMP` http://$OPENQRM_SERVER_IP/openqrm/base/plugins/lvm-storage/lvm-storage-action.php?lvm_storage_command=get_storage; then
			echo "ERROR: Could not post the logic volume status to the openQRM-server at $resource_openqrmserver!"
			echo "ERROR: Could not post the logic volume status to the openQRM-server at $resource_openqrmserver!" | logger
		fi
		rm -f $STORAGE_STATUS_TMP
		rm -f $STORAGE_STATUS_TMP.post
		;;
	post_identifier)
		echo "Posting current $LVM_IMAGE_TYPE logical volume identifier to the openQRM-server"
		STORAGE_STATUS_TMP=$resource_id.lv.$LVM_IMAGE_TYPE.ident
		> $STORAGE_STATUS_TMP

		for LVOL in `lvdisplay | grep "LV Name" | awk {' print $3 '}`; do
			LVOL_SHORT=`basename $LVOL`
			case $LVM_IMAGE_TYPE in
				lvm-nfs-deployment)
					exportfs -v | awk {' print $1 '} | grep -v "<.*>" > /tmp/$STORAGE_STATUS_TMP
					if grep $LVOL_SHORT /tmp/$STORAGE_STATUS_TMP 1>/dev/null; then
						EXPORT_PATH=`echo $LVOL | sed -e "s#^/dev##g"`
                        # is this a local-storage location ?
                        if [ ! -f $EXPORT_PATH/local-storage ]; then
                            echo "$LVOL,$EXPORT_PATH"
                            echo "$LVOL,$EXPORT_PATH" >> $STORAGE_STATUS_TMP
                        fi
					fi
					rm -f /tmp/$STORAGE_STATUS_TMP
					;;

				lvm-iscsi-deployment)
					if grep $LVOL_SHORT $IETDCONF 1>/dev/null; then
						LUN=`grep $LVOL_SHORT $IETDCONF | grep Lun | awk {'print $2 '}`
						TARGET=`cat $IETDCONF | grep -v "#" | grep Target | grep $LVOL_SHORT | awk {' print $2 '}`
						IMAGE_NAME=$LVOL_SHORT
						VOLUME_GROUP=`echo $LVOL | cut -d'/' -f3`
						echo "$IMAGE_NAME,$VOLUME_GROUP:/dev/$TARGET/$LUN"
						echo "$IMAGE_NAME,$VOLUME_GROUP:/dev/$TARGET/$LUN" >> $STORAGE_STATUS_TMP
					fi					
					;;

				lvm-aoe-deployment)
					if grep $LVOL_SHORT $VBLADECONF 1>/dev/null; then
						INTERFACE=`grep $LVOL_SHORT $VBLADECONF | awk {'print $1	'}`
						V_SHELF=`grep $LVOL_SHORT $VBLADECONF | awk {' print $2 '}`
						V_SLOT=`grep $LVOL_SHORT $VBLADECONF | awk {' print $3 '}`
						V_IMAGE=`grep $LVOL_SHORT $VBLADECONF | awk {' print $4 '}`
						V_ALLOWED_MAC=`grep $LVOL_SHORT $VBLADECONF | awk {' print $5 '}`
						VOLUME_GROUP=`echo $LVOL | cut -d'/' -f3`
						echo "$V_IMAGE,$VOLUME_GROUP:$LVOL_SHORT:/dev/etherd/e$V_SHELF.$V_SLOT"
						echo "$V_IMAGE,$VOLUME_GROUP:$LVOL_SHORT:/dev/etherd/e$V_SHELF.$V_SLOT" >> $STORAGE_STATUS_TMP
					fi
					;;
			esac
		
		done

		if ! wget -q -O /dev/null --http-user=$LVM_OPENQRM_USERNAME --http-password=$LVM_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $STORAGE_STATUS_TMP` http://$OPENQRM_SERVER_IP/openqrm/base/plugins/lvm-storage/lvm-storage-action.php?lvm_storage_command=get_ident; then
			echo "ERROR: Could not post the logic volume status to the openQRM-server at $resource_openqrmserver!"
			echo "ERROR: Could not post the logic volume status to the openQRM-server at $resource_openqrmserver!" | logger
		fi
		rm -f $STORAGE_STATUS_TMP
		rm -f $STORAGE_STATUS_TMP.post
		;;


	resize)
		if [ "$LVM_IMAGE_SIZE" == "" ]; then
			LVM_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
			echo "Using default size of $DEFAULT_IMAGE_SIZE MB!"
		fi
		export LVM_IMAGE_SIZE
		echo "Resizing logical volume $LVM_IMAGE_NAME + size $LVM_IMAGE_SIZE MB using volume group $LVM_STORAGE_SERVER_VOLUME_GROUP"
        lvresize -L +$LVM_IMAGE_SIZE /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME 2>&1 | logger

		if [ "$LVM_IMAGE_TYPE" == "lvm-iscsi-deployment" ]; then
			echo "Detected Iscsi-image. Running resize2fs on /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME"
			check_iscsi_target
			lvm_storage_lock aquire
			manage_iscsi remove
            e2fsck -f -y /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME 2>&1 | logger
            resize2fs -fp /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME 2>&1 | logger
			manage_iscsi add snap $LVM_IMAGE_AUTH
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "lvm-nfs-deployment" ]; then
			# if it is lvm-nfs deployment we can resize the fs immediately
			echo "Detected NFS-image. Running resize2fs on /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME"
			lvm_storage_lock aquire
			manage_nfs remove
            e2fsck -f -y /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME 2>&1 | logger
            resize2fs -fp /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME 2>&1 | logger
			manage_nfs add snap $OPENQRM_SERVER_IP
			lvm_storage_lock release
		elif [ "$LVM_IMAGE_TYPE" == "lvm-aoe-deployment" ]; then
			echo "Detected Aoe-image. Running resize2fs on /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME"
			check_vblade
			lvm_storage_lock aquire
			manage_vblade remove
            e2fsck -f -y /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME 2>&1 | logger
            resize2fs -fp /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME 2>&1 | logger
			manage_vblade add snap
			lvm_storage_lock release
		fi

		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$LVM_OPENQRM_USERNAME" != "" ] && [ "$LVM_OPENQRM_PASSWORD" != "" ]; then
			$0 post_lv -u $LVM_OPENQRM_USERNAME -p $LVM_OPENQRM_PASSWORD -v $LVM_STORAGE_SERVER_VOLUME_GROUP -t $LVM_IMAGE_TYPE
		fi

		;;



	*)
		lvm_storage_usage
		;;


esac

