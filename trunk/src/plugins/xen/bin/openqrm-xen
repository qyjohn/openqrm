#!/bin/bash
# this script automatically manages xen
#
# This file is part of openQRM.
#
# openQRM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# openQRM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with openQRM.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2009, Matthias Rechenburg <matt@openqrm.com>
#
OPENQRM_SERVER_BASE_DIR=$(dirname $0)/../../../..
OPENQRM_SERVER_BASE_DIR=$(pushd $OPENQRM_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/xen/include/openqrm-plugin-xen-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/xen/etc/openqrm-plugin-xen.conf
if [ -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf ]; then
	. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
	. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions
	openqrm_server_get_config
	OPENQRM_SERVER_IP=$OPENQRM_SERVER_IP_ADDRESS
	OPENQRM_INTERFACE=$OPENQRM_SERVER_INTERFACE
	resource_id=0
	resource_openqrmserver=$OPENQRM_SERVER_IP_ADDRESS
    openqrm_web_protocol=$OPENQRM_WEB_PROTOCOL

elif [ -f $OPENQRM_RESOURCE_PARAMETER_FILE ]; then
	. $OPENQRM_RESOURCE_PARAMETER_FILE
	OPENQRM_SERVER_IP=$resource_openqrmserver
	OPENQRM_INTERFACE=`ifconfig | grep -i $resource_mac | grep :oq | cut -d':' -f1`

fi
OPENQRM_POSTENCODE="$OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-postencode"
OPENQRM_XEN_VM_TEMPLATE="$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/xen/etc/templates/openqrm-xen-vm"
# the directory to keep the vm files for vms created by openQRM
OPENQRM_VM_DIR="/var/lib/xen/openqrm"
# which directory to use for the xen vms -> set by the plugin config file
if [ -d "$OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR" ]; then
    mkdir -p $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR
fi
export LANG=C
# define wget to use with https
if [ "$openqrm_web_protocol" == "https" ]; then
    WGET_NO_CERT_CHECK="--no-check-certificate"
fi


# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	echo "ERROR: Please run this script as root!"
	exit 6
fi
# check interface
if [ "$OPENQRM_INTERFACE" == "" ]; then
	# we are doing a local boot and do not have an ethX:oq network device
	OPENQRM_INTERFACE=`ifconfig | grep $resource_mac | cut -d':' -f1 | grep ^eth | awk {' print $1 '}`
	if [ "$OPENQRM_INTERFACE" == "" ]; then
		echo "ERROR: Could not find out which network interface to use"
		exit 1
	fi
fi
# which screen binary to use
if [ -x /usr/bin/screen.real ]; then
    RUNSCREEN="/usr/bin/screen.real"
else
    RUNSCREEN=`which screen`
fi


function xen_usage() {
	echo "Usage : $0 start/stop/reboot/remove/list <-n vm-name>"
	echo "Usage : $0 create <-n vm-name> <-m mac-address> <-r memory> [-d disk-size] [-s swap-size] [ -c cpu-number]"
	echo "Usage : $0 migrate <-n vm-name> <-i ip-address> <-t live/regular>"
	echo "Usage : $0 setboot <-m mac-address> <-b local/net>"
	echo "        $0 post_vm_list <-u username> <-p password>"
	echo "        $0 post_vm_config <-n vm-name> <-u username> <-p password>"
	echo "        $0 update_vm_ram <-r memory> <-n vm-name>"
	echo "        $0 update_vm_cpu <-c cpu-number> <-n vm-name>"
	echo "        $0 add_vm_nic <-x nic-number> <-m mac-address> <-n vm-name>"
	echo "        $0 remove_vm_nic <-x nic-number> <-n vm-name>"
	echo "        $0 add_vm_disk <-x disk-number> <-d disk-size> <-n vm-name>"
	echo "        $0 remove_vm_disk <-x disk-number> <-n vm-name>"
	exit 1
}



function get_disk_name() {
    local component=$1
    case "$component" in
        1)
            echo "hda"
            ;;
        2)
            echo "hdb"
            ;;
        3)
            echo "hdc"
            ;;
        4)
            echo "hdd"
            ;;
    esac
}

function xen_generate_vm_config() {
    VM_NAME=$1
    VM_BASE_DIR=$OPENQRM_VM_DIR/$VM_NAME
    # source the components config
    vm_kernel=`cat $VM_BASE_DIR/kernel 2>/dev/null`
    vm_builder=`cat $VM_BASE_DIR/builder 2>/dev/null`
    vm_memory=`cat $VM_BASE_DIR/memory 2>/dev/null`
    vm_vcpu=`cat $VM_BASE_DIR/vcpu 2>/dev/null`
    vm_device_model=`cat $VM_BASE_DIR/device_model 2>/dev/null`
    vm_name=`cat $VM_BASE_DIR/name 2>/dev/null`
    vm_mac1=`cat $VM_BASE_DIR/mac1 2>/dev/null`
    vm_bridge1=`cat $VM_BASE_DIR/bridge1 2>/dev/null`
    vm_mac2=`cat $VM_BASE_DIR/mac2 2>/dev/null`
    vm_bridge2=`cat $VM_BASE_DIR/bridge2 2>/dev/null`
    vm_mac3=`cat $VM_BASE_DIR/mac3 2>/dev/null`
    vm_bridge3=`cat $VM_BASE_DIR/bridge3 2>/dev/null`
    vm_mac4=`cat $VM_BASE_DIR/mac4 2>/dev/null`
    vm_bridge4=`cat $VM_BASE_DIR/bridge4 2>/dev/null`
    vm_mac5=`cat $VM_BASE_DIR/mac5 2>/dev/null`
    vm_bridge5=`cat $VM_BASE_DIR/bridge5 2>/dev/null`
    vm_boot=`cat $VM_BASE_DIR/boot 2>/dev/null`
    vm_root=`cat $VM_BASE_DIR/root 2>/dev/null`
    vm_swap=`cat $VM_BASE_DIR/swap 2>/dev/null`
    vm_swapsize=`cat $VM_BASE_DIR/swapsize 2>/dev/null`
    vm_disk1=`cat $VM_BASE_DIR/disk1 2>/dev/null`
    vm_disksize1=`cat $VM_BASE_DIR/disksize1 2>/dev/null`
    vm_disk2=`cat $VM_BASE_DIR/disk2 2>/dev/null`
    vm_disksize2=`cat $VM_BASE_DIR/disksize2 2>/dev/null`
    vm_disk3=`cat $VM_BASE_DIR/disk3 2>/dev/null`
    vm_disksize3=`cat $VM_BASE_DIR/disksize3 2>/dev/null`
    vm_vnc=`cat $VM_BASE_DIR/vnc 2>/dev/null`
    vm_vncviewer=`cat $VM_BASE_DIR/vncviewer 2>/dev/null`
    vm_vnc_display=`cat $VM_BASE_DIR/vncdisplay 2>/dev/null`
    vm_sdl=`cat $VM_BASE_DIR/sdl 2>/dev/null`

    > $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$VM_NAME.cfg
    cat >> $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$VM_NAME.cfg << EOF
kernel = "$vm_kernel"
builder = "$vm_builder"
memory = "$vm_memory"
device_model="$vm_device_model"
name = "$vm_name"
boot="$vm_boot"
vcpu="$vm_vcpu"
vnc=$vm_vnc
vncviewer=$vm_vncviewer
vncdisplay=$vm_vnc_display
sdl=$vm_sdl
EOF


    # boot nic
    VM_NIC_CONF="$VM_DISK_CONF \"mac=$vm_mac1, type=ioemu, bridge=$vm_bridge1\","
    # additional nics
    if [ "$vm_mac2" != "" ]; then
        VM_NIC_CONF="$VM_NIC_CONF \"mac=$vm_mac2, type=ioemu, bridge=$vm_bridge2\","
    fi
    if [ "$vm_mac3" != "" ]; then
        VM_NIC_CONF="$VM_NIC_CONF \"mac=$vm_mac3, type=ioemu, bridge=$vm_bridge3\","
    fi
    if [ "$vm_mac4" != "" ]; then
        VM_NIC_CONF="$VM_NIC_CONF \"mac=$vm_mac4, type=ioemu, bridge=$vm_bridge4\","
    fi
    if [ "$vm_mac5" != "" ]; then
        VM_NIC_CONF="$VM_NIC_CONF \"mac=$vm_mac5, type=ioemu, bridge=$vm_bridge5\","
    fi
    cat >> $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$VM_NAME.cfg << EOF
vif = [ $VM_NIC_CONF ]
EOF

    # add disk + swap
    ADD_DISK=false
    if [ "$vm_disk1" != "" ]; then
        VM_DISK_CONF="$VM_DISK_CONF \"$vm_disk1\","
        ADD_DISK=true
        cat >> $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$VM_NAME.cfg << EOF
root = "$vm_root"
EOF
    fi
    if [ "$vm_disk2" != "" ]; then
        VM_DISK_CONF="$VM_DISK_CONF \"$vm_disk2\","
        ADD_DISK=true
    fi
    if [ "$vm_disk3" != "" ]; then
        VM_DISK_CONF="$VM_DISK_CONF \"$vm_disk3\","
        ADD_DISK=true
    fi
    if [ "$vm_swap" != "" ]; then
        VM_DISK_CONF="$VM_DISK_CONF \"$vm_swap\","
        ADD_DISK=true
    fi

    if [ "$ADD_DISK" == "true" ]; then
        cat >> $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$VM_NAME.cfg << EOF
disk = [ $VM_DISK_CONF ]
EOF
    fi

}




XEN_COMMAND=$1
shift

while [ $# -ne 0 ]; do
	case "$1" in
		-n)
			XEN_VM_NAME=$2
			shift
			;;
		-m)
			XEN_VM_MAC=$2
			shift
			;;
		-m2)
			XEN_VM_MAC2=$2
			shift
			;;
		-m3)
			XEN_VM_MAC3=$2
			shift
			;;
		-m4)
			XEN_VM_MAC4=$2
			shift
			;;
		-m5)
			XEN_VM_MAC5=$2
			shift
			;;
		-i)
			XEN_VM_IP=$2
			shift
			;;
		-r)
			XEN_VM_RAM=$2
			shift
			;;
		-c)
			XEN_VM_CPU=$2
			shift
			;;
		-d)
			XEN_VM_DISK=$2
			shift
			;;
		-s)
			XEN_VM_SWAP=$2
			shift
			;;
		-t)
			XEN_MIGRATION_TYPE=$2
			shift
			;;
		-u)
			XEN_OPENQRM_USERNAME=$2
			shift
			;;
		-p)
			XEN_OPENQRM_PASSWORD=$2
			shift
			;;
		-x)
			XEN_VM_COMPONENT_NUMBER=$2
			shift
			;;
		-b)
			XEN_VM_BOOT=$2
			shift
			;;
		*)
			echo "ERROR: Free commandline arguments are not allowed"
			xen_usage
			exit 6
			;;
	esac
	shift
done




# main
if [ "$XEN_COMMAND" == "" ]; then
	xen_usage
fi

if [ "$XEN_COMMAND" == "post_vm_list" ]; then
		if [ "$XEN_OPENQRM_USERNAME" == "" ]; then
			xen_usage
		fi
		if [ "$XEN_OPENQRM_PASSWORD" == "" ]; then
			xen_usage
		fi
else

	if [ "$XEN_COMMAND" != "list" ] && [ "$XEN_COMMAND" != "setboot" ]; then
		if [ "$XEN_VM_NAME" == "" ]; then
			xen_usage
		fi
	fi
fi


case "$XEN_COMMAND" in 

	create)
		if [ "$XEN_VM_MAC" == "" ]; then
			xen_usage
		fi
		if [ "$XEN_VM_RAM" == "" ]; then
			xen_usage
		fi
		xen_lock aquire
		echo "Creating Xen vm $XEN_VM_NAME -> /etc/xen/$XEN_VM_NAME.cfg"
		# find the hvmloader
		HVM_LOADER=`find /usr/lib/xen* /usr/lib64/xen* -name hvmloader | head -n1`
		QEMU_DM=`find /usr/lib/xen* /usr/lib64/xen* -name qemu-dm | head -n1`
		if [ "$HVM_LOADER" == "" ]; then
            openqrm_post_event 0 "create" 3 "openqrm-xen" "Could not find the hvmloader on this Xen system. Please make sure to install it!"
    		xen_lock release
            exit 1
		fi
		if [ "$QEMU_DM" == "" ]; then
            openqrm_post_event 0 "create" 3 "openqrm-xen" "Could not find the qemu-dm on this Xen system. Please make sure to install it!"
    		xen_lock release
            exit 1
		fi

        XEN_VM_BASE_DIR=$OPENQRM_VM_DIR/$XEN_VM_NAME
        mkdir -p $XEN_VM_BASE_DIR
        echo "$XEN_VM_NAME" > $XEN_VM_BASE_DIR/name
        echo "$HVM_LOADER" > $XEN_VM_BASE_DIR/kernel
        echo "$XEN_VM_RAM" > $XEN_VM_BASE_DIR/memory
        echo "hvm" > $XEN_VM_BASE_DIR/builder
        echo "$QEMU_DM" > $XEN_VM_BASE_DIR/device_model
        echo "$XEN_VM_MAC" > $XEN_VM_BASE_DIR/mac1
        echo "$OPENQRM_PLUGIN_XEN_INTERNAL_BRIDGE" > $XEN_VM_BASE_DIR/bridge1
        echo "n" > $XEN_VM_BASE_DIR/boot
        echo "1" > $XEN_VM_BASE_DIR/vnc
        echo "1" > $XEN_VM_BASE_DIR/vncviewer
        echo "0" > $XEN_VM_BASE_DIR/sdl

        # one cpu by default
        if [ "$XEN_VM_CPU" == "" ]; then
            XEN_VM_CPU=1
        fi
        echo "$XEN_VM_CPU" > $XEN_VM_BASE_DIR/vcpu

        # find the next free vncdisplay
        for VNCD in `find $OPENQRM_VM_DIR/* -name vncdisplay 2>/dev/null`; do
                NVNCD=`cat $VNCD`
                VNCD_LIST="$VNCD_LIST $NVNCD"

        done
        for TVNCD in `echo $VNCD_LIST | sort`; do
                :
        done
        NEW_VNCD=$(( TVNCD + 1 ))
        echo "$NEW_VNCD" > $XEN_VM_BASE_DIR/vncdisplay

		# disk
		if [ "$XEN_VM_DISK" != "" ]; then
			echo "-> Creating disk"
			dd if=/dev/zero of=$OPENQRM_VM_DIR/$XEN_VM_NAME/disk1.img bs=1M seek=$XEN_VM_DISK count=1
			mkfs.ext3 -F $OPENQRM_VM_DIR/$XEN_VM_NAME/disk1.img
            echo "file:$OPENQRM_VM_DIR/$XEN_VM_NAME/disk1.img,ioemu:hda,w" > $XEN_VM_BASE_DIR/disk1
            echo "$XEN_VM_DISK" > $XEN_VM_BASE_DIR/disksize1
		fi
		# swap
		if [ "$XEN_VM_SWAP" != "" ]; then
			echo "-> Creating swap"
			dd if=/dev/zero of=$OPENQRM_VM_DIR/$XEN_VM_NAME/swap.img bs=1M seek=$XEN_VM_SWAP count=1
			mkswap -f $OPENQRM_VM_DIR/$XEN_VM_NAME/swap.img
            echo "file:$OPENQRM_VM_DIR/$XEN_VM_NAME/swap.img,hdd,w" > $XEN_VM_BASE_DIR/swap
            echo "$XEN_VM_SWAP" > $XEN_VM_BASE_DIR/swapsize
		fi

		# nic1
		if [ "$XEN_VM_MAC2" != "" ]; then
			echo "-> Creating additional nic $XEN_VM_MAC2"
            echo "$XEN_VM_MAC2" > $XEN_VM_BASE_DIR/mac2
            echo "$OPENQRM_PLUGIN_XEN_EXTERNAL_BRIDGE" > $XEN_VM_BASE_DIR/bridge2
		fi
		# nic2
		if [ "$XEN_VM_MAC3" != "" ]; then
			echo "-> Creating additional nic $XEN_VM_MAC3"
            echo "$XEN_VM_MAC3" > $XEN_VM_BASE_DIR/mac3
            echo "$OPENQRM_PLUGIN_XEN_EXTERNAL_BRIDGE" > $XEN_VM_BASE_DIR/bridge3
		fi
		# nic3
		if [ "$XEN_VM_MAC4" != "" ]; then
			echo "-> Creating additional nic $XEN_VM_MAC4"
            echo "$XEN_VM_MAC4" > $XEN_VM_BASE_DIR/mac4
            echo "$OPENQRM_PLUGIN_XEN_EXTERNAL_BRIDGE" > $XEN_VM_BASE_DIR/bridge4
		fi
		# nic4
		if [ "$XEN_VM_MAC5" != "" ]; then
			echo "-> Creating additional nic $XEN_VM_MAC5"
            echo "$XEN_VM_MAC5" > $XEN_VM_BASE_DIR/mac5
            echo "$OPENQRM_PLUGIN_XEN_EXTERNAL_BRIDGE" > $XEN_VM_BASE_DIR/bridge5
		fi

		# creating the cfg
        xen_generate_vm_config $XEN_VM_NAME
        # start it
		SCREEN_NAME=`date +%T%x | sed -e "s/://g" | sed -e "s#/##g"`
		if $RUNSCREEN -dmS $SCREEN_NAME xm create -f $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$XEN_VM_NAME.cfg; then
            openqrm_post_event 0 "create" 5 "openqrm-xen" "Created and started Xen vm $XEN_VM_NAME -> $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$XEN_VM_NAME.cfg"
        else
            openqrm_post_event 0 "create" 3 "openqrm-xen" "Could not create Xen vm $XEN_VM_NAME -> $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$XEN_VM_NAME.cfg"
    		xen_lock release
            exit 1
        fi
        touch $OPENQRM_VM_DIR/$XEN_VM_NAME/autostart
		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;
	start)
		xen_lock aquire
		echo "Starting Xen vm $XEN_VM_NAME"
		SCREEN_NAME=`date +%T%x | sed -e "s/://g" | sed -e "s#/##g"`
		if $RUNSCREEN -dmS $SCREEN_NAME xm create -f $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$XEN_VM_NAME.cfg; then
            openqrm_post_event 0 "create" 5 "openqrm-xen" "Created and started Xen vm $XEN_VM_NAME -> $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$XEN_VM_NAME.cfg"
        else
            openqrm_post_event 0 "create" 3 "openqrm-xen" "Could not create Xen vm $XEN_VM_NAME -> $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$XEN_VM_NAME.cfg"
    		xen_lock release
            exit 1
        fi
        touch $OPENQRM_VM_DIR/$XEN_VM_NAME/autostart
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;
	stop)
		xen_lock aquire
		echo "Stopping Xen vm $XEN_VM_NAME"
        rm -f $OPENQRM_VM_DIR/$XEN_VM_NAME/autostart
		if xm shutdown $XEN_VM_NAME; then
    		openqrm_post_event 0 "stop" 5 "openqrm-xen" "Stopped Xen vm $XEN_VM_NAME"
        else
            if xm destroy $XEN_VM_NAME; then
                openqrm_post_event 0 "kill" 5 "openqrm-xen" "Forced stop Xen vm $XEN_VM_NAME"
            else
                openqrm_post_event 0 "kill" 3 "openqrm-xen" "Cloud not force stop Xen vm $XEN_VM_NAME"
                xen_lock release
                exit 1
            fi
        fi
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;
	reboot)
		xen_lock aquire
		echo "Rebooting Xen vm $XEN_VM_NAME"
		# creating the cfg
        xen_generate_vm_config $XEN_VM_NAME
		if xm reboot $XEN_VM_NAME; then
            openqrm_post_event 0 "reboot" 5 "openqrm-xen" "Rebooted Xen vm $XEN_VM_NAME"
        else
            openqrm_post_event 0 "reboot" 3 "openqrm-xen" "Could not reboot Xen vm $XEN_VM_NAME"
    		xen_lock release
            exit 1
        fi
        touch $OPENQRM_VM_DIR/$XEN_VM_NAME/autostart
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;
	remove)
		xen_lock aquire
		echo "Deleting Xen vm $XEN_VM_NAME"
        xm destroy $XEN_VM_NAME 1>/dev/null 2>&1
		rm -f $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$XEN_VM_NAME.*
		if rm -rf $OPENQRM_VM_DIR/$XEN_VM_NAME; then
            openqrm_post_event 0 "delete" 5 "openqrm-xen" "Deleted Xen vm $XEN_VM_NAME"
        else
            openqrm_post_event 0 "delete" 3 "openqrm-xen" "Could not delete Xen vm $XEN_VM_NAME"
    		xen_lock release
            exit 1
        fi
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;
	migrate)
		xen_lock aquire
		echo "Migrating Xen vm $XEN_VM_NAME to $XEN_VM_IP ($XEN_MIGRATION_TYPE)"
		if [ "$XEN_MIGRATION_TYPE" == "live" ]; then
   			if xm migrate $XEN_VM_NAME $XEN_VM_IP -l; then
            	openqrm_post_event 0 "migrate" 5 "openqrm-xen" "Migrated Xen vm $XEN_VM_NAME to $XEN_VM_IP"
            else
            	openqrm_post_event 0 "migrate" 3 "openqrm-xen" "Cloud not migrate Xen vm $XEN_VM_NAME to $XEN_VM_IP"
                xen_lock release
                exit 1
            fi
		else
			if xm migrate $XEN_VM_NAME $XEN_VM_IP; then
            	openqrm_post_event 0 "migrate" 5 "openqrm-xen" "Migrated Xen vm $XEN_VM_NAME to $XEN_VM_IP"
            else
            	openqrm_post_event 0 "migrate" 3 "openqrm-xen" "Cloud not migrate Xen vm $XEN_VM_NAME to $XEN_VM_IP"
                xen_lock release
                exit 1
            fi
		fi
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;
	list)
		echo "Listing Xen vms"
		xm list
		;;
	post_vm_list)
		echo "Posting vm list to the openQRM-server"
		VM_LIST_TMP=$resource_id.vm_list
		xm list | grep -v ^Name | grep Domain.*0 | sed -e "s/^ *//;s/ *$/@/;s/ \{1,\}/@/g" > $VM_LIST_TMP

        # gather informations from the not active xen vms
        for cfg in `ls $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/*.cfg 2>/dev/null`; do
            VML_NAME=`basename $cfg | sed -e 's#.cfg$##g'`
            XEN_VM_BASE_DIR=$OPENQRM_VM_DIR/$VML_NAME
            # running ?
            if ps ax | grep qemu-dm | grep xen | grep $VML_NAME > /dev/null; then
                VM_ONLINE=1
            elif xm list |grep $VML_NAME > /dev/null; then
                VM_ONLINE=1
            else
                VM_ONLINE=0
            fi
            # check if created with openQRM or manually
            if [ -f $XEN_VM_BASE_DIR/memory ]; then
                VM_MEMORY=`cat $XEN_VM_BASE_DIR/memory`
                VM_MAC1=`cat $XEN_VM_BASE_DIR/mac1`
                VM_BRIDGE1=`cat $XEN_VM_BASE_DIR/bridge1`
                VM_VNC=`cat $XEN_VM_BASE_DIR/vncdisplay`
                echo "1@$VML_NAME""@""$VM_MEMORY""@""$VM_MAC1""@""$VM_BRIDGE1""@""$VM_VNC""@""$VM_ONLINE" >> $VM_LIST_TMP
            else
                VM_MEMORY=`cat $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$VML_NAME.cfg | grep ^memory | cut -d'=' -f2 | sed -e "s/ //g" | sed -e "s/\"//g"`
                VM_MAC1=`cat $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$VML_NAME.cfg | grep ^vif | grep mac | sed -e "s/.*mac=[[:space:]]*\([0-9a-fA-F:]\+\).*/\1/g"`
                VM_BRIDGE1=`cat $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$VML_NAME.cfg | grep ^vif | grep mac | sed -e "s/.*bridge=[[:space:]]*\([[:alnum:]]\+\).*/\1/g"`
                VM_VNC="n.a."
                echo "0@$VML_NAME""@""$VM_MEMORY""@""$VM_MAC1""@""$VM_BRIDGE1""@""$VM_VNC""@""$VM_ONLINE" >> $VM_LIST_TMP
            fi
        done

        # post the file
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$XEN_OPENQRM_USERNAME --http-password=$XEN_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $VM_LIST_TMP` $openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/xen/xen-action.php?xen_command=get_xen; then
			echo "ERROR: Could not post vm list to the openQRM-server at $resource_openqrmserver!"
			echo "ERROR: Could not post vm list to the openQRM-server at $resource_openqrmserver!" | logger
    		openqrm_post_event 0 "post_vm_list" 3 "openqrm-xen" "Could not post vm list to the openQRM-server at $resource_openqrmserver!"
		fi
		rm -f $VM_LIST_TMP
		rm -f $VM_LIST_TMP.post
		;;

	post_vm_config)
		if [ "$XEN_VM_NAME" == "" ]; then
			xen_usage
		fi
		echo "Posting vm config for $XEN_VM_NAME to the openQRM-server"
		VM_CONFIG_TMP=$resource_id.$XEN_VM_NAME.vm_config
        VM_BASE_DIR=$OPENQRM_VM_DIR/$XEN_VM_NAME
        vm_memory=`cat $VM_BASE_DIR/memory 2>/dev/null`
        vm_cpu=`cat $VM_BASE_DIR/vcpu 2>/dev/null`
        vm_mac1=`cat $VM_BASE_DIR/mac1 2>/dev/null`
        vm_bridge1=`cat $VM_BASE_DIR/bridge1 2>/dev/null`
        vm_mac2=`cat $VM_BASE_DIR/mac2 2>/dev/null`
        vm_bridge2=`cat $VM_BASE_DIR/bridge2 2>/dev/null`
        vm_mac3=`cat $VM_BASE_DIR/mac3 2>/dev/null`
        vm_bridge3=`cat $VM_BASE_DIR/bridge3 2>/dev/null`
        vm_mac4=`cat $VM_BASE_DIR/mac4 2>/dev/null`
        vm_bridge4=`cat $VM_BASE_DIR/bridge4 2>/dev/null`
        vm_mac5=`cat $VM_BASE_DIR/mac5 2>/dev/null`
        vm_bridge5=`cat $VM_BASE_DIR/bridge5 2>/dev/null`
        vm_swap=`cat $VM_BASE_DIR/swap 2>/dev/null`
        vm_swapsize=`cat $VM_BASE_DIR/swapsize 2>/dev/null`
        vm_disk1=`cat $VM_BASE_DIR/disk1 2>/dev/null`
        vm_disksize1=`cat $VM_BASE_DIR/disksize1 2>/dev/null`
        vm_disk2=`cat $VM_BASE_DIR/disk2 2>/dev/null`
        vm_disksize2=`cat $VM_BASE_DIR/disksize2 2>/dev/null`
        vm_disk3=`cat $VM_BASE_DIR/disk3 2>/dev/null`
        vm_disksize3=`cat $VM_BASE_DIR/disksize3 2>/dev/null`
        vm_vnc_display=`cat $VM_BASE_DIR/vncdisplay`
		echo "OPENQRM_XEN_VM_RAM=\"$vm_memory\"" > $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_CPU=\"$vm_cpu\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_NET_1=\"$vm_bridge1\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_MAC_1=\"$vm_mac1\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_NET_2=\"$vm_bridge2\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_MAC_2=\"$vm_mac2\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_NET_3=\"$vm_bridge3\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_MAC_3=\"$vm_mac3\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_NET_4=\"$vm_bridge4\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_MAC_4=\"$vm_mac4\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_NET_5=\"$vm_bridge5\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_MAC_5=\"$vm_mac5\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_SWAP=\"$vm_swap\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_SWAPSIZE=\"$vm_swapsize\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_DISK_1=\"$vm_disk1\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_DISK_SIZE_1=\"$vm_disksize1\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_DISK_2=\"$vm_disk2\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_DISK_SIZE_2=\"$vm_disksize2\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_DISK_3=\"$vm_disk3\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_DISK_SIZE_3=\"$vm_disksize3\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_XEN_VM_VNC=\"$vm_vnc_display\"" >> $VM_CONFIG_TMP
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$XEN_OPENQRM_USERNAME --http-password=$XEN_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $VM_CONFIG_TMP` $openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/xen/xen-action.php?xen_command=get_xen_config; then
			echo "ERROR: Could not post vm config to the openQRM-server at $OPENQRM_SERVER_IP!"
			echo "ERROR: Could not post vm config to the openQRM-server at $OPENQRM_SERVER_IP!" | logger
		fi
		rm -f $VM_CONFIG_TMP
		rm -f $VM_CONFIG_TMP.post
		;;


	update_vm_ram)
		if [ "$XEN_VM_NAME" == "" ]; then
			xen_usage
		fi
		if [ "$XEN_VM_RAM" == "" ]; then
			xen_usage
		fi
		xen_lock aquire
		echo "Updating XEN vm $XEN_VM_NAME with $XEN_VM_RAM Memory"
        VM_BASE_DIR=$OPENQRM_VM_DIR/$XEN_VM_NAME
        echo "$XEN_VM_RAM" > $VM_BASE_DIR/memory
		# creating the cfg
        xen_generate_vm_config $XEN_VM_NAME
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_config -n $XEN_VM_NAME -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;

	update_vm_cpu)
		if [ "$XEN_VM_NAME" == "" ]; then
			xen_usage
		fi
		if [ "$XEN_VM_CPU" == "" ]; then
			xen_usage
		fi
		xen_lock aquire
		echo "Updating XEN vm $XEN_VM_NAME with $XEN_VM_CPU CPUs"
        VM_BASE_DIR=$OPENQRM_VM_DIR/$XEN_VM_NAME
        echo "$XEN_VM_CPU" > $VM_BASE_DIR/vcpu
		# creating the cfg
        xen_generate_vm_config $XEN_VM_NAME
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_config -n $XEN_VM_NAME -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;


	add_vm_nic)
		if [ "$XEN_VM_NAME" == "" ]; then
			xen_usage
		fi
		if [ "$XEN_VM_MAC" == "" ]; then
			xen_usage
		fi
		if [ "$XEN_VM_COMPONENT_NUMBER" == "" ]; then
			xen_usage
		fi
		xen_lock aquire
		echo "Adding nic $XEN_VM_COMPONENT_NUMBER mac-address $XEN_VM_MAC to XEN vm $XEN_VM_NAME"
        VM_BASE_DIR=$OPENQRM_VM_DIR/$XEN_VM_NAME
        echo "$XEN_VM_MAC" > $VM_BASE_DIR/mac$XEN_VM_COMPONENT_NUMBER
        echo "$OPENQRM_PLUGIN_XEN_EXTERNAL_BRIDGE" > $VM_BASE_DIR/bridge$XEN_VM_COMPONENT_NUMBER
		# creating the cfg
        xen_generate_vm_config $XEN_VM_NAME
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_config -n $XEN_VM_NAME -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;
	remove_vm_nic)
		if [ "$XEN_VM_NAME" == "" ]; then
			xen_usage
		fi
		if [ "$XEN_VM_COMPONENT_NUMBER" == "" ]; then
			xen_usage
		fi
		xen_lock aquire
		echo "Removing nic $XEN_VM_COMPONENT_NUMBER from XEN vm $XEN_VM_NAME"
        VM_BASE_DIR=$OPENQRM_VM_DIR/$XEN_VM_NAME
        > $VM_BASE_DIR/mac$XEN_VM_COMPONENT_NUMBER
        > $VM_BASE_DIR/bridge$XEN_VM_COMPONENT_NUMBER
		# creating the cfg
        xen_generate_vm_config $XEN_VM_NAME
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_config -n $XEN_VM_NAME -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;


	add_vm_disk)
		if [ "$XEN_VM_NAME" == "" ]; then
			xen_usage
		fi
		if [ "$XEN_VM_DISK" == "" ]; then
			xen_usage
		fi
		if [ "$XEN_VM_COMPONENT_NUMBER" == "" ]; then
			xen_usage
		fi
		xen_lock aquire
        DISK_NAME=`get_disk_name $XEN_VM_COMPONENT_NUMBER`
		echo "Adding disk $XEN_VM_COMPONENT_NUMBER size $XEN_VM_DISK to XEN vm $XEN_VM_NAME"
        VM_BASE_DIR=$OPENQRM_VM_DIR/$XEN_VM_NAME
        dd if=/dev/zero of=$OPENQRM_VM_DIR/$XEN_VM_NAME/disk$XEN_VM_COMPONENT_NUMBER.img bs=1M seek=$XEN_VM_DISK count=1
        mkfs.ext3 -F $OPENQRM_VM_DIR/$XEN_VM_NAME/disk$XEN_VM_COMPONENT_NUMBER.img
        echo "file:$OPENQRM_VM_DIR/$XEN_VM_NAME/disk$XEN_VM_COMPONENT_NUMBER.img,ioemu:$DISK_NAME,w" > $VM_BASE_DIR/disk$XEN_VM_COMPONENT_NUMBER
        echo "$XEN_VM_DISK" > $VM_BASE_DIR/disksize$XEN_VM_COMPONENT_NUMBER
		# creating the cfg
        xen_generate_vm_config $XEN_VM_NAME
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_config -n $XEN_VM_NAME -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;
	remove_vm_disk)
		if [ "$XEN_VM_NAME" == "" ]; then
			xen_usage
		fi
		if [ "$XEN_VM_COMPONENT_NUMBER" == "" ]; then
			xen_usage
		fi
		xen_lock aquire
		echo "Removing disk $XEN_VM_COMPONENT_NUMBER from XEN vm $XEN_VM_NAME"
        VM_BASE_DIR=$OPENQRM_VM_DIR/$XEN_VM_NAME
        > $VM_BASE_DIR/disk$XEN_VM_COMPONENT_NUMBER
        > $VM_BASE_DIR/disksize$XEN_VM_COMPONENT_NUMBER
		rm -f $OPENQRM_VM_DIR/$XEN_VM_NAME/disk$XEN_VM_COMPONENT_NUMBER.img
		# creating the cfg
        xen_generate_vm_config $XEN_VM_NAME
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_config -n $XEN_VM_NAME -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;

	setboot)
        unset XEN_VM_NAME
		if [ "$XEN_VM_MAC" == "" ]; then
            echo "openQRM Xen-plugin: ERROR during setboot. No mac-address given" | logger
			xen_usage
		fi
		if [ "$XEN_VM_BOOT" == "" ]; then
            echo "openQRM Xen-plugin: ERROR during setboot. No boot param given" | logger
			xen_usage
		fi
		xen_lock aquire
		echo "Setting vm with mac $XEN_VM_MAC to boot from $XEN_VM_BOOT"
        echo "openQRM Xen-plugin: Setting vm with mac $XEN_VM_MAC to boot from $XEN_VM_BOOT" | logger
        # this command is is running from the openQRM engine which does
        # not know about the xen-name
        for XEN_VM_NET_CONF in `find $OPENQRM_VM_DIR/ -name mac1`; do
            XEN_VM_MAC_1=`cat $XEN_VM_NET_CONF 2>/dev/null`
            if [ "$XEN_VM_MAC_1" == "$XEN_VM_MAC" ]; then
                XEN_VM_NAME=`dirname $XEN_VM_NET_CONF`
                XEN_VM_NAME=`basename $XEN_VM_NAME`
                break
            fi
        done
        if [ "$XEN_VM_NAME" == "" ]; then
    		echo "Cloud not find Xen vm with mac $XEN_VM_MAC on this host"
            echo "openQRM Xen-plugin: ERROR: Cloud not find Xen vm with mac $XEN_VM_MAC on this host" | logger
            exit 1
        fi
        case "$XEN_VM_BOOT" in
            local)
                echo "c" > $OPENQRM_VM_DIR/$XEN_VM_NAME/boot
                ;;
            net)
                echo "n" > $OPENQRM_VM_DIR/$XEN_VM_NAME/boot
                ;;
        esac
		# hard restart it to apply its configuration
        # we do it here because the openQRM server engine does not
        # know anything about the vm name to restart it later
        if xm destroy $XEN_VM_NAME; then
            openqrm_post_event 0 "setboot" 5 "openqrm-xen" "Forced stop for re-starting Xen vm $XEN_VM_NAME"
        else
            openqrm_post_event 0 "setboot" 3 "openqrm-xen" "Cloud not force stop Xen vm $XEN_VM_NAME. Trying to continue .."
        fi
		# creating the cfg
        xen_generate_vm_config $XEN_VM_NAME
        # start it
		SCREEN_NAME=`date +%T%x | sed -e "s/://g" | sed -e "s#/##g"`
		if $RUNSCREEN -dmS $SCREEN_NAME xm create -f $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$XEN_VM_NAME.cfg; then
           openqrm_post_event 0 "setboot" 5 "openqrm-xen" "Re-started Xen vm $XEN_VM_NAME -> $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$XEN_VM_NAME.cfg"
        else
            openqrm_post_event 0 "setboot" 3 "openqrm-xen" "Could not re-start Xen vm $XEN_VM_NAME -> $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$XEN_VM_NAME.cfg"
            echo "openQRM Xen-plugin: ERROR: Could not re-start Xen vm $XEN_VM_NAME -> $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$XEN_VM_NAME.cfg" | logger
    		xen_lock release
            exit 1
        fi
		xen_lock release
        exit 0
		;;
	*)
		xen_usage
		;;


esac

