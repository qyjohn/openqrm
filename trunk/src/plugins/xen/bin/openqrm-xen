#!/bin/bash


# this script automatically manages xen
OPENQRM_SERVER_BASE_DIR=$(dirname $0)/../../../..
OPENQRM_SERVER_BASE_DIR=$(pushd $OPENQRM_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/xen/include/openqrm-plugin-xen-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/xen/etc/openqrm-plugin-xen.conf
if [ -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf ]; then
	. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
	. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions
	openqrm_server_get_config
	OPENQRM_SERVER_IP=$OPENQRM_SERVER_IP_ADDRESS
	OPENQRM_INTERFACE=$OPENQRM_SERVER_INTERFACE
	resource_id=0
	resource_openqrmserver=$OPENQRM_SERVER_IP_ADDRESS

elif [ -f $OPENQRM_RESOURCE_PARAMETER_FILE ]; then
	. $OPENQRM_RESOURCE_PARAMETER_FILE
	OPENQRM_SERVER_IP=$resource_openqrmserver
	OPENQRM_INTERFACE=`ifconfig | grep -i $resource_mac | grep :oq | cut -d':' -f1`

fi
OPENQRM_POSTENCODE="$OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-postencode.py"
OPENQRM_XEN_VM_TEMPLATE="$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/xen/etc/templates/openqrm-xen-vm"
# the directory to keep the vm files for vms created by openQRM
OPENQRM_VM_DIR="/var/lib/xen/openqrm/"
# which directory to use for the xen vms -> set by the plugin config file
if [ -d "$OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR" ]; then
    mkdir -p $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR
fi
export LANG=C


# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	echo "ERROR: Please run this script as root!"
	exit 6
fi
# check interface
if [ "$OPENQRM_INTERFACE" == "" ]; then
	# we are doing a local boot and do not have an ethX:oq network device
	OPENQRM_INTERFACE=`ifconfig | grep $resource_mac | cut -d':' -f1 | grep ^eth | awk {' print $1 '}`
	if [ "$OPENQRM_INTERFACE" == "" ]; then
		echo "ERROR: Could not find out which network interface to use"
		exit 1
	fi
fi



function xen_usage() {
	echo "Usage : $0 start/stop/reboot/kill/add/delete/remove/list <-n vm-name>"
	echo "Usage : $0 create <-n vm-name> <-m mac-address> <-i ip-address> <-r memory> [-d disk-size -s swap-size]"
	echo "Usage : $0 migrate <-n vm-name> <-i ip-address> <-t live/regular>"
	echo "        $0 post_vm_list <-u username> <-p password>"
	exit 1
}



function xen_generate_vm_config() {
    VM_NAME=$1
    VM_BASE_DIR=$OPENQRM_VM_DIR/$VM_NAME
    # source the components config
    vm_kernel=`cat $VM_BASE_DIR/kernel`
    vm_builder=`cat $VM_BASE_DIR/builder`
    vm_memory=`cat $VM_BASE_DIR/memory`
    vm_device_model=`cat $VM_BASE_DIR/device_model`
    vm_name=`cat $VM_BASE_DIR/name`
    vm_mac1=`cat $VM_BASE_DIR/mac1`
    vm_bridge1=`cat $VM_BASE_DIR/bridge1`
    vm_mac2=`cat $VM_BASE_DIR/mac2`
    vm_bridge2=`cat $VM_BASE_DIR/bridge2`
    vm_mac3=`cat $VM_BASE_DIR/mac3`
    vm_bridge3=`cat $VM_BASE_DIR/bridge3`
    vm_mac4=`cat $VM_BASE_DIR/mac4`
    vm_bridge4=`cat $VM_BASE_DIR/bridge4`
    vm_boot=`cat $VM_BASE_DIR/boot`
    vm_root=`cat $VM_BASE_DIR/root`
    vm_swap=`cat $VM_BASE_DIR/swap`
    vm_disk1=`cat $VM_BASE_DIR/disk1`
    vm_vnc=`cat $VM_BASE_DIR/vnc`
    vm_vncviewer=`cat $VM_BASE_DIR/vncviewer`
    vm_vnc_display=`cat $VM_BASE_DIR/vncdisplay`
    vm_sdl=`cat $VM_BASE_DIR/sdl`


    > $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$VM_NAME.cfg
    cat >> $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$VM_NAME.cfg << EOF
kernel = "$vm_kernel"
builder = "$vm_builder"
memory = "$vm_memory"
device_model="$vm_device_model"
name = "$vm_name"
vif = ["mac=$vm_mac1, type=ioemu, bridge=$vm_bridge1"]
boot="$vm_boot"
vnc=$vm_vnc
vncviewer=$vm_vncviewer
vncdisplay=$vm_vnc_display
sdl=$vm_sdl
EOF

    ADD_DISK=false
    if [ "$vm_disk1" != "" ]; then
        VM_DISK_CONF="$VM_DISK_CONF \"$vm_disk1\","
        ADD_DISK=true
        cat >> $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$VM_NAME.cfg << EOF
root = "$vm_root"
EOF
    fi
    if [ "$vm_swap" != "" ]; then
        VM_DISK_CONF="$VM_DISK_CONF \"$vm_swap\","
        ADD_DISK=true
    fi

    if [ "$ADD_DISK" == "true" ]; then
        cat >> $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$VM_NAME.cfg << EOF
disk = [ $VM_DISK_CONF ]
EOF
    fi

}




XEN_COMMAND=$1
shift

while [ $# -ne 0 ]; do
	case "$1" in
		-n)
			XEN_VM_NAME=$2
			shift
			;;
		-m)
			XEN_VM_MAC=$2
			shift
			;;
		-i)
			XEN_VM_IP=$2
			shift
			;;
		-r)
			XEN_VM_RAM=$2
			shift
			;;
		-d)
			XEN_VM_DISK=$2
			shift
			;;
		-s)
			XEN_VM_SWAP=$2
			shift
			;;
		-t)
			XEN_MIGRATION_TYPE=$2
			shift
			;;
		-u)
			XEN_OPENQRM_USERNAME=$2
			shift
			;;
		-p)
			XEN_OPENQRM_PASSWORD=$2
			shift
			;;
		*)
			echo "ERROR: Free commandline arguments are not allowed"
			xen_usage
			exit 6
			;;
	esac
	shift
done




# main
if [ "$XEN_COMMAND" == "" ]; then
	xen_usage
fi

if [ "$XEN_COMMAND" == "post_vm_list" ]; then
		if [ "$XEN_OPENQRM_USERNAME" == "" ]; then
			xen_usage
		fi
		if [ "$XEN_OPENQRM_PASSWORD" == "" ]; then
			xen_usage
		fi
else

	if [ "$XEN_COMMAND" != "list" ]; then
		if [ "$XEN_VM_NAME" == "" ]; then
			xen_usage
		fi
	fi
fi


case "$XEN_COMMAND" in 

	create)
		if [ "$XEN_VM_MAC" == "" ]; then
			xen_usage
		fi
		if [ "$XEN_VM_IP" == "" ]; then
			xen_usage
		fi
		if [ "$XEN_VM_RAM" == "" ]; then
			xen_usage
		fi
		xen_lock aquire
		echo "Creating Xen vm $XEN_VM_NAME -> /etc/xen/$XEN_VM_NAME.cfg"
		# find the hvmloader
		HVM_LOADER=`find /usr/lib/xen* -name hvmloader | head -n1`
		QEMU_DM=`find /usr/lib/xen* -name qemu-dm | head -n1`
		if [ "$HVM_LOADER" == "" ]; then
            openqrm_post_event 0 "create" 3 "openqrm-xen" "Could not find the hvmloader on this Xen system. Please make sure to install it!"
    		xen_lock release
            exit 1
		fi
		if [ "$QEMU_DM" == "" ]; then
            openqrm_post_event 0 "create" 3 "openqrm-xen" "Could not find the qemu-dm on this Xen system. Please make sure to install it!"
    		xen_lock release
            exit 1
		fi

        XEN_VM_BASE_DIR=$OPENQRM_VM_DIR/$XEN_VM_NAME
        mkdir -p $XEN_VM_BASE_DIR
        echo "$XEN_VM_NAME" > $XEN_VM_BASE_DIR/name
        echo "$HVM_LOADER" > $XEN_VM_BASE_DIR/kernel
        echo "$XEN_VM_RAM" > $XEN_VM_BASE_DIR/memory
        echo "hvm" > $XEN_VM_BASE_DIR/builder
        echo "$QEMU_DM" > $XEN_VM_BASE_DIR/device_model
        echo "$XEN_VM_MAC" > $XEN_VM_BASE_DIR/mac1
        echo "$OPENQRM_PLUGIN_XEN_INTERNAL_BRIDGE" > $XEN_VM_BASE_DIR/bridge1
        echo "" > $XEN_VM_BASE_DIR/mac2
        echo "$OPENQRM_PLUGIN_XEN_EXTERNAL_BRIDGE" > $XEN_VM_BASE_DIR/bridge2
        echo "" > $XEN_VM_BASE_DIR/mac3
        echo "$OPENQRM_PLUGIN_XEN_EXTERNAL_BRIDGE" > $XEN_VM_BASE_DIR/bridge3
        echo "" > $XEN_VM_BASE_DIR/mac4
        echo "$OPENQRM_PLUGIN_XEN_EXTERNAL_BRIDGE" > $XEN_VM_BASE_DIR/bridge4
        echo "n" > $XEN_VM_BASE_DIR/boot
        echo "1" > $XEN_VM_BASE_DIR/vnc
        echo "1" > $XEN_VM_BASE_DIR/vncviewer
        echo "0" > $XEN_VM_BASE_DIR/sdl

        # find the next free vncdisplay
        for VNCD in `find $OPENQRM_VM_DIR/* -name vncdisplay 2>/dev/null`; do
                NVNCD=`cat $VNCD`
                VNCD_LIST="$VNCD_LIST $NVNCD"

        done
        for TVNCD in `echo $VNCD_LIST | sort`; do
                :
        done
        NEW_VNCD=$(( TVNCD + 1 ))
        echo "$NEW_VNCD" > $XEN_VM_BASE_DIR/vncdisplay

		# disk
		if [ "$XEN_VM_DISK" != "" ]; then
			echo "-> Creating disk"
			dd if=/dev/zero of=$OPENQRM_VM_DIR/$XEN_VM_NAME/disk1.img bs=1M seek=$XEN_VM_DISK count=1
			mkfs.ext3 -F $OPENQRM_VM_DIR/$XEN_VM_NAME/disk1.img
            echo "/dev/hda1 ro" > $XEN_VM_BASE_DIR/root
            echo "file:$OPENQRM_VM_DIR/$XEN_VM_NAME/disk1.img,ioemu:hda1,w" > $XEN_VM_BASE_DIR/disk1
		fi
		# swap
		if [ "$XEN_VM_SWAP" != "" ]; then
			echo "-> Creating swap"
			dd if=/dev/zero of=$OPENQRM_VM_DIR/$XEN_VM_NAME/swap.img bs=1M seek=$XEN_VM_SWAP count=1
			mkswap -f $OPENQRM_VM_DIR/$XEN_VM_NAME/swap.img
            echo "file:$OPENQRM_VM_DIR/$XEN_VM_NAME/swap.img,hda2,w" > $XEN_VM_BASE_DIR/swap
		fi

		# creating the cfg
        xen_generate_vm_config $XEN_VM_NAME

		xm new $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$XEN_VM_NAME.cfg
		SCREEN_NAME=`date +%T%x | sed -e "s/://g" | sed -e "s#/##g"`
		if screen -dmS $SCREEN_NAME xm start $XEN_VM_NAME; then
            openqrm_post_event 0 "create" 5 "openqrm-xen" "Created and started Xen vm $XEN_VM_NAME -> /etc/xen/$XEN_VM_NAME.cfg"
      else
         openqrm_post_event 0 "create" 3 "openqrm-xen" "Could not create Xen vm $XEN_VM_NAME -> /etc/xen/$XEN_VM_NAME.cfg"
    		xen_lock release
            exit 1
        fi

		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;
	add)
		xen_lock aquire
		echo "Adding Xen vm $XEN_VM_NAME"
		if xm new $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$XEN_VM_NAME.cfg; then
            openqrm_post_event 0 "add" 5 "openqrm-xen" "Added Xen vm $XEN_VM_NAME to the Xen domain-management"
        else
            openqrm_post_event 0 "add" 3 "openqrm-xen" "Cloud not add Xen vm $XEN_VM_NAME to the Xen domain-management"
    		xen_lock release
            exit 1
        fi
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;
	start)
		xen_lock aquire
		echo "Starting Xen vm $XEN_VM_NAME"
		SCREEN_NAME=`date +%T%x | sed -e "s/://g" | sed -e "s#/##g"`
		if screen -dmS $SCREEN_NAME xm start $XEN_VM_NAME; then
            openqrm_post_event 0 "start" 5 "openqrm-xen" "Started Xen vm $XEN_VM_NAME"
        else
            openqrm_post_event 0 "start" 3 "openqrm-xen" "Coud not start Xen vm $XEN_VM_NAME"
    		xen_lock release
            exit 1
        fi
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;
	stop)
		xen_lock aquire
		echo "Stopping Xen vm $XEN_VM_NAME"
		if xm shutdown $XEN_VM_NAME; then
    		openqrm_post_event 0 "stop" 5 "openqrm-xen" "Stopped Xen vm $XEN_VM_NAME"
        else
    		openqrm_post_event 0 "stop" 3 "openqrm-xen" "Coud not stop Xen vm $XEN_VM_NAME"
    		xen_lock release
            exit 1
        fi
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;
	kill)
		xen_lock aquire
		echo "Force-stop Xen vm $XEN_VM_NAME"
		if xm destroy $XEN_VM_NAME; then
            openqrm_post_event 0 "kill" 5 "openqrm-xen" "Forced stop Xen vm $XEN_VM_NAME"
        else
            openqrm_post_event 0 "kill" 3 "openqrm-xen" "Cloud not force stop Xen vm $XEN_VM_NAME"
    		xen_lock release
            exit 1
        fi
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;
	reboot)
		xen_lock aquire
		echo "Rebooting Xen vm $XEN_VM_NAME"
		# creating the cfg
        xen_generate_vm_config $XEN_VM_NAME
		if xm reboot $XEN_VM_NAME; then
            openqrm_post_event 0 "reboot" 5 "openqrm-xen" "Rebooted Xen vm $XEN_VM_NAME"
        else
            openqrm_post_event 0 "reboot" 3 "openqrm-xen" "Could not reboot Xen vm $XEN_VM_NAME"
    		xen_lock release
            exit 1
        fi
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;
	remove)
		xen_lock aquire
		echo "Removing Xen vm $XEN_VM_NAME"
		if xm delete $XEN_VM_NAME; then
            openqrm_post_event 0 "remove" 5 "openqrm-xen" "Removed Xen vm $XEN_VM_NAME"
        else
            openqrm_post_event 0 "remove" 3 "openqrm-xen" "Could not remove Xen vm $XEN_VM_NAME"
    		xen_lock release
            exit 1
        fi
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;
	delete)
		xen_lock aquire
		echo "Deleting Xen vm $XEN_VM_NAME"
		rm -f $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$XEN_VM_NAME.*
		if rm -rf $OPENQRM_VM_DIR/$XEN_VM_NAME; then
            openqrm_post_event 0 "delete" 5 "openqrm-xen" "Deleted Xen vm $XEN_VM_NAME"
        else
            openqrm_post_event 0 "delete" 3 "openqrm-xen" "Cloud not delete Xen vm $XEN_VM_NAME"
    		xen_lock release
            exit 1
        fi
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;
	migrate)
		xen_lock aquire
		echo "Migrating Xen vm $XEN_VM_NAME to $XEN_VM_IP ($XEN_MIGRATION_TYPE)"
		if [ "$XEN_MIGRATION_TYPE" == "live" ]; then
   			if xm migrate $XEN_VM_NAME $XEN_VM_IP -l; then
            	openqrm_post_event 0 "migrate" 5 "openqrm-xen" "Migrated Xen vm $XEN_VM_NAME to $XEN_VM_IP"
            else
            	openqrm_post_event 0 "migrate" 3 "openqrm-xen" "Cloud not migrate Xen vm $XEN_VM_NAME to $XEN_VM_IP"
                xen_lock release
                exit 1
            fi
		else
			if xm migrate $XEN_VM_NAME $XEN_VM_IP; then
            	openqrm_post_event 0 "migrate" 5 "openqrm-xen" "Migrated Xen vm $XEN_VM_NAME to $XEN_VM_IP"
            else
            	openqrm_post_event 0 "migrate" 3 "openqrm-xen" "Cloud not migrate Xen vm $XEN_VM_NAME to $XEN_VM_IP"
                xen_lock release
                exit 1
            fi
		fi
		if [ "$XEN_OPENQRM_USERNAME" != "" ] && [ "$XEN_OPENQRM_PASSWORD" != "" ]; then
			$0 post_vm_list -u $XEN_OPENQRM_USERNAME -p $XEN_OPENQRM_PASSWORD
		fi
		xen_lock release
		;;
	list)
		echo "Listing Xen vms"
		xm list
		;;
	post_vm_list)
		echo "Posting vm list to the openQRM-server"
		VM_LIST_TMP=$resource_id.vm_list
		xm list | grep -v ^Name | sed -e "s/^ *//;s/ *$/@/;s/ \{1,\}/@/g" > $VM_LIST_TMP
		# add #'s at the beginning to make later parsing easier
		sed -i -e "s/^/#/g" > $VM_LIST_TMP.up $VM_LIST_TMP

        # gather informations from the not active xen vms
        for cfg in `ls $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/*.cfg 2>/dev/null`; do
            VML_NAME=`basename $cfg | cut -d'.' -f1`
            XEN_VM_BASE_DIR=$OPENQRM_VM_DIR/$VML_NAME
            # check if created with openQRM or manually
            if [ -f $XEN_VM_BASE_DIR/memory ]; then
                VM_MEMORY=`cat $XEN_VM_BASE_DIR/memory`
                VM_MAC1=`cat $XEN_VM_BASE_DIR/mac1`
                VM_BRIDGE1=`cat $XEN_VM_BASE_DIR/bridge1`
                VM_VNC=`cat $XEN_VM_BASE_DIR/vncdisplay`
                echo "1@$VML_NAME""@""$VM_MEMORY""@""$VM_MAC1""@""$VM_BRIDGE1""@""$VM_VNC" >> $VM_LIST_TMP
            else
                VM_MEMORY=`cat $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$VML_NAME.cfg | grep ^memory | cut -d'=' -f2 | sed -e "s/ //g" | sed -e "s/\"//g"`
                VM_MAC1=`cat $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$VML_NAME.cfg | grep ^vif | grep mac | sed -e "s/.*mac=//g" | cut -d',' -f1
`               VM_BRIDGE1=`cat $OPENQRM_PLUGIN_XEN_VM_CONFIG_DIR/$VML_NAME.cfg | grep ^vif | grep mac | sed -e "s/.*bridge=//g" | cut -d'"' -f1`
                VM_VNC="n.a."
                echo "0@$VML_NAME""@""$VM_MEMORY""@""$VM_MAC1""@""$VM_BRIDGE1""@""$VM_VNC" >> $VM_LIST_TMP
            fi
        done

        # post the file
		if ! wget -q -O /dev/null --http-user=$XEN_OPENQRM_USERNAME --http-password=$XEN_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $VM_LIST_TMP` http://$OPENQRM_SERVER_IP/openqrm/base/plugins/xen/xen-action.php?xen_command=get_xen; then
			echo "ERROR: Could not post vm list to the openQRM-server at $resource_openqrmserver!"
			echo "ERROR: Could not post vm list to the openQRM-server at $resource_openqrmserver!" | logger
    		openqrm_post_event 0 "post_vm_list" 3 "openqrm-xen" "Could not post vm list to the openQRM-server at $resource_openqrmserver!"
		fi
		rm -f $VM_LIST_TMP
		rm -f $VM_LIST_TMP.post
		;;
	*)
		xen_usage
		;;


esac

