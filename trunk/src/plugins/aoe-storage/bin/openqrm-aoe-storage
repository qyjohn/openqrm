#!/bin/bash
#
# This file is part of openQRM.
#
# openQRM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# openQRM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with openQRM.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2009, Matthias Rechenburg <matt@openqrm.com>
#

# this script automatically manages aoe
OPENQRM_SERVER_BASE_DIR=$(dirname $0)/../../../..
OPENQRM_SERVER_BASE_DIR=$(pushd $OPENQRM_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/aoe-storage/include/openqrm-plugin-aoe-storage-functions
OPENQRM_POSTENCODE="$OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-postencode"
if [ -f $OPENQRM_RESOURCE_PARAMETER_FILE ]; then
	. $OPENQRM_RESOURCE_PARAMETER_FILE
	OPENQRM_SERVER_IP=$resource_openqrmserver
	OPENQRM_EXEC_PORT=$resource_execdport
elif [ -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf ]; then
	. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
	. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions
	openqrm_server_get_config
	OPENQRM_SERVER_IP=$OPENQRM_SERVER_IP_ADDRESS
	resource_id=0
	resource_openqrmserver=$OPENQRM_SERVER_IP_ADDRESS
    openqrm_web_protocol=$OPENQRM_WEB_PROTOCOL
fi
export LANG=C
# define wget to use with https
if [ "$openqrm_web_protocol" == "https" ]; then
	WGET_NO_CERT_CHECK="--no-check-certificate"
fi

# using the resource_id as the shelf-id
AOE_SHELF=$resource_id
export AOE_SHELF
# how long to wait for the volume authentication, each loop is 5 secs
MAX_VOLUME_AUTHENTICATION_LOOP=30
export MAX_VOLUME_AUTHENTICATION_LOOP

# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	echo "ERROR: Please run this script as root!"
	exit 6
fi



function aoe_storage_usage() {
	echo "Usage : $0 add/remove/snap/list <-n image-name> "
	echo "             [-m size in MB]"
	echo "             [-s image-snapshot-name]"
	echo "        $0 auth <-r image-rootdevice> <-i mac-address>"
	echo "        $0 post_luns <-u username> <-p password>"
	echo "        $0 post_identifier <-u username> <-p password>"
	exit 1
}



AOE_COMMAND=$1
shift

while [ $# -ne 0 ]; do
	case "$1" in
		-n)
			AOE_IMAGE_NAME=$2
			shift
			;;
		-s)
			AOE_IMAGE_SNAPSHOT_NAME=$2
			shift
			;;
		-m)
			AOE_IMAGE_SIZE=$2
			shift
			;;
		-i)
			AOE_IMAGE_AUTH_MAC=$2
			shift
			;;
		-r)
			AOE_IMAGE_ROOTDEVICE=$2
			shift
			;;
		-u)
			AOE_OPENQRM_USERNAME=$2
			shift
			;;
		-p)
			AOE_OPENQRM_PASSWORD=$2
			shift
			;;
		*)
			echo "ERROR: Free commandline arguments are not allowed"
			aoe_storage_usage
			exit 6
			;;
	esac
	shift
done




# main
if [ "$AOE_COMMAND" == "" ]; then
	aoe_storage_usage
fi

if [ "$AOE_COMMAND" == "post_luns" ] || [ "$AOE_COMMAND" == "post_identifier" ]; then
	if [ "$AOE_OPENQRM_USERNAME" == "" ]; then
		aoe_storage_usage
	fi
	if [ "$AOE_OPENQRM_PASSWORD" == "" ]; then
		aoe_storage_usage
	fi
else
	if [ "$AOE_COMMAND" != "list" ] && [ "$AOE_COMMAND" != "auth" ]; then
		if [ "$AOE_IMAGE_NAME" == "" ]; then
			aoe_storage_usage
		fi
	fi
fi

case "$AOE_COMMAND" in 

	add)
		# check if existing already
		if [ -f "$AOE_STORAGE_SERVER_IMAGE_DIRECTORY/$AOE_IMAGE_NAME" ]; then
			openqrm_post_event 0 "add" 3 "openqrm-aoe-storage" "AOE volume $AOE_STORAGE_SERVER_IMAGE_DIRECTORY/$AOE_IMAGE_NAME already exists."
			exit 1
		fi
		if [ "$AOE_IMAGE_SIZE" == "" ]; then
			AOE_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
		fi
		export AOE_IMAGE_SIZE
		echo "Creating AOE volume $AOE_IMAGE_NAME"
		mkdir -p $AOE_STORAGE_SERVER_IMAGE_DIRECTORY
		# add to exports
		aoe_storage_lock aquire
		manage_aoe add
		aoe_storage_lock release
		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$AOE_OPENQRM_USERNAME" != "" ] && [ "$AOE_OPENQRM_PASSWORD" != "" ]; then
			$0 post_luns -u $AOE_OPENQRM_USERNAME -p $AOE_OPENQRM_PASSWORD
		fi
		;;

	remove)
		echo "Removing AOE volume $AOE_IMAGE_NAME"
		aoe_storage_lock aquire
		manage_aoe remove
		aoe_storage_lock release
		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$AOE_OPENQRM_USERNAME" != "" ] && [ "$AOE_OPENQRM_PASSWORD" != "" ]; then
			$0 post_luns -u $AOE_OPENQRM_USERNAME -p $AOE_OPENQRM_PASSWORD
		fi
		# physical remove
		rm -rf $AOE_STORAGE_SERVER_IMAGE_DIRECTORY/$AOE_IMAGE_NAME
		;;

	snap)
		if [ "$AOE_IMAGE_SNAPSHOT_NAME" == "" ]; then
			openqrm_post_event 0 "snap" 3 "openqrm-aoe-storage" "No snapshot volume name given."
			aoe_storage_usage
		fi
		# check that source fs-images exist
		if [ ! -f "$AOE_STORAGE_SERVER_IMAGE_DIRECTORY/$AOE_IMAGE_NAME" ]; then
			openqrm_post_event 0 "snap" 3 "openqrm-aoe-storage" "Source image $AOE_STORAGE_SERVER_IMAGE_DIRECTORY/$AOE_IMAGE_NAME does not exist."
			exit 1
		fi
		AOE_ORIGINAL_IMAGE_SIZE=`cat $VBLADECONF | grep -v '^#' | grep $AOE_STORAGE_SERVER_IMAGE_DIRECTORY/$AOE_IMAGE_NAME | cut -d '#' -f2 | cut -d'=' -f2 | awk {' print $1 '}`
		if [ "$AOE_ORIGINAL_IMAGE_SIZE" == "" ]; then
			openqrm_post_event 0 "snap" 3 "openqrm-aoe-storage" "Could not find out original image size! Skipping snapshot."
			exit 1
		fi
		echo "Creating snapshot from AOE volume $AOE_IMAGE_NAME -> $AOE_IMAGE_SNAPSHOT_NAME size $AOE_ORIGINAL_IMAGE_SIZE"
		mkdir -p $AOE_STORAGE_SERVER_IMAGE_DIRECTORY
		cp -a $AOE_STORAGE_SERVER_IMAGE_DIRECTORY/$AOE_IMAGE_NAME $AOE_STORAGE_SERVER_IMAGE_DIRECTORY/$AOE_IMAGE_SNAPSHOT_NAME
		export AOE_IMAGE_NAME=$AOE_IMAGE_SNAPSHOT_NAME
		export AOE_IMAGE_SIZE=$AOE_ORIGINAL_IMAGE_SIZE
		aoe_storage_lock aquire
		manage_aoe add snap
		aoe_storage_lock release
		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$AOE_OPENQRM_USERNAME" != "" ] && [ "$AOE_OPENQRM_PASSWORD" != "" ]; then
			$0 post_luns -u $AOE_OPENQRM_USERNAME -p $AOE_OPENQRM_PASSWORD
		fi
		;;

	auth)
		echo "Authenticating AOE volume $AOE_IMAGE_ROOTDEVICE to $AOE_IMAGE_AUTH_MAC"
		# this is just for starting auth, make sure the device is there, otherwise wait
		if [ "$AOE_OPENQRM_USERNAME" != "" ] && [ "$AOE_OPENQRM_PASSWORD" != "" ] && [ "$AOE_IMAGE_NAME" != "" ]; then
			MAX_AUTH_LOOP=0
			while (true); do
				if [ -f "$AOE_STORAGE_SERVER_IMAGE_DIRECTORY/$AOE_IMAGE_NAME" ]; then
					break
				fi
				sleep 5
				if [ "$MAX_AUTH_LOOP" == "$MAX_VOLUME_AUTHENTICATION_LOOP" ]; then
					openqrm_post_event 0 "auth" 3 "openqrm-aoe-storage" "Volume $AOE_STORAGE_SERVER_IMAGE_DIRECTORY/$AOE_IMAGE_NAME does not exist."
					exit 1
				fi
				MAX_AUTH_LOOP=$(( MAX_AUTH_LOOP + 1 ))
			done
		fi
		aoe_storage_lock aquire
		manage_aoe auth $AOE_IMAGE_AUTH_MAC
		aoe_storage_lock release
		# if we have an image name send back to openQRM that storage auth finished to remvoe the storage-auth-blocker
		if [ "$AOE_OPENQRM_USERNAME" != "" ] && [ "$AOE_OPENQRM_PASSWORD" != "" ] && [ "$AOE_IMAGE_NAME" != "" ]; then
			if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$AOE_OPENQRM_USERNAME --http-password=$AOE_OPENQRM_PASSWORD "$openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/aoe-storage/aoe-storage-action.php?aoe_storage_command=auth_finished&aoe_image_name=$AOE_IMAGE_NAME"; then
				aoe_storage_log auth "ERROR: Could not remove the storage-auth-blocker from the openQRM-server at $OPENQRM_SERVER_IP!"
			fi
		fi
		;;

	list)
		ls $AOE_STORAGE_SERVER_IMAGE_DIRECTORY
		;;
	post_luns)
		echo "Posting current aoe-luns to the openQRM-server"
		STORAGE_STATUS_TMP=$resource_id.aoe.stat
		cat $VBLADECONF | grep -v '^#' | sed -e 's/#//g' | grep $AOE_STORAGE_SERVER_IMAGE_DIRECTORY > $STORAGE_STATUS_TMP
		sed -i -e "s/ \{1,\}/@/g" $STORAGE_STATUS_TMP
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$AOE_OPENQRM_USERNAME --http-password=$AOE_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $STORAGE_STATUS_TMP` $openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/aoe-storage/aoe-storage-action.php?aoe_storage_command=get_storage; then
			openqrm_post_event 0 "post_luns" 3 "openqrm-aoe-storage" "Could not post AOE volume list to openQRM at $OPENQRM_SERVER_IP."
		fi
		rm -f $STORAGE_STATUS_TMP
		rm -f $STORAGE_STATUS_TMP.post
		;;
	post_identifier)
		echo "Posting current AOE voluem identifiers to the openQRM-server"
		STORAGE_STATUS_TMP=$resource_id.aoe.ident
		> $STORAGE_STATUS_TMP
		OLD_IFS=$IFS
IFS='
'
		for SHELF_STR in `cat $VBLADECONF | grep -v '^#' | grep $AOE_STORAGE_SERVER_IMAGE_DIRECTORY | sed '/^$/d'`; do
			INTERFACE=`echo $SHELF_STR | awk {'print $1	'}`
			V_SHELF=`echo $SHELF_STR | awk {' print $2 '}`
			V_SLOT=`echo $SHELF_STR | awk {' print $3 '}`
			V_IMAGE=`echo $SHELF_STR | awk {' print $4 '}`
			V_IMAGE_SHORT=`basename $V_IMAGE`
			V_ALLOWED_MAC=`echo $SHELF_STR | awk {' print $5 '}`
			echo "$V_IMAGE,$V_IMAGE_SHORT:/dev/etherd/e$V_SHELF.$V_SLOT" >> $STORAGE_STATUS_TMP
		done
		IFS=$OLD_IFS
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$AOE_OPENQRM_USERNAME --http-password=$AOE_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $STORAGE_STATUS_TMP` $openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/aoe-storage/aoe-storage-action.php?aoe_storage_command=get_ident; then
			openqrm_post_event 0 "post_identifier" 3 "openqrm-aoe-storage" "Could not post AOE volume identifiers to openQRM at $OPENQRM_SERVER_IP."
		fi
		rm -f $STORAGE_STATUS_TMP
		rm -f $STORAGE_STATUS_TMP.post
		;;
	*)
		aoe_storage_usage
		;;


esac

