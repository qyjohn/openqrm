#!/bin/bash
#
# This file is part of openQRM.
#
# openQRM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# openQRM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with openQRM.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2009, Matthias Rechenburg <matt@openqrm.com>
#
# this is the functions file for the aoe-storage-plugin

VBLADECONF=/etc/vblade.conf
# some definitions
DEFAULT_IMAGE_SIZE=5000
AOE_MGMT_LOCK_FILE=/var/run/aoe-storage/aoe-storage-plugin.lock
AOE_MGMT_LOCK_DELAY=5
AOE_MGMT_LOCK_RETRY=100
AOE_MGMT_LOCK_TIMEOUT=500
AOE_STORAGE_SERVER_IMAGE_DIRECTORY="/coraid"
# which screen binary to use
if [ -x /usr/bin/screen.real ]; then
	RUNSCREEN="/usr/bin/screen.real"
else
	RUNSCREEN=`which screen`
fi

################ common aoe-storage functions

# logs for aoe_storage
function aoe_storage_log() {
	local COMPONENT=$1
	shift
	local MESSAGE=$@
	logger -i -t "aoe-storage plug-in" "$COMPONENT : $MESSAGE"
}


# locking function
function aoe_storage_lock() {
	local COMMAND=$1
	local RET=1

	if [ ! -d `dirname $AOE_MGMT_LOCK_FILE` ]; then
		mkdir -p `dirname $AOE_MGMT_LOCK_FILE`
	fi
	case "$COMMAND" in
		aquire)
				lockfile -s $AOE_MGMT_LOCK_DELAY -r $AOE_MGMT_LOCK_RETRY -l $AOE_MGMT_LOCK_TIMEOUT $AOE_MGMT_LOCK_FILE
				RET=$?
				aoe_storage_log aoe_storage_lock "Aquired the lock"
				return $RET
				;;
		release)
				/bin/rm -f $AOE_MGMT_LOCK_FILE
				RET=$?
				aoe_storage_log aoe_storage_lock "Released the lock"
				return $RET
				;;
		*)
			aoe_storage_log aoe_storage_lock "No such command. Try 'aquire' or 'release'"
			return 1
			;;
	esac
}



################ aoe-storage functions



function check_vblade() {
	# vblade installed ?
	if ! which vbladed 1>/dev/null; then
		openqrm_post_event 0 "check_vblade" 3 "aoe-storage-functions" "Vblade is not installed. Please install vblade"
		aoe_storage_lock release
		return 1
	fi
}


function manage_aoe() {

	if ! check_vblade; then
		return
	fi
	if [ ! -f $VBLADECONF ]; then
		mkdir -p `dirname $VBLADECONF`
		echo "# this is the vblade configuration file created by openQRM" > $VBLADECONF
		echo "" >> $VBLADECONF
	fi

	case "$1" in
		add)
			AUTHENTICATED_MAC="00:00:00:00:00:00"
			if [ "$2" != "snap" ]; then
				if ! dd if=/dev/zero of=$AOE_STORAGE_SERVER_IMAGE_DIRECTORY/$AOE_IMAGE_NAME bs=1M seek=$AOE_IMAGE_SIZE count=1; then
					openqrm_post_event 0 "add" 3 "Error creating AOE volume $AOE_STORAGE_SERVER_IMAGE_DIRECTORY/$AOE_IMAGE_NAME"
					aoe_storage_lock release
					return 1
				else
					# create fs, currently static all ext3
					if ! mkfs.ext3 -F $AOE_STORAGE_SERVER_IMAGE_DIRECTORY/$AOE_IMAGE_NAME; then
						openqrm_post_event 0 "add" 3 "Error creating filesystem on AOE volume $AOE_STORAGE_SERVER_IMAGE_DIRECTORY/$AOE_IMAGE_NAME"
						aoe_storage_lock release
						return 1
					fi
				fi
			fi
			# shelf + slots are dynamic
			if [ ! -f $VBLADECONF ]; then
				> $VBLADECONF
			fi
			FOUND=0
			for (( AOE_SHELF=0; $AOE_SHELF<15; AOE_SHELF = $AOE_SHELF + 1)) ; do
				for (( AOE_SLOT=1; $AOE_SLOT<=15; AOE_SLOT = $AOE_SLOT + 1)) ; do
					TEST=`cat $VBLADECONF | grep -v '^#' | awk {' print $2" "$3 '} | grep $AOE_SHELF" "$AOE_SLOT`
					STATUS=$?
					if [ $STATUS -eq 1 ]; then
						FOUND=1
						break;
					fi
				done
				if [ $STATUS -eq 1 ]; then
					break;
				fi
			done
			if [ -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf ]; then
				. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
				AOE_INTERFACE=$OPENQRM_SERVER_INTERFACE
			else
				. /var/openqrm/openqrm-resource.conf
				AOE_INTERFACE=`ifconfig | grep -i $resource_mac | awk {' print $1 '} | tail -1`
			fi
			echo "$AOE_INTERFACE $AOE_SHELF $AOE_SLOT $AOE_STORAGE_SERVER_IMAGE_DIRECTORY/$AOE_IMAGE_NAME $AUTHENTICATED_MAC # size=$AOE_IMAGE_SIZE" >> $VBLADECONF
			sed -i '/^$/d' $VBLADECONF
			# start vbladed
			SCREEN_NAME=`date +%T%x | sed -e "s/://g" | sed -e "s#/##g"`
			$RUNSCREEN -dmS $SCREEN_NAME vblade -m $AUTHENTICATED_MAC $AOE_SHELF $AOE_SLOT $AOE_INTERFACE $AOE_STORAGE_SERVER_IMAGE_DIRECTORY/$AOE_IMAGE_NAME
			;;

		auth)
			AUTHENTICATED_MAC=$2
			AOE_SLOT=`echo $AOE_IMAGE_ROOTDEVICE | cut -d'.' -f2`
			AOE_SHELF=`echo $AOE_IMAGE_ROOTDEVICE | cut -d'.' -f1 | sed -e "s#/dev/etherd/e##g"`
			if grep "$AOE_SHELF $AOE_SLOT" $VBLADECONF 1>/dev/null; then
				AOE_INTERFACE=`cat $VBLADECONF | grep -v "#" | grep "$AOE_SHELF $AOE_SLOT" | awk {' print $1'}`
				AOE_IMAGE_ROOTDEVICE_PATH=`cat $VBLADECONF | grep "$AOE_SHELF $AOE_SLOT" | awk {' print $4 '}`
				sed -i -e "s#$AOE_IMAGE_ROOTDEVICE_PATH .*#$AOE_IMAGE_ROOTDEVICE_PATH $AUTHENTICATED_MAC#g" $VBLADECONF
				sed -i '/^$/d' $VBLADECONF
				for VBLADE_PID in `ps ax | grep vblade | grep -w $AOE_IMAGE_ROOTDEVICE_PATH | awk {' print $1 '}`; do
					kill $VBLADE_PID
				done
				sync
				# start vbladed
				SCREEN_NAME=`date +%T%x | sed -e "s/://g" | sed -e "s#/##g"`
				$RUNSCREEN -dmS $SCREEN_NAME vblade -m $AUTHENTICATED_MAC $AOE_SHELF $AOE_SLOT $AOE_INTERFACE $AOE_IMAGE_ROOTDEVICE_PATH
			fi
			;;

		remove)
			for VBLADE_PID in `ps ax | grep vblade | grep -w $AOE_IMAGE_NAME | awk {' print $1 '}`; do
				kill $VBLADE_PID
			done
			sync
			grep -v "$AOE_STORAGE_SERVER_IMAGE_DIRECTORY/$AOE_IMAGE_NAME " $VBLADECONF > $VBLADECONF.new
			mv -f $VBLADECONF.new $VBLADECONF
			sed -i '/^$/d' $VBLADECONF
			;;
	esac
}


