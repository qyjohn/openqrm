#!/bin/bash
# this is the root-mount initrd-service
# which proivdes function to mount/remount the remote
# local-rootfs according to the image_deployment_parameters at /mnt
#
# local-storage INSTALL
# ------------------------------------------------------------------------------
# Required defines in the image_deploy_paramters
# IMAGE_INSTALL_FROM		- set to the server-location (path) of the local-storage image
#							  which should be installed (restored) on the local device.
#							  syntax is : /path_to_target_image
#
# local-storage GRAB
# ------------------------------------------------------------------------------
# Required defines in the image_deploy_paramters
# IMAGE_GRAB_TO				- set to the (nfs) server-location (ip:path) the local-storage image should
#						  	  be transfered to. syntax is : ip-address:/path_to_target_image
#
#
# Optional parameters 
#
# IMAGE_INSTALL_FROM_NFS			- can be set to an (nfs) location from
#									  which the image will be installed at
#									  deployment time
#									  syntax is : ip_of_nfs-server:path_to_target_image
#
# IMAGE_TRANSFER_TO_NFS				- can be set to an (nfs) location from
#									  which the image will be transfered to at
#									  deployment time
#									  syntax is : ip_of_nfs-server:path_to_target_image
#
# IMAGE_INSTALL_FROM_LOCAL			- set to a local harddisk device (e.g. /dev/hda1) this
#									  option will install the local-storage image on 
#									  boot-time from the local-device
#
# IMAGE_TRANSFER_TO_LOCAL			- set to a local harddisk device (e.g. /dev/hda1) this option will transfrom
#									  the local-storage image on boot-time to the local-device
#
#
#
# IMAGE_INSTALL_FROM_LOCAL_FS_TYPE	- set to a local harddisk device fs-type (e.g. ext3)
#
# IMAGE_TRANSFER_TO_LOCAL_FS_TYPE	- set to a local harddisk device fs-type (e.g. ext3)
#
# IMAGE_NFS_MOUNT_OPTIONS			- can be e.g. set to proto=tcp for the install/transform phase
#



# get the deployment parameters from openqrm.conf
OPENQRM_RESOURCE_PARAMETER_FILE="/var/openqrm/openqrm-resource.conf"
. $OPENQRM_RESOURCE_PARAMETER_FILE
eval $image_deployment_parameter
export OPENQRM_SERVER_BASE_DIR=$resource_basedir
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions

# nfs-options for the install+transform phase
if [ "$IMAGE_NFS_MOUNT_OPTIONS" != "" ]; then
	IMAGE_NFS_MOUNT_OPTIONS=",$IMAGE_NFS_MOUNT_OPTIONS"
fi
# default to ext3
if [ "$IMAGE_INSTALL_FROM_LOCAL_FS_TYPE" == "" ]; then
	IMAGE_INSTALL_FROM_LOCAL_FS_TYPE="ext3"
fi
if [ "$IMAGE_TRANSFER_TO_LOCAL_FS_TYPE" == "" ]; then
	IMAGE_TRANSFER_TO_LOCAL_FS_TYPE="ext3"
fi

#######################################################################
# required functions ##################################################
#######################################################################

function mount_rootfs() {
	modprobe ext3 1>/dev/null 2>&1

	if  [ "$IMAGE_GRAB_TO" != "" ]; then
		grab_rootfs
	else
		echo "local-storage: Skipping grab phase"
	fi
	if  [ "$IMAGE_INSTALL_FROM" != "" ]; then
		install_rootfs
	else
		echo "local-storage: Skipping install phase"
	fi

	if ! mount -t $image_rootfstype -o rw $image_rootdevice /mnt; then
		echo "ERROR: Could not mount $image_rootdevice / $image_rootfstype"
		# give a shell for the admin
		/bin/bash
	else
		echo "local-storage: Mounted $image_rootdevice rw"
	fi

	if  [ "$IMAGE_INSTALL_FROM_NFS" != "" ]; then
		install_rootfs_from_nfs
	else
		echo "local-storage: Skipping install phase"
	fi
	if  [ "$IMAGE_TRANSFER_TO_NFS" != "" ]; then
		transfer_rootfs_to_nfs
	else
		echo "local-storage: Skipping transfer-to-nfs phase"
	fi
	if  [ "$IMAGE_INSTALL_FROM_LOCAL" != "" ]; then
		install_rootfs_from_local
	else
		echo "local-storage: Skipping install from local phase"
	fi
	if  [ "$IMAGE_TRANSFER_TO_LOCAL" != "" ]; then
		transfer_rootfs_to_local
	else
		echo "local-storage: Skipping transform to local phase"
	fi

}


function remount_rootfs() {

	# remont /mnt ro
	while ! mount -t $image_rootfstype -o ro,remount $image_rootdevice /mnt; do
		echo -n "."
		sleep 1
		REMOUNT_LOOP=$[ REMOUNT_LOOP + 1 ]
		if [ "$REMOUNT_LOOP" == "10" ]; then
			echo "ERROR: local-storage could not remount /mnt "
			/bin/bash
		fi
	done
	echo "local-storage: Re-mounted $image_rootdevice ro"
}


function create_fstab() {
	rm -f $IMAGE_FSTAB
	echo "$image_rootdevice   /   local  defaults   0 0" >> $IMAGE_FSTAB
}


#######################################################################
# optional functions ##################################################
#######################################################################


# using partimage from grabbing
function grab_rootfs() {
	echo "local-storage: Grabbing $resource_image from $image_rootdevice to image_storage_server_ip:$IMAGE_GRAB_TO"
	# getting partimage
	if [ ! -x /sbin/partimage ]; then
		cd /sbin
		echo "local-storage: Getting partimage util"
		if ! wget -q http://$resource_openqrmserver/openqrm/boot-service/partimage; then
			/bin/bash
		fi
		chmod +x partimage
		cd /
	fi
	# mounting target location
	modprobe sunrpc 1>/dev/null 2>&1
	modprobe lockd 1>/dev/null 2>&1
	modprobe nfs 1>/dev/null 2>&1
	rm -rf /dev/null
	mknod -m 666 /dev/null c 1 3
	openqrm_portmap_start
	mkdir -p /mnt2
	if ! mount -t nfs -o rw,nolock$IMAGE_NFS_MOUNT_OPTIONS $image_storage_server_ip:$IMAGE_GRAB_TO /mnt2; then
		echo "ERROR: Could not mount $image_storage_server_ip:$IMAGE_GRAB_TO by nfs"
		# give a shell for the admin
		/bin/bash
	fi

	echo "local-storage: Started grab-pase. This can take a while ...."
	# grabbing the root partition
	partimage -z1 --nocheck --overwrite --nodesc -f3 -b save $image_rootdevice /mnt2/$image_name
	# saving the mbr
	ROOT_DISK=`echo $image_rootdevice | sed -e "s/[0-9]//g"`
	dd if=$ROOT_DISK of=/mnt2/$image_name.mbr count=1 bs=512
	# saving the extend partitions
	sfdisk -d $ROOT_DISK > /mnt2/$image_name.sf
	echo "local-storage: Grab-phase finished. Continuing boot-up"

	umount /mnt2
	rmdir /mnt2
	openqrm_portmap_stop
}




# using partimage from deploy
function install_rootfs() {
	echo "local-storage: Installing $resource_image from $image_storage_server_ip:$IMAGE_INSTALL_FROM to $image_rootdevice"
	# getting partimage
	if [ ! -x /sbin/partimage ]; then
		cd /sbin
		echo "local-storage: Getting partimage util"
		if ! wget -q http://$resource_openqrmserver/openqrm/boot-service/partimage; then
			/bin/bash
		fi
		chmod +x partimage
		cd /
	fi
	# mounting source location
	modprobe sunrpc 1>/dev/null 2>&1
	modprobe lockd 1>/dev/null 2>&1
	modprobe nfs 1>/dev/null 2>&1
	rm -rf /dev/null
	mknod -m 666 /dev/null c 1 3
	openqrm_portmap_start
	mkdir -p /mnt2
	if ! mount -t nfs -o ro,nolock$IMAGE_NFS_MOUNT_OPTIONS $image_storage_server_ip:$IMAGE_INSTALL_FROM /mnt2; then
		echo "ERROR: Could not mount $image_storage_server_ip:$IMAGE_INSTALL_FROM by nfs"
		# give a shell for the admin
		/bin/bash
	fi

	echo "local-storage: Started install-phase. This can take a while ...."
	# restoring the mbr
	ROOT_DISK=`echo $image_rootdevice | sed -e "s/[0-9]//g"`
	dd if=/mnt2/$image_name.mbr of=$ROOT_DISK
	# restoring the extented partition layout
	sfdisk $ROOT_DISK < /mnt2/$image_name.sf
	partimage -b restore $image_rootdevice /mnt2/$image_name.000
	echo "local-storage: Install-phase finished. Continuing boot-up"

	umount /mnt2
	rmdir /mnt2
	openqrm_portmap_stop
		
}



function install_rootfs_from_nfs() {
	modprobe sunrpc 1>/dev/null 2>&1
	modprobe lockd 1>/dev/null 2>&1
	modprobe nfs 1>/dev/null 2>&1
	rm -rf /dev/null
	mknod -m 666 /dev/null c 1 3
	openqrm_portmap_start
	echo "local-storage: Installing $resource_image from $IMAGE_INSTALL_FROM_NFS"
	mkdir -p /mnt2
	if ! mount -t nfs -o ro$IMAGE_NFS_MOUNT_OPTIONS $IMAGE_INSTALL_FROM_NFS /mnt2; then
		echo "ERROR: Could not mount $IMAGE_INSTALL_FROM_NFS by nfs"
		# give a shell for the admin
		/bin/bash
	fi
	echo "local-storage: Starting install-from-nfs phase. This can take a while ...."
	rsync -aq /mnt2/* /mnt/
	echo "local-storage: Install-from-nfs phase finished. Continuing boot-up"
	umount /mnt2
	rmdir /mnt2
	openqrm_portmap_stop
}


function transfer_rootfs_to_nfs() {
	modprobe sunrpc 1>/dev/null 2>&1
	modprobe lockd 1>/dev/null 2>&1
	modprobe nfs 1>/dev/null 2>&1
	rm -rf /dev/null
	mknod -m 666 /dev/null c 1 3
	openqrm_portmap_start
	echo "local-storage: Transfering $resource_image to $IMAGE_TRANSFER_TO_NFS"
	mkdir -p /mnt2
	if ! mount -t nfs -o ro$IMAGE_NFS_MOUNT_OPTIONS $IMAGE_TRANSFER_TO_NFS /mnt2; then
		echo "ERROR: Could not mount $IMAGE_TRANSFER_TO_NFS by nfs"
		# give a shell for the admin
		/bin/bash
	fi
	echo "local-storage: Starting transfer-to-nfs phase. This can take a while ...."
	rsync -aq /mnt/* /mnt2/
	echo "local-storage: Transfer-to-nfs phase finished. Continuing boot-up"
	umount /mnt2
	rmdir /mnt2
	openqrm_portmap_stop
}


function install_rootfs_from_local() {
	modprobe ext3 1>/dev/null 2>&1
	mkdir -p /mnt2
	if ! mount -t $IMAGE_INSTALL_FROM_LOCAL_FS_TYPE -o ro $IMAGE_INSTALL_FROM_LOCAL /mnt2; then
		echo "ERROR: Could not mount $IMAGE_INSTALL_FROM_LOCAL / $IMAGE_INSTALL_FROM_LOCAL_FS_TYPE"
		# give a shell for the admin
		/bin/bash
	fi
	echo "local-storage: Starting install-to-local phase. This can take a while ...."
	rsync -aq /mnt2/* /mnt/
	echo "local-storage: Install-to-local phase finished. Continuing boot-up"
	umount /mnt2
	rmdir /mnt2
}


function transfer_rootfs_to_local() {
	modprobe ext3 1>/dev/null 2>&1
	mkdir -p /mnt2
	if ! mount -t $IMAGE_TRANSFER_TO_LOCAL_FS_TYPE -o rw $IMAGE_TRANSFER_TO_LOCAL /mnt2; then
		echo "ERROR: Could not mount $IMAGE_TRANSFER_TO_LOCAL / $IMAGE_TRANSFER_TO_LOCAL_FS_TYPE"
		# give a shell for the admin
		/bin/bash
	fi
	echo "local-storage: Starting transfer-to-local phase. This can take a while ...."
	rsync -aq /mnt/* /mnt2/
	echo "local-storage: Transfer-to-local phase finished. Continuing boot-up"
	umount /mnt2
	rmdir /mnt2
}



