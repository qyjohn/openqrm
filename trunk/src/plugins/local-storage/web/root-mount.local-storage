#!/bin/bash
# this is the root-mount initrd-service
# which proivdes function to mount/remount the remote
# local-rootfs according to the image_deployment_parameters at /mnt
#
#
# This file is part of openQRM.
#
# openQRM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# openQRM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with openQRM.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2009, Matthias Rechenburg <matt@openqrm.com>
#

# Optional parameters 
#
# IMAGE_NFS_MOUNT_OPTIONS			- can be e.g. set to proto=tcp for the install/transform phase
#
# get the deployment parameters from openqrm.conf
OPENQRM_RESOURCE_PARAMETER_FILE="/var/openqrm/openqrm-resource.conf"
. $OPENQRM_RESOURCE_PARAMETER_FILE
eval $image_deployment_parameter
eval $resource_capabilities
export OPENQRM_SERVER_BASE_DIR=$resource_basedir
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions

# nfs-options for the install+transform phase
if [ "$IMAGE_NFS_MOUNT_OPTIONS" != "" ]; then
	IMAGE_NFS_MOUNT_OPTIONS=",$IMAGE_NFS_MOUNT_OPTIONS"
fi

# blocksize for the transfer for performance tuning
DD_BLOCKSIZE=1024

# define wget to use with https
if [ "$openqrm_web_protocol" == "https" ]; then
    export WGET="wget --no-check-certificate -q"
else
    export WGET="wget -q"
fi

#######################################################################
# required functions ##################################################
#######################################################################

function mount_rootfs() {
	modprobe sunrpc 1>/dev/null 2>&1
	modprobe lockd 1>/dev/null 2>&1
	modprobe nfs 1>/dev/null 2>&1
	modprobe ext3 1>/dev/null 2>&1
	rm -rf /dev/null
	mknod -m 666 /dev/null c 1 3
	openqrm_portmap_start

	if ! mount -t nfs -o rw,nolock$IMAGE_NFS_MOUNT_OPTIONS $image_storage_server_ip:$image_rootdevice /mnt; then
		echo "ERROR: Could not mount $image_storage_server_ip:$image_rootdevice by nfs"
		# give a shell for the admin
		/bin/bash
	else
		echo "local-storage: Mounted $image_storage_server_ip:$image_rootdevice rw"
	fi

    # grab or restore ?
    if [ "$LOCAL_STORAGE_GRAB" != "" ]; then
        # grab
        echo "local-storage: Starting grab-phase. Transfering disk-content to $image_name"
        # grab all disks
        for HARD_DISK in `cat /proc/partitions | grep -v major | sed -e '/^$/d' | awk {' print $4 '} | grep -v [0-9]`; do
            echo "local-storage: Processing device /dev/$HARD_DISK"
            INAME="/mnt/"$image_name"_x_"$HARD_DISK"_ping.img"
            BSNAME="/mnt/"$image_name"_x_"$HARD_DISK"_bs.img"
            rm -f $INAME $BSNAME
            dd if=/dev/$HARD_DISK of=$INAME bs=$DD_BLOCKSIZE
            # gzip is too slow
            # nice -n 19 dd if=/dev/$HARD_DISK | gzip -9 > $INAME
            dd if=/dev/$HARD_DISK of=$BSNAME bs=512 count=1
        done
        echo "local-storage: Umounting image-store"
        umount /mnt

        # send token to the openQRM server to stop the grab-appliance
        echo "local-storage: Sending 'grab-complete' to the openQRM server"
        if ! $WGET "$openqrm_web_protocol://$resource_openqrmserver/openqrm/boot-service/local-storage-state.php?action=grab-complete&token=$LOCAL_STORAGE_GRAB"; then
            echo "local-storage: Sending 'grab-complete' to the openQRM server"
            /bin/bash
        fi
        # wait for reboot
        echo "local-storage: Preparing system restart. Please stand by ..."
        /bin/bash

    elif [ "$LOCAL_STORAGE_DEPLOYMENT" != "" ]; then
        # restore -> active deployment
        echo "local-storage: Starting restore of $image_name"
        for PING_IMAGE in `ls /mnt/$image_name_x_*_ping.img`; do
            FP_INAME=$image_name"_x_"
            LP_INAME="_ping.img"
            LP_BSNAME="_bs.img"
            PING_DEV=`echo $PING_IMAGE | sed -e "s/.*$FP_INAME//g" | sed -e "s/$LP_INAME//g"`
            echo "local-storage: Restoring $PING_IMAGE to /dev/$PING_DEV"
            dd if=$PING_IMAGE of=/dev/$PING_DEV bs=$DD_BLOCKSIZE
            # gzip is too slow
            # nice -n 19 gzip -cd $PING_IMAGE | dd of=/dev/$PING_DEV
            # and the bootsector too
            BSNAME=`echo $PING_IMAGE | sed -e "s/$LP_INAME/$LP_BSNAME/g"`
            dd if=$BSNAME of=/dev/$PING_DEV bs=512 count=1
        done
        echo "local-storage: Umounting image-store"
        umount /mnt

        # send token to the openQRM server to set appliance to localboot
        echo "local-storage: Sending 'deployment-complete' to the openQRM server"
        if ! $WGET "$openqrm_web_protocol://$resource_openqrmserver/openqrm/boot-service/local-storage-state.php?action=deployment-complete&token=$LOCAL_STORAGE_DEPLOYMENT"; then
            echo "local-storage: Error sending 'deployment-complete' to the openQRM server"
            /bin/bash
        fi
        # wait a bit until the pxe-config is re-written
        echo "local-storage: Preparing local-boot. Please stand by ..."
        /bin/bash

    fi

}


function remount_rootfs() {
    :
}


function create_fstab() {
    :
}


#######################################################################
# optional functions ##################################################
#######################################################################

