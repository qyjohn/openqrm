#!/bin/bash
# this script automatically manages nfs and iscsi on local
#
# This file is part of openQRM.
#
# openQRM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# openQRM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with openQRM.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2009, Matthias Rechenburg <matt@openqrm.com>
#
OPENQRM_SERVER_BASE_DIR=$(dirname $0)/../../../..
OPENQRM_SERVER_BASE_DIR=$(pushd $OPENQRM_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/local-storage/include/openqrm-plugin-local-storage-functions
OPENQRM_POSTENCODE="$OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-postencode"
if [ -f $OPENQRM_RESOURCE_PARAMETER_FILE ]; then
	. $OPENQRM_RESOURCE_PARAMETER_FILE
	OPENQRM_SERVER_IP=$resource_openqrmserver
	OPENQRM_EXEC_PORT=$resource_execdport
elif [ -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf ]; then
	. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
	. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions
	openqrm_server_get_config
	OPENQRM_SERVER_IP=$OPENQRM_SERVER_IP_ADDRESS
	resource_id=0
	resource_openqrmserver=$OPENQRM_SERVER_IP_ADDRESS
	openqrm_web_protocol=$OPENQRM_WEB_PROTOCOL
fi
export LANG=C
LINEBR='
'
# how long to wait for the volume authentication, each loop is 5 secs
MAX_VOLUME_AUTHENTICATION_LOOP=30
export MAX_VOLUME_AUTHENTICATION_LOOP

# define wget to use with https
if [ "$openqrm_web_protocol" == "https" ]; then
	WGET_NO_CERT_CHECK="--no-check-certificate"
fi

# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	echo "ERROR: Please run this script as root!"
	exit 6
fi

function local_storage_usage() {
	echo "Usage : $0 add/remove/snap/list <-n image-name> <-v volume-group>"
	echo "             [-m size in MB]"
	echo "             [-s image-snapshot-name]"
	echo "        $0 auth <-r image-rootdevice> <-i authidentifier>"
	echo "        $0 post_vg <-u username> <-p password>"
	echo "        $0 post_lv <-u username> <-p password> <-v volume-group>"
	echo "        $0 post_identifier <-u username> <-p password>"
	exit 1
}



LOCAL_COMMAND=$1
shift

while [ $# -ne 0 ]; do
	case "$1" in
		-n)
			LOCAL_IMAGE_NAME=$2
			shift
			;;
		-m)
			LOCAL_IMAGE_SIZE=$2
			shift
			;;
		-s)
			LOCAL_IMAGE_SNAPSHOT_NAME=$2
			shift
			;;
		-i)
			LOCAL_IMAGE_AUTH=$2
			shift
			;;
		-r)
			LOCAL_IMAGE_ROOTDEVICE=$2
			shift
			;;
		-u)
			LOCAL_OPENQRM_USERNAME=$2
			shift
			;;
		-p)
			LOCAL_OPENQRM_PASSWORD=$2
			shift
			;;
		-v)
			LOCAL_STORAGE_SERVER_VOLUME_GROUP=$2
			shift
			;;
		*)
			echo "ERROR: Free commandline arguments are not allowed"
			local_storage_usage
			exit 6
			;;
	esac
	shift
done




# main
if [ "$LOCAL_COMMAND" == "" ]; then
	local_storage_usage
fi

if [ "$LOCAL_COMMAND" == "post_lv" ] || [ "$LOCAL_COMMAND" == "post_vg" ] || [ "$LOCAL_COMMAND" == "post_identifier" ]; then
		if [ "$LOCAL_OPENQRM_USERNAME" == "" ]; then
			local_storage_usage
		fi
		if [ "$LOCAL_OPENQRM_PASSWORD" == "" ]; then
			local_storage_usage
		fi
		if [ "$LOCAL_COMMAND" == "post_lv" ]; then
			if [ "$LOCAL_STORAGE_SERVER_VOLUME_GROUP" == "" ]; then
				local_storage_usage
			fi
		fi

else

	if [ "$LOCAL_COMMAND" != "list" ] && [ "$LOCAL_COMMAND" != "auth" ]; then
		if [ "$LOCAL_IMAGE_NAME" == "" ]; then
			local_storage_usage
		fi
		if [ "$LOCAL_STORAGE_SERVER_VOLUME_GROUP" == "" ]; then
			local_storage_usage
		fi
	fi
fi
# load required local modules if needed
if ! grep dm_mod /proc/modules 1>/dev/null; then
	modprobe dm-mod 1>/dev/null
	modprobe dm-snapshot 1>/dev/null
	# give time to settle
	sleep 2
fi

if [ "$LOCAL_COMMAND" != "list" ] && [ "$LOCAL_COMMAND" != "post_vg" ] && [ "$LOCAL_COMMAND" != "post_identifier" ] && [ "$LOCAL_COMMAND" != "auth" ]; then
	# check if volume group exists
	if ! `vgdisplay | grep $LOCAL_STORAGE_SERVER_VOLUME_GROUP 1>/dev/null`; then
		echo "ERROR: Could not find volume-group $LOCAL_STORAGE_SERVER_VOLUME_GROUP on the storage-server"
		exit 1
	fi
fi

case "$LOCAL_COMMAND" in

	add)

		if [ "$LOCAL_IMAGE_SIZE" == "" ]; then
			LOCAL_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
		fi
		export LOCAL_IMAGE_SIZE
		# check if already exists
		if [ -e /dev/$LOCAL_STORAGE_SERVER_VOLUME_GROUP/$LOCAL_IMAGE_NAME ]; then
			openqrm_post_event 0 "add" 3 "openqrm-local-storage" "Volume $LOCAL_IMAGE_NAME already exists!"
			exit 1
		fi
		#echo -n "Creating logical volume $LOCAL_IMAGE_NAME size $LOCAL_IMAGE_SIZE MB using volume group $LOCAL_STORAGE_SERVER_VOLUME_GROUP"
		local_storage_lock aquire
		if ! lvcreate -L$LOCAL_IMAGE_SIZE -n$LOCAL_IMAGE_NAME $LOCAL_STORAGE_SERVER_VOLUME_GROUP; then
			openqrm_post_event 0 "add" 3 "openqrm-local-storage" "Could not create Volume $LOCAL_IMAGE_NAME!"
			local_storage_lock release
			exit 1
		fi
		# we mount them and add to exports
		#echo "Detected NFS-image. Mounting and adding $LOCAL_IMAGE_NAME to /etc/fstab + /etc/exports"
		manage_fstab add
		manage_nfs add regular $OPENQRM_SERVER_IP
		local_storage_lock release
		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$LOCAL_OPENQRM_USERNAME" != "" ] && [ "$LOCAL_OPENQRM_PASSWORD" != "" ]; then
			$0 post_lv -u $LOCAL_OPENQRM_USERNAME -p $LOCAL_OPENQRM_PASSWORD -v $LOCAL_STORAGE_SERVER_VOLUME_GROUP
		fi

		;;

	remove)
		# check that no snapshots existing with this volume as the origin
		if lvs | awk '{ print $5 }' | grep -w $LOCAL_IMAGE_NAME 1>/dev/null; then
			openqrm_post_event 0 "remove" 3 "openqrm-local-storage" "Snapshot exist from volume /dev/$LOCAL_STORAGE_SERVER_VOLUME_GROUP/$LOCAL_IMAGE_NAME. Not removing!"
			exit 1
		fi
		# echo "Removing logical volume $LOCAL_IMAGE_NAME on volume group $LOCAL_STORAGE_SERVER_VOLUME_GROUP"
		local_storage_lock aquire
		manage_nfs remove
		manage_fstab remove
		local_storage_lock release
		# give time to settle
		sync
		sleep 2
		lvchange -a n /dev/$LOCAL_STORAGE_SERVER_VOLUME_GROUP/$LOCAL_IMAGE_NAME
		lvremove -f /dev/$LOCAL_STORAGE_SERVER_VOLUME_GROUP/$LOCAL_IMAGE_NAME
		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$LOCAL_OPENQRM_USERNAME" != "" ] && [ "$LOCAL_OPENQRM_PASSWORD" != "" ]; then
			$0 post_lv -u $LOCAL_OPENQRM_USERNAME -p $LOCAL_OPENQRM_PASSWORD -v $LOCAL_STORAGE_SERVER_VOLUME_GROUP
		fi

		;;

	snap)
		if [ "$LOCAL_IMAGE_SNAPSHOT_NAME" == "" ]; then
			local_storage_usage
		fi
		if [ "$LOCAL_IMAGE_SIZE" == "" ]; then
			LOCAL_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
		fi
		export LOCAL_IMAGE_SIZE

		# check that source fs-images exist
		if ! `lvdisplay /dev/$LOCAL_STORAGE_SERVER_VOLUME_GROUP/$LOCAL_IMAGE_NAME 1>/dev/null`; then
			openqrm_post_event 0 "snap" 3 "openqrm-local-storage" "Could not find /dev/$LOCAL_STORAGE_SERVER_VOLUME_GROUP/$LOCAL_IMAGE_NAME on the storage-server!"
			exit 1
		fi
		#echo -n "Creating snapshot size $LOCAL_IMAGE_SIZE from logical volume $LOCAL_IMAGE_NAME -> $LOCAL_IMAGE_SNAPSHOT_NAME"
		local_storage_lock aquire
		if ! lvcreate --size $LOCAL_IMAGE_SIZE""m --snapshot --name $LOCAL_IMAGE_SNAPSHOT_NAME /dev/$LOCAL_STORAGE_SERVER_VOLUME_GROUP/$LOCAL_IMAGE_NAME; then
			openqrm_post_event 0 "snap" 3 "openqrm-local-storage" "Could not create snapshot /dev/$LOCAL_STORAGE_SERVER_VOLUME_GROUP/$LOCAL_IMAGE_SNAPSHOT_NAME!"
			local_storage_lock release
			exit 1
		fi
		export LOCAL_IMAGE_NAME=$LOCAL_IMAGE_SNAPSHOT_NAME
		#echo "Detected NFS-image. Mounting and adding $IMAGE_NAME to /etc/fstab + /etc/exports"
		manage_fstab add
		manage_nfs add snap $OPENQRM_SERVER_IP
		local_storage_lock release
		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$LOCAL_OPENQRM_USERNAME" != "" ] && [ "$LOCAL_OPENQRM_PASSWORD" != "" ]; then
			$0 post_lv -u $LOCAL_OPENQRM_USERNAME -p $LOCAL_OPENQRM_PASSWORD -v $LOCAL_STORAGE_SERVER_VOLUME_GROUP
		fi
		;;

	auth)
		#echo "Authenticating $LOCAL_IMAGE_TYPE image $LOCAL_IMAGE_ROOTDEVICE to $LOCAL_IMAGE_AUTH"
		# this is just for starting auth, make sure the device is there, otherwise wait
		if [ "$LOCAL_OPENQRM_USERNAME" != "" ] && [ "$LOCAL_OPENQRM_PASSWORD" != "" ] && [ "$LOCAL_IMAGE_NAME" != "" ]; then
			MAX_AUTH_LOOP=0
			while (true); do
				if [ -e "/dev$LOCAL_IMAGE_ROOTDEVICE" ]; then
					break
				fi
				sleep 5
				if [ "$MAX_AUTH_LOOP" == "$MAX_VOLUME_AUTHENTICATION_LOOP" ]; then
					openqrm_post_event 0 "auth" 3 "openqrm-local-storage" "Volume $LOCAL_IMAGE_TYPE image $LOCAL_IMAGE_ROOTDEVICE does not exists, Cannot auth to $LOCAL_IMAGE_AUTH!"
					exit 1
				fi
				MAX_AUTH_LOOP=$(( MAX_AUTH_LOOP + 1 ))
			done
		fi
		local_storage_lock aquire
		manage_nfs auth $LOCAL_IMAGE_AUTH
		local_storage_lock release
		# if we have an image name send back to openQRM that storage auth finished to remvoe the storage-auth-blocker
		if [ "$LOCAL_OPENQRM_USERNAME" != "" ] && [ "$LOCAL_OPENQRM_PASSWORD" != "" ] && [ "$LOCAL_IMAGE_NAME" != "" ]; then
			if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$LOCAL_OPENQRM_USERNAME --http-password=$LOCAL_OPENQRM_PASSWORD "$openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/local-storage/local-storage-action.php?local_storage_command=auth_finished&local_image_name=$LOCAL_IMAGE_NAME"; then
				openqrm_post_event 0 "auth" 3 "openqrm-local-storage" "Could not remove the storage-auth-blocker from the openQRM-server at $OPENQRM_SERVER_IP!"
			fi
		fi
		;;

	list)
		lvs
		;;

	post_vg)
		#echo "Posting current volume group status to the openQRM-server"
		STORAGE_STATUS_TMP=$resource_id.vg.stat
		vgs | grep -v VFree | sed -e "s/ \{1,\}//" > $STORAGE_STATUS_TMP
		sed -i -e "s/ \{1,\}/@/g" $STORAGE_STATUS_TMP
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$LOCAL_OPENQRM_USERNAME --http-password=$LOCAL_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $STORAGE_STATUS_TMP` $openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/local-storage/local-storage-action.php?local_storage_command=get_storage; then
			openqrm_post_event 0 "post_vg" 3 "openqrm-local-storage" "Could not post the volume group status to the openQRM-server at $OPENQRM_SERVER_IP!"
		fi
		rm -f $STORAGE_STATUS_TMP
		rm -f $STORAGE_STATUS_TMP.post
		;;

	post_lv)
		#echo "Posting current $LOCAL_IMAGE_TYPE logic volume status to the openQRM-server"
		STORAGE_STATUS_TMP=$resource_id.$LOCAL_STORAGE_SERVER_VOLUME_GROUP.lv.stat
		> $STORAGE_STATUS_TMP
		for LVOL in `lvs $LOCAL_STORAGE_SERVER_VOLUME_GROUP | grep -v LSize | sed -e "s/ \{1,\}//" | awk {' print $1 '}`; do
			if grep $LVOL $NFSEXPORTS 1>/dev/null; then
				# is this a local-storage location ?
				if [ -f /$LOCAL_STORAGE_SERVER_VOLUME_GROUP/$LVOL/local-storage ]; then
					lvs $LOCAL_STORAGE_SERVER_VOLUME_GROUP/$LVOL | grep -v LSize | sed -e "s/ \{1,\}//" >> $STORAGE_STATUS_TMP
				fi
			fi
		done
		sed -i -e "s/ \{1,\}/@/g" $STORAGE_STATUS_TMP
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$LOCAL_OPENQRM_USERNAME --http-password=$LOCAL_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $STORAGE_STATUS_TMP` $openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/local-storage/local-storage-action.php?local_storage_command=get_storage; then
			openqrm_post_event 0 "post_vg" 3 "openqrm-local-storage" "Could not post the logic volume status to the openQRM-server at $OPENQRM_SERVER_IP!"
		fi
		rm -f $STORAGE_STATUS_TMP
		rm -f $STORAGE_STATUS_TMP.post
		;;

	post_identifier)
		#echo "Posting current $LOCAL_IMAGE_TYPE logical volume identifier to the openQRM-server"
		STORAGE_STATUS_TMP=$resource_id.lv.local-storage.ident
		> $STORAGE_STATUS_TMP
		for LVOL in `lvdisplay | grep "LV Name" | awk {' print $3 '}`; do
			LVOL_SHORT=`basename $LVOL`
			exportfs -v | awk {' print $1 '} | grep -v "<.*>" > /tmp/$STORAGE_STATUS_TMP
			if grep $LVOL_SHORT /tmp/$STORAGE_STATUS_TMP 1>/dev/null; then
				EXPORT_PATH=`echo $LVOL | sed -e "s#^/dev##g"`
				# is this a local-storage location ?
				if [ -f $EXPORT_PATH/local-storage ]; then
					echo "$LVOL,$EXPORT_PATH"
					echo "$LVOL,$EXPORT_PATH" >> $STORAGE_STATUS_TMP
				fi
			fi
			rm -f /tmp/$STORAGE_STATUS_TMP
		done
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$LOCAL_OPENQRM_USERNAME --http-password=$LOCAL_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $STORAGE_STATUS_TMP` $openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/local-storage/local-storage-action.php?local_storage_command=get_ident; then
			openqrm_post_event 0 "post_identifier" 3 "openqrm-local-storage" "Could not post volume identifiers to the openQRM-server at $OPENQRM_SERVER_IP!"
		fi
		rm -f $STORAGE_STATUS_TMP
		rm -f $STORAGE_STATUS_TMP.post
		;;

	*)
		local_storage_usage
		;;


esac

