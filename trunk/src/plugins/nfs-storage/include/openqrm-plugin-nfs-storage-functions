#!/bin/bash
# this is the functions file for the nfs-storage-plugin
#
# This file is part of openQRM.
#
# openQRM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# openQRM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with openQRM.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2009, Matthias Rechenburg <matt@openqrm.com>
#

# some definitions
DEFAULT_IMAGE_SIZE=5000
NFS_MGMT_LOCK_FILE=/var/run/nfs-storage/nfs-storage-plugin.lock
NFS_MGMT_LOCK_DELAY=5
NFS_MGMT_LOCK_RETRY=100
NFS_MGMT_LOCK_TIMEOUT=500
NFS_STORAGE_SERVER_IMAGE_DIRECTORY="/exports"

################ common nfs-storage functions

# logs for nfs_storage
function nfs_storage_log() {
	local COMPONENT=$1
	shift
	local MESSAGE=$@
	logger -i -t "nfs-storage plug-in" "$COMPONENT : $MESSAGE"
}


# locking function
function nfs_storage_lock() {
	local COMMAND=$1
	local RET=1
	
	if [ ! -d `dirname $NFS_MGMT_LOCK_FILE` ]; then
		mkdir -p `dirname $NFS_MGMT_LOCK_FILE`
	fi
	case "$COMMAND" in
		aquire)
				lockfile -s $NFS_MGMT_LOCK_DELAY -r $NFS_MGMT_LOCK_RETRY -l $NFS_MGMT_LOCK_TIMEOUT $NFS_MGMT_LOCK_FILE
				RET=$?
				nfs_storage_log nfs_storage_lock "Aquired the lock"
				return $RET
				;;
		release)
				/bin/rm -f $NFS_MGMT_LOCK_FILE
				RET=$?
				nfs_storage_log nfs_storage_lock "Released the lock"
				return $RET
				;;
		*)
			nfs_storage_log nfs_storage_lock "No such command. Try 'aquire' or 'release'"
			return 1
			;;	
	esac
}



################ nfs-storage functions


function manage_nfs() {
	case "$1" in
		add)
			OPENQRM_SERVER=$2
			mkdir -p $NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME
			echo "$NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME	$OPENQRM_SERVER(rw,insecure,no_root_squash,async)" >> /etc/exports
			sed -i '/^$/d' /etc/exports
			if [ -x /etc/init.d/nfs ]; then
				/etc/init.d/nfs reload
			elif [ -x /etc/init.d/nfs-kernel-server ]; then
				/etc/init.d/nfs-kernel-server reload
			else
				echo "WARNING: Could not find nfs-server init script !"
			fi
			;;
		remove)
			sed -i -e "s#^$NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME.*##g" /etc/exports
			sed -i '/^$/d' /etc/exports
			if [ -x /etc/init.d/nfs ]; then
				/etc/init.d/nfs reload
			elif [ -x /etc/init.d/nfs-kernel-server ]; then
				/etc/init.d/nfs-kernel-server reload
			else
				echo "WARNING: Could not find nfs-server init script !"
			fi
			rm -rf $NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME/*
			rmdir $NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME
			;;

		auth)
			AUTH_IP=$2
			sed -i -e "s#^$NFS_IMAGE_ROOTDEVICE.*#$NFS_IMAGE_ROOTDEVICE	$AUTH_IP(rw,insecure,no_root_squash,async)#g" /etc/exports
			sed -i '/^$/d' /etc/exports
			if [ -x /etc/init.d/nfs ]; then
				/etc/init.d/nfs reload
			elif [ -x /etc/init.d/nfs-kernel-server ]; then
				/etc/init.d/nfs-kernel-server reload
			else
				echo "WARNING: Could not find nfs-server init script !"
			fi
			;;

	esac
}



