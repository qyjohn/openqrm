#!/bin/bash

# this script automatically manages kvm
OPENQRM_SERVER_BASE_DIR=$(dirname $0)/../../../..
OPENQRM_SERVER_BASE_DIR=$(pushd $OPENQRM_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/kvm/include/openqrm-plugin-kvm-functions
if [ -f $OPENQRM_RESOURCE_PARAMETER_FILE ]; then
	. $OPENQRM_RESOURCE_PARAMETER_FILE
	OPENQRM_SERVER_IP=$resource_openqrmserver
elif [ -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf ]; then
	. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
	. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions
	openqrm_server_get_config
	OPENQRM_SERVER_IP=$OPENQRM_SERVER_IP_ADDRESS
	resource_id=0
fi
OPENQRM_POSTENCODE="$OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-postencode.py"
OPENQRM_KVM_VM_TEMPLATE="$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/kvm/etc/templates/openqrm-kvm-vm"
OPENQRM_VM_DIR="/var/lib/kvm/openqrm/"
export LANG=C

# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	echo "ERROR: Please run this script as root!"
	exit 6
fi

function kvm_usage() {
	echo "Usage : $0 start/stop/reboot/delete/list <-n vm-name>"
	echo "Usage : $0 create <-n vm-name> <-m mac-address> <-r memory> [-d disk-size ]"
	echo "        $0 post_vm_list <-u username> <-p password>"
	echo "        $0 post_vm_config <-n vm-name> <-u username> <-p password>"
	echo "        $0 update_vm_ram <-r memory> <-n vm-name>"
	echo "        $0 add_vm_nic <-s nic-number> <-m mac-address> <-n vm-name>"
	echo "        $0 remove_vm_nic <-s nic-number> <-n vm-name>"
	echo "        $0 add_vm_disk <-s disk-number> <-d disk-size> <-n vm-name>"
	echo "        $0 remove_vm_disk <-s disk-number> <-n vm-name>"
	exit 1
}


KVM_COMMAND=$1
shift

while [ $# -ne 0 ]; do
	case "$1" in
		-n)
			KVM_VM_NAME=$2
			shift
			;;
		-m)
			KVM_VM_MAC=$2
			shift
			;;
		-r)
			KVM_VM_RAM=$2
			shift
			;;
		-d)
			KVM_VM_DISK=$2
			shift
			;;
		-s)
			KVM_VM_COMPONENT_NUMBER=$2
			shift
			;;
		-u)
			KVM_OPENQRM_USERNAME=$2
			shift
			;;
		-p)
			KVM_OPENQRM_PASSWORD=$2
			shift
			;;
		*)
			echo "ERROR: Free commandline arguments are not allowed"
			kvm_usage
			exit 6
			;;
	esac
	shift
done




# main
if [ "$KVM_COMMAND" == "" ]; then
	kvm_usage
fi

if [ "$KVM_COMMAND" == "post_vm_list" ] || [ "$KVM_COMMAND" == "post_vm_config" ]; then
		if [ "$KVM_OPENQRM_USERNAME" == "" ]; then
			kvm_usage
		fi
		if [ "$KVM_OPENQRM_PASSWORD" == "" ]; then
			kvm_usage
		fi
else

	if [ "$KVM_COMMAND" != "list" ]; then
		if [ "$KVM_VM_NAME" == "" ]; then
			kvm_usage
		fi
	fi
fi


case "$KVM_COMMAND" in 

	create)
		if [ "$KVM_VM_MAC" == "" ]; then
			kvm_usage
		fi
		if [ "$KVM_VM_RAM" == "" ]; then
			kvm_usage
		fi
		kvm_lock aquire
		echo "Creating KVM vm $KVM_VM_NAME -> $OPENQRM_VM_DIR/$KVM_VM_NAME/$KVM_VM_NAME.kvm"
		# creating the kvm start script
		mkdir -p $OPENQRM_VM_DIR/$KVM_VM_NAME/
		cp -f $OPENQRM_KVM_VM_TEMPLATE $OPENQRM_VM_DIR/$KVM_VM_NAME/$KVM_VM_NAME.kvm

		# ram
		echo "KVM_VM_RAM=\"$KVM_VM_RAM\"" > $OPENQRM_VM_DIR/$KVM_VM_NAME/ram

		# network
		echo "KVM_VM_NET_1=\"-net nic,macaddr=$KVM_VM_MAC,model=e1000 -net tap\"" > $OPENQRM_VM_DIR/$KVM_VM_NAME/net1
		echo "KVM_VM_MAC_1=\"$KVM_VM_MAC\"" >> $OPENQRM_VM_DIR/$KVM_VM_NAME/net1
		echo "KVM_VM_NET_2=\"\"" > $OPENQRM_VM_DIR/$KVM_VM_NAME/net2
		echo "KVM_VM_MAC_2=\"\"" >> $OPENQRM_VM_DIR/$KVM_VM_NAME/net2
		echo "KVM_VM_NET_3=\"\"" > $OPENQRM_VM_DIR/$KVM_VM_NAME/net3
		echo "KVM_VM_MAC_3=\"\"" >> $OPENQRM_VM_DIR/$KVM_VM_NAME/net3
		echo "KVM_VM_NET_4=\"\"" > $OPENQRM_VM_DIR/$KVM_VM_NAME/net4
		echo "KVM_VM_MAC_4=\"\"" >> $OPENQRM_VM_DIR/$KVM_VM_NAME/net4

		# disk
		if [ "$KVM_VM_DISK" != "" ]; then
			echo "-> Creating disk"
			KVM_DISK_1="$OPENQRM_VM_DIR/$KVM_VM_NAME/disk01.img"
			if ! qemu-img create $KVM_DISK_1 $KVM_VM_DISK""M; then
				echo "ERROR: Could not create $KVM_DISK_1 for KVM vm $KVM_VM_NAME" | logger
				kvm_lock release
				exit 1
			fi
			# add the disk to the config file
			echo "KVM_VM_DISK_1=\"-drive file=$KVM_DISK_1,if=scsi\"" > $OPENQRM_VM_DIR/$KVM_VM_NAME/disk1
			echo "KVM_VM_DISK_SIZE_1=\"$KVM_VM_DISK\"" >> $OPENQRM_VM_DIR/$KVM_VM_NAME/disk1
		else
			# add empty disk disk parameter
			echo "KVM_VM_DISK_1=\"\"" > $OPENQRM_VM_DIR/$KVM_VM_NAME/disk1
			echo "KVM_VM_DISK_SIZE_1=\"\"" >> $OPENQRM_VM_DIR/$KVM_VM_NAME/disk1
		fi
		echo "KVM_VM_DISK_2=\"\"" > $OPENQRM_VM_DIR/$KVM_VM_NAME/disk2
		echo "KVM_VM_DISK_SIZE_2=\"\"" >> $OPENQRM_VM_DIR/$KVM_VM_NAME/disk2
		echo "KVM_VM_DISK_3=\"\"" > $OPENQRM_VM_DIR/$KVM_VM_NAME/disk3
		echo "KVM_VM_DISK_SIZE_3=\"\"" >> $OPENQRM_VM_DIR/$KVM_VM_NAME/disk3
		echo "KVM_VM_DISK_4=\"\"" > $OPENQRM_VM_DIR/$KVM_VM_NAME/disk4
		echo "KVM_VM_DISK_SIZE_4=\"\"" >> $OPENQRM_VM_DIR/$KVM_VM_NAME/disk4

		# vnc : check on which vnc display which can run it
		ALREADY_USED_VNC_IDS=""
		for VNC_CONF in `find $OPENQRM_VM_DIR/* -name vnc`; do
			unset KVM_VM_VNC
			. $VNC_CONF
			USED_VNC_ID=`echo $KVM_VM_VNC | cut -d':' -f2`
			ALREADY_USED_VNC_IDS="$USED_VNC_ID $ALREADY_USED_VNC_IDS"
		done
		NEW_VNC_ID=1
		while (true); do
			FOUND_VNC_ID="false"
			for VNC_ID in $ALREADY_USED_VNC_IDS; do
				if [ "$VNC_ID" == "$NEW_VNC_ID" ]; then
					FOUND_VNC_ID="true"
					continue
				fi
			done
			if [ "$FOUND_VNC_ID" == "false" ]; then
				break
			else
				NEW_VNC_ID=$(( NEW_VNC_ID + 1 ))
			fi
		done
		echo "KVM_VM_VNC=\"127.0.0.1:$NEW_VNC_ID\"" > $OPENQRM_VM_DIR/$KVM_VM_NAME/vnc

		# start
		chmod +x $OPENQRM_VM_DIR/$KVM_VM_NAME/$KVM_VM_NAME.kvm
		$OPENQRM_VM_DIR/$KVM_VM_NAME/$KVM_VM_NAME.kvm
		kvm_lock release
		;;
	start)
		kvm_lock aquire
		echo "Starting Kvm vm $KVM_VM_NAME"
		$OPENQRM_VM_DIR/$KVM_VM_NAME/$KVM_VM_NAME.kvm
		kvm_lock release
		;;
	stop)
		kvm_lock aquire
		echo "Stopping Kvm vm $KVM_VM_NAME"
		. $OPENQRM_VM_DIR/$KVM_VM_NAME/net1
		VM_PID=`ps ax | grep $KVM_VM_MAC_1 | grep kvm | grep -i screen | grep -v grep | awk {' print $1 '}`
		if [ "$VM_PID" == "" ]; then
			echo "NOTICE: Attempting to stop KVM vm $KVM_VM_NAME which is not active" | logger
		else
			kill $VM_PID
			kill -9 $VM_PID 1>/dev/null 2>&1
		fi
		kvm_lock release
		;;
	reboot)
		kvm_lock aquire
		echo "Rebooting Kvm vm $KVM_VM_NAME"
		. $OPENQRM_VM_DIR/$KVM_VM_NAME/net1
		VM_PID=`ps ax | grep $KVM_VM_MAC_1 | grep kvm | grep -i screen | grep -v grep | awk {' print $1 '}`
		if [ "$VM_PID" == "" ]; then
			echo "NOTICE: Attempting to stop KVM vm $KVM_VM_NAME which is not active" | logger
		else
			kill $VM_PID
			kill -9 $VM_PID 1>/dev/null 2>&1
		fi
		sleep 2
		$OPENQRM_VM_DIR/$KVM_VM_NAME/$KVM_VM_NAME.kvm
		kvm_lock release
		;;
	delete)
		kvm_lock aquire
		echo "Deleting Kvm vm $KVM_VM_NAME"
		# be sure it is stopped
		. $OPENQRM_VM_DIR/$KVM_VM_NAME/net1
		VM_PID=`ps ax | grep $KVM_VM_MAC_1 | grep kvm | grep -i screen | grep -v grep | awk {' print $1 '}`
		if [ "$VM_PID" != "" ]; then
			kill $VM_PID
			kill -9 $VM_PID 1>/dev/null 2>&1
		fi
		rm -rf $OPENQRM_VM_DIR/$KVM_VM_NAME
		kvm_lock release
		;;
	list)
		echo "Listing Kvm vms"
		ls $OPENQRM_VM_DIR/
		;;
	post_vm_list)
		kvm_lock aquire
		echo "Posting vm list to the openQRM-server"
		VM_LIST_TMP=$resource_id.vm_list
		ls $OPENQRM_VM_DIR/ > $VM_LIST_TMP
		if ! wget -q -O /dev/null --http-user=$KVM_OPENQRM_USERNAME --http-password=$KVM_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $VM_LIST_TMP` http://$OPENQRM_SERVER_IP/openqrm/base/plugins/kvm/kvm-action.php?kvm_server_command=get_kvm_server; then
			echo "ERROR: Could not post vm list to the openQRM-server at $OPENQRM_SERVER_IP!"
			echo "ERROR: Could not post vm list to the openQRM-server at $OPENQRM_SERVER_IP!" | logger
		fi
		rm -f $VM_LIST_TMP
		rm -f $VM_LIST_TMP.post
		kvm_lock release
		;;
	post_vm_config)
		if [ "$KVM_VM_NAME" == "" ]; then
			kvm_usage
		fi
		kvm_lock aquire
		echo "Posting vm config for $KVM_VM_NAME to the openQRM-server"
		VM_CONFIG_TMP=$resource_id.$KVM_VM_NAME.vm_config
		. $OPENQRM_VM_DIR/$KVM_VM_NAME/ram
		. $OPENQRM_VM_DIR/$KVM_VM_NAME/net1
		. $OPENQRM_VM_DIR/$KVM_VM_NAME/net2
		. $OPENQRM_VM_DIR/$KVM_VM_NAME/net3
		. $OPENQRM_VM_DIR/$KVM_VM_NAME/net4
		. $OPENQRM_VM_DIR/$KVM_VM_NAME/disk1
		. $OPENQRM_VM_DIR/$KVM_VM_NAME/disk2
		. $OPENQRM_VM_DIR/$KVM_VM_NAME/disk3
		. $OPENQRM_VM_DIR/$KVM_VM_NAME/disk4
		. $OPENQRM_VM_DIR/$KVM_VM_NAME/vnc
		echo "OPENQRM_KVM_VM_RAM=\"$KVM_VM_RAM\"" > $VM_CONFIG_TMP
		echo "OPENQRM_KVM_VM_NET_1=\"$KVM_VM_NET_1\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_KVM_VM_MAC_1=\"$KVM_VM_MAC_1\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_KVM_VM_NET_2=\"$KVM_VM_NET_2\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_KVM_VM_MAC_2=\"$KVM_VM_MAC_2\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_KVM_VM_NET_3=\"$KVM_VM_NET_3\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_KVM_VM_MAC_3=\"$KVM_VM_MAC_3\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_KVM_VM_NET_4=\"$KVM_VM_NET_4\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_KVM_VM_MAC_4=\"$KVM_VM_MAC_4\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_KVM_VM_DISK_1=\"$KVM_VM_DISK_1\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_KVM_VM_DISK_SIZE_1=\"$KVM_VM_DISK_SIZE_1\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_KVM_VM_DISK_2=\"$KVM_VM_DISK_2\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_KVM_VM_DISK_SIZE_2=\"$KVM_VM_DISK_SIZE_2\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_KVM_VM_DISK_3=\"$KVM_VM_DISK_3\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_KVM_VM_DISK_SIZE_3=\"$KVM_VM_DISK_SIZE_3\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_KVM_VM_DISK_4=\"$KVM_VM_DISK_4\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_KVM_VM_DISK_SIZE_4=\"$KVM_VM_DISK_SIZE_4\"" >> $VM_CONFIG_TMP
		echo "OPENQRM_KVM_VM_VNC=\"$KVM_VM_VNC\"" >> $VM_CONFIG_TMP
		if ! wget -q -O /dev/null --http-user=$KVM_OPENQRM_USERNAME --http-password=$KVM_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $VM_CONFIG_TMP` http://$OPENQRM_SERVER_IP/openqrm/base/plugins/kvm/kvm-action.php?kvm_server_command=get_kvm_config; then
			echo "ERROR: Could not post vm config to the openQRM-server at $OPENQRM_SERVER_IP!"
			echo "ERROR: Could not post vm config to the openQRM-server at $OPENQRM_SERVER_IP!" | logger
		fi
		rm -f $VM_CONFIG_TMP
		rm -f $VM_CONFIG_TMP.post
		kvm_lock release
		;;

	update_vm_ram)
		if [ "$KVM_VM_NAME" == "" ]; then
			kvm_usage
		fi
		if [ "$KVM_VM_RAM" == "" ]; then
			kvm_usage
		fi
		kvm_lock aquire
		echo "Updating KVM vm $KVM_VM_NAME with $KVM_VM_RAM Memory"
		sed -i -e s"#KVM_VM_RAM=.*#KVM_VM_RAM=\"$KVM_VM_RAM\"#g" $OPENQRM_VM_DIR/$KVM_VM_NAME/ram
		kvm_lock release
		;;


	add_vm_nic)
		if [ "$KVM_VM_NAME" == "" ]; then
			kvm_usage
		fi
		if [ "$KVM_VM_MAC" == "" ]; then
			kvm_usage
		fi
		if [ "$KVM_VM_COMPONENT_NUMBER" == "" ]; then
			kvm_usage
		fi
		kvm_lock aquire
		echo "Addking nic $KVM_VM_COMPONENT_NUMBER size $KVM_VM_DISK to KVM vm $KVM_VM_NAME"
		sed -i -e s"#KVM_VM_NET_$KVM_VM_COMPONENT_NUMBER=.*#KVM_VM_NET_$KVM_VM_COMPONENT_NUMBER=\"-net nic,macaddr=$KVM_VM_MAC,model=rtl8139\"#g" $OPENQRM_VM_DIR/$KVM_VM_NAME/net""$KVM_VM_COMPONENT_NUMBER
		sed -i -e s"#KVM_VM_MAC_$KVM_VM_COMPONENT_NUMBER=.*#KVM_VM_MAC_$KVM_VM_COMPONENT_NUMBER=\"$KVM_VM_MAC\"#g" $OPENQRM_VM_DIR/$KVM_VM_NAME/net""$KVM_VM_COMPONENT_NUMBER
		kvm_lock release
		;;
	remove_vm_nic)
		if [ "$KVM_VM_NAME" == "" ]; then
			kvm_usage
		fi
		if [ "$KVM_VM_COMPONENT_NUMBER" == "" ]; then
			kvm_usage
		fi
		kvm_lock aquire
		echo "Removing nic $KVM_VM_COMPONENT_NUMBER from KVM vm $KVM_VM_NAME"
		sed -i -e s"#KVM_VM_NET_$KVM_VM_COMPONENT_NUMBER=.*#KVM_VM_NET_$KVM_VM_COMPONENT_NUMBER=\"\"#g" $OPENQRM_VM_DIR/$KVM_VM_NAME/net""$KVM_VM_COMPONENT_NUMBER
		sed -i -e s"#KVM_VM_MAC_$KVM_VM_COMPONENT_NUMBER=.*#KVM_VM_MAC_$KVM_VM_COMPONENT_NUMBER=\"\"#g" $OPENQRM_VM_DIR/$KVM_VM_NAME/net""$KVM_VM_COMPONENT_NUMBER
		kvm_lock release
		;;



	add_vm_disk)
		if [ "$KVM_VM_NAME" == "" ]; then
			kvm_usage
		fi
		if [ "$KVM_VM_DISK" == "" ]; then
			kvm_usage
		fi
		if [ "$KVM_VM_COMPONENT_NUMBER" == "" ]; then
			kvm_usage
		fi
		kvm_lock aquire
		echo "Addking disk $KVM_VM_COMPONENT_NUMBER size $KVM_VM_DISK to KVM vm $KVM_VM_NAME"
		sed -i -e s"#KVM_VM_DISK_$KVM_VM_COMPONENT_NUMBER=.*#KVM_VM_DISK_$KVM_VM_COMPONENT_NUMBER=\"-drive file=$OPENQRM_VM_DIR/$KVM_VM_NAME/disk0$KVM_VM_COMPONENT_NUMBER.img,if=scsi\"#g" $OPENQRM_VM_DIR/$KVM_VM_NAME/disk""$KVM_VM_COMPONENT_NUMBER
		sed -i -e s"#KVM_VM_DISK_SIZE_$KVM_VM_COMPONENT_NUMBER=.*#KVM_VM_DISK_SIZE_$KVM_VM_COMPONENT_NUMBER=\"$KVM_VM_DISK\"#g" $OPENQRM_VM_DIR/$KVM_VM_NAME/disk""$KVM_VM_COMPONENT_NUMBER
		KVM_DISK_FILE="$OPENQRM_VM_DIR/$KVM_VM_NAME/disk0$KVM_VM_COMPONENT_NUMBER.img"
		if ! qemu-img create $KVM_DISK_FILE $KVM_VM_DISK""M; then
			echo "ERROR: Could not create $KVM_DISK_FILE for KVM vm $KVM_VM_NAME" | logger
			kvm_lock release
			exit 1
		fi
		kvm_lock release
		;;
	remove_vm_disk)
		if [ "$KVM_VM_NAME" == "" ]; then
			kvm_usage
		fi
		if [ "$KVM_VM_COMPONENT_NUMBER" == "" ]; then
			kvm_usage
		fi
		kvm_lock aquire
		echo "Removing disk $KVM_VM_COMPONENT_NUMBER from KVM vm $KVM_VM_NAME"
		sed -i -e s"#KVM_VM_DISK_$KVM_VM_COMPONENT_NUMBER=.*#KVM_VM_DISK_$KVM_VM_COMPONENT_NUMBER=\"\"#g" $OPENQRM_VM_DIR/$KVM_VM_NAME/disk""$KVM_VM_COMPONENT_NUMBER
		sed -i -e s"#KVM_VM_DISK_SIZE_$KVM_VM_COMPONENT_NUMBER=.*#KVM_VM_DISK_SIZE_$KVM_VM_COMPONENT_NUMBER=\"\"#g" $OPENQRM_VM_DIR/$KVM_VM_NAME/disk""$KVM_VM_COMPONENT_NUMBER
		rm -f $OPENQRM_VM_DIR/$KVM_VM_NAME/disk0$KVM_VM_COMPONENT_NUMBER.img
		kvm_lock release
		;;
	*)
		kvm_usage
		;;


esac

