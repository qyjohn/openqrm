#!/bin/bash
#
# This file is part of openQRM.
#
# openQRM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# openQRM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with openQRM.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2009, Matthias Rechenburg <matt@openqrm.com>
#

# this script automatically manages aws
OPENQRM_SERVER_BASE_DIR=$(dirname $0)/../../../..
OPENQRM_SERVER_BASE_DIR=$(pushd $OPENQRM_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/aws/include/openqrm-plugin-aws-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/aws/etc/openqrm-plugin-aws.conf
# get the ip config
. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions
openqrm_server_get_config
export LANG=C
export resource_openqrmserver=$OPENQRM_SERVER_IP_ADDRESS
# stat dir
AWS_STAT_DIR="$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/aws/web/aws-stat/"

# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	echo "ERROR: Please run this script as root!"
	exit 6
fi

if ! which screen 1>/dev/null; then
	echo "ERROR: The 'screen' utility is not installed! Please install and try again."
	aws_log "ERROR: The 'screen' utility is not installed! Please install and try again."
	exit 6
fi

# re-run in background via screen
if [ "$RUN_IN_BACKGROUND" != "true" ]; then
    if [ -x /usr/bin/screen.real ]; then
        RUNSCREEN="/usr/bin/screen.real"
    else
        RUNSCREEN=`which screen`
    fi
    export RUN_IN_BACKGROUND=true
    SCREEN_NAME=`date +%T%x | sed -e "s/://g" | sed -e "s#/##g"`
    $RUNSCREEN -dmS $SCREEN_NAME $0 $@
    exit
fi
# create stat dir
if [ ! -d "$AWS_STAT_DIR" ]; then
    mkdir -p $AWS_STAT_DIR
    chmod -R 777 $AWS_STAT_DIR
fi


function aws_usage() {
	echo "Usage : $0 describe_instances -j <java-home> -e <ec2-home> -p <ec2-private-key> -c <ec2-cert> -i <openQRM-aws-account-id> [ -u <ec2-region-url> ]"
	echo "        $0 import_instance -j <java-home> -e <ec2-home> -p <ec2-private-key> -c <ec2-cert> -x <instance-id> -k <ssh-key> -s <image-storage:/image-path/> [ -u <ec2-region-url> ]"
	echo "        $0 export_image -j <java-home> -e <ec2-home> -p <ec2-private-key> -c <ec2-cert> -s <image-storage:/image-path/> -a <ami-tools-dir> -m <ami-size(in MB)> -r <ami-architecture> -n <ami-name> -b <s3-bucket> -w <aws-account-number> -y <aws-access-key> -z <aws-secret-access-key> [ -u <ec2-region-url> ]"
	exit 1
}


AWS_COMMAND=$1
shift

while [ $# -ne 0 ]; do
	case "$1" in
		-i)
			PARAM_AWS_ACCOUNT_ID=$2
			shift
			;;
		-w)
			PARAM_AWS_ACCOUNT=$2
			shift
			;;
		-j)
			PARAM_JAVA_HOME=$2
			shift
			;;
		-e)
			PARAM_EC2_HOME=$2
			shift
			;;
		-a)
			PARAM_EC2_AMITOOL_HOME=$2
			shift
			;;
		-p)
			PARAM_EC2_PRIVATE_KEY=$2
			shift
			;;
		-c)
			PARAM_EC2_CERT=$2
			shift
			;;
		-u)
			PARAM_EC2_URL=$2
			shift
			;;
		-s)
			PARAM_IMAGE_STORE=$2
			shift
			;;
		-x)
			PARAM_INSTANCE_ID=$2
			shift
			;;
		-k)
			PARAM_SSH_KEY=$2
			shift
			;;
		-m)
			PARAM_AMI_SIZE=$2
			shift
			;;
		-r)
			PARAM_AMI_ARCH=$2
			shift
			;;
		-n)
			PARAM_AMI_NAME=$2
			shift
			;;
		-b)
			PARAM_S3_BUCKET=$2
			shift
			;;
		-y)
			PARAM_PUBLIC_ACCESS_KEY=$2
			shift
			;;

		-z)
			PARAM_SECRET_ACCESS_KEY=$2
			shift
			;;
		*)
			echo "ERROR: Free commandline arguments are not allowed"
			aws_usage
			exit 6
			;;
	esac
	shift
done

# checks
if [ "$AWS_COMMAND" == "" ]; then
	aws_usage
fi
if [ "$PARAM_JAVA_HOME" == "" ] || [ "$PARAM_EC2_HOME" == "" ] || [ "$PARAM_EC2_PRIVATE_KEY" == "" ] || [ "$PARAM_EC2_CERT" == "" ] || [ "$PARAM_AWS_ACCOUNT_ID" == "" ]; then
	aws_usage
fi
# default region
if [ "$PARAM_EC2_URL" == "" ]; then
	PARAM_EC2_URL="https://eu-west-1.ec2.amazonaws.com"
fi

JAVA_HOME=$PARAM_JAVA_HOME
EC2_HOME=$PARAM_EC2_HOME
EC2_AMITOOL_HOME=$PARAM_EC2_AMITOOL_HOME
EC2_PRIVATE_KEY=$PARAM_EC2_PRIVATE_KEY
EC2_CERT=$PARAM_EC2_CERT
EC2_URL=$PARAM_EC2_URL
export JAVA_HOME
export EC2_HOME
export EC2_PRIVATE_KEY
export EC2_CERT
export EC2_URL
export EC2_AMITOOL_HOME


# main
case "$AWS_COMMAND" in

	describe_instances)
		openqrm_post_event 0 "describe_instances" 5 "openqrm-aws" "Listing active AWS instances"
        $EC2_HOME/bin/ec2-describe-instances > $AWS_STAT_DIR/$PARAM_AWS_ACCOUNT_ID.ec2_describe_instances.log.tmp.1
        AWS_RET=$?
        if [ "$AWS_RET" != 0 ]; then
    		openqrm_post_event 0 "get" 3 "openqrm-aws" "Could not list active AWS instances. Please check the aws-plugin configuration !"
        else
            grep INSTANCE $AWS_STAT_DIR/$PARAM_AWS_ACCOUNT_ID.ec2_describe_instances.log.tmp.1 | grep running > $AWS_STAT_DIR/$PARAM_AWS_ACCOUNT_ID.ec2_describe_instances.log.tmp
            sed -i -e "s/\x09/@/g" $AWS_STAT_DIR/$PARAM_AWS_ACCOUNT_ID.ec2_describe_instances.log.tmp
            sed -i -e "s/\x20/@/g" $AWS_STAT_DIR/$PARAM_AWS_ACCOUNT_ID.ec2_describe_instances.log.tmp
            chmod -R 777 $AWS_STAT_DIR/$PARAM_AWS_ACCOUNT_ID.ec2_describe_instances.log.tmp
            mv -f $AWS_STAT_DIR/$PARAM_AWS_ACCOUNT_ID.ec2_describe_instances.log.tmp $AWS_STAT_DIR/$PARAM_AWS_ACCOUNT_ID.ec2_describe_instances.log
            rm -f $AWS_STAT_DIR/$PARAM_AWS_ACCOUNT_ID.ec2_describe_instances.log.tmp.1 $AWS_STAT_DIR/$PARAM_AWS_ACCOUNT_ID.ec2_describe_instances.log.tmp
        fi
		;;

	import_instance)
        if [ "$PARAM_INSTANCE_ID" == "" ] || [ "$PARAM_IMAGE_STORE" == "" ] || [ "$PARAM_SSH_KEY" == "" ]; then
            aws_usage
        fi

		aws_log "NOTICE: Importing AWS Instance $PARAM_INSTANCE_ID to Server Image at $PARAM_IMAGE_STORE"
		aws_log "NOTICE: -> using ssh-key file $PARAM_SSH_KEY"

		MOUNTPOINT=`mktemp -d /tmp/$PARAM_INSTANCE_ID.XXXXXXXXXX` || exit 1
		if ! mount -t nfs $PARAM_IMAGE_STORE $MOUNTPOINT; then
			aws_log "ERROR: Could not mount $PARAM_IMAGE_STORE!"
			openqrm_post_event 0 "import_instance" 3 "openqrm-aws" "Could not mount $PARAM_IMAGE_STORE!"
			exit 1
		else
			aws_log "NOTICE: Mounted $PARAM_IMAGE_STORE. Starting the import."
			openqrm_post_event 0 "import_instance" 5 "openqrm-aws" "Mounted $PARAM_IMAGE_STORE. Starting the import."
		fi

        # starting import via rsync
        INSTANCE_HOSTNAME=`$EC2_HOME/bin/ec2-describe-instances $PARAM_INSTANCE_ID | grep INSTANCE | awk {' print $4 '}`
        if [ "$INSTANCE_HOSTNAME" == "" ]; then
            umount $MOUNTPOINT
            rmdir $MOUNTPOINT
            aws_log "ERROR: Could not get hostname from AWS Instance $PARAM_INSTANCE_ID"
            openqrm_post_event 0 "import_instance" 3 "openqrm-aws" "Could not get hostname from AWS Instance $PARAM_INSTANCE_ID"
            exit 1
        else
            aws_log "NOTICE: Got hostname $INSTANCE_HOSTNAME for AWS Instance $PARAM_INSTANCE_ID"
            openqrm_post_event 0 "import_instance" 5 "openqrm-aws" "Got hostname $INSTANCE_HOSTNAME for AWS Instance $PARAM_INSTANCE_ID"
        fi
        # run one simple command per expetc + ssh so the machine key gets accpeted and added to known_hosts
        aws_log "NOTICE: Checking ssh connection to $INSTANCE_HOSTNAME via key $PARAM_SSH_KEY"
        $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/aws/bin/openqrm-aws-ssh $INSTANCE_HOSTNAME $PARAM_SSH_KEY

        aws_log "NOTICE: Starting AMI import of $INSTANCE_HOSTNAME to $PARAM_IMAGE_STORE"
        #AWSC="rsync -avz -e \"ssh -i $PARAM_SSH_KEY\" --exclude /proc --exclude /sys $INSTANCE_HOSTNAME:/* $MOUNTPOINT/"
        #echo "RUNNING : $AWSC" | logger
        rsync -avz -e "ssh -i $PARAM_SSH_KEY" --exclude /proc --exclude /sys $INSTANCE_HOSTNAME:/* $MOUNTPOINT/
        if ! [ $? == 24 -o $? == 0 ] ; then
            umount $MOUNTPOINT
            rmdir $MOUNTPOINT
            aws_log "ERROR: Error importing AWS Instance $PARAM_INSTANCE_ID"
            openqrm_post_event 0 "import_instance" 3 "openqrm-aws" "Error importing AWS Instance $PARAM_INSTANCE_ID"
            exit 1
        fi
        mkdir -p $MOUNTPOINT/proc $MOUNTPOINT/sys
		umount $MOUNTPOINT
		rmdir $MOUNTPOINT
		aws_log "NOTICE: Successfully created Server-image from AWS Instance $PARAM_INSTANCE_ID"
		openqrm_post_event 0 "import_instance" 5 "openqrm-aws" "Successfully imported AWS Instance $PARAM_INSTANCE_ID to Server Image at $PARAM_IMAGE_STORE"
	
		;;


	export_image)
        if [ "$PARAM_IMAGE_STORE" == "" ]; then
            aws_usage
        fi
        if [ "$PARAM_AMI_SIZE" == "" ] || [ "$PARAM_AMI_NAME" == "" ] || [ "$PARAM_S3_BUCKET" == "" ] || [ "$PARAM_AWS_ACCOUNT" == "" ]; then
            aws_usage
        fi
        if [ "$PARAM_PUBLIC_ACCESS_KEY" == "" ] || [ "$PARAM_SECRET_ACCESS_KEY" == "" ] || [ "$PARAM_AMI_ARCH" == "" ]; then
            aws_usage
        fi

        PARAM_AWS_ACCOUNT=`echo $PARAM_AWS_ACCOUNT | sed -e "s/-//g"`
		aws_log "NOTICE: Exporting Server Image at $PARAM_IMAGE_STORE to AWS as a new AMI $PARAM_AMI_NAME using S3 bucket $PARAM_S3_BUCKET"

		MOUNTPOINT=`mktemp -d /tmp/image-mnt.XXXXXXXXXX` || exit 1
		if ! mount -t nfs $PARAM_IMAGE_STORE $MOUNTPOINT; then
			aws_log "ERROR: Could not mount $PARAM_IMAGE_STORE!"
			openqrm_post_event 0 "export_image" 3 "openqrm-aws" "Could not mount $PARAM_IMAGE_STORE!"
			exit 1
		else
			aws_log "NOTICE: Mounted $PARAM_IMAGE_STORE."
			openqrm_post_event 0 "export_image" 5 "openqrm-aws" "Mounted $PARAM_IMAGE_STORE."
		fi
		LOOP_IMAGE_FILE="/tmp/$PARAM_AMI_NAME.img"
		LOOP_IMAGE_MNT=`mktemp -d /tmp/image-loop-mnt.XXXXXXXXXX` || exit 1
        dd if=/dev/zero of=$LOOP_IMAGE_FILE bs=1M seek=$PARAM_AMI_SIZE count=1
        mkfs.ext3 -F $LOOP_IMAGE_FILE
		if ! mount -o loop $LOOP_IMAGE_FILE $LOOP_IMAGE_MNT; then
			aws_log "ERROR: Could not loop mount $LOOP_IMAGE_FILE!"
			openqrm_post_event 0 "export_image" 3 "openqrm-aws" "Could not loop mount $LOOP_IMAGE_FILE!"
			exit 1
		else
			aws_log "NOTICE: Loop mounted $LOOP_IMAGE_FILE."
			openqrm_post_event 0 "export_image" 5 "openqrm-aws" "Mounted $PARAM_IMAGE_STORE."
		fi
        rsync -az $MOUNTPOINT/* $LOOP_IMAGE_MNT/
        if ! [ $? == 24 -o $? == 0 ] ; then
            umount $MOUNTPOINT
            rmdir $MOUNTPOINT
            aws_log "ERROR: Syncing the Image to loop-back file failed. Exiting"
            openqrm_post_event 0 "export_image" 3 "openqrm-aws" "Syncing the Image to loop-back file failed. Exiting"
            exit 1
        fi

        # modify it a bit to fit to ec2
        rm -rf $LOOP_IMAGE_MNT/$OPENQRM_SERVER_BASE_DIR/openqrm
        rm -f $LOOP_IMAGE_MNT/iauth*
        cd $LOOP_IMAGE_MNT/etc
        rm -f `find -name openqrm-client`
        cd - 1>/dev/null
        # create network config
        if [ -f $LOOP_IMAGE_MNT/etc/debian_version ]; then
        rm -f $LOOP_IMAGE_MNT/etc/network/interfaces
        cat >> $LOOP_IMAGE_MNT/etc/network/interfaces << EOF
auto lo
iface lo inet loopback
auto eth0
iface eth0 inet dhcp
EOF
        elif [ -f $LOOP_IMAGE_MNT/etc/redhat-release ]; then

            cat >> $LOOP_IMAGE_MNT/etc/sysconfig/network-scripts/ifcfg-eth0 << EOF
DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes
TYPE=Ethernet
USERCTL=yes
PEERDNS=yes
IPV6INIT=no
EOF
            echo "NETWORKING=yes" > $LOOP_IMAGE_MNT/etc/sysconfig/network.
        fi
            # re-create fstab / small instances only for now
            rm -f $LOOP_IMAGE_MNT/etc/fstab
            cat >> $LOOP_IMAGE_MNT/etc/fstab << EOF
/dev/sda1  /         ext3    defaults        1 1
/dev/sda2  /mnt      ext3    defaults        1 2
/dev/sda3  swap      swap    defaults        0 0
none       /dev/pts  devpts  gid=5,mode=620  0 0
none       /dev/shm  tmpfs   defaults        0 0
none       /proc     proc    defaults        0 0
none       /sys      sysfs   defaults        0 0
EOF

        # create required devices
        mknod $LOOP_IMAGE_MNT/dev/zero c 1 5
        mknod $LOOP_IMAGE_MNT/dev/null c 1 3
        mknod $LOOP_IMAGE_MNT/dev/tty c 5 0
        mknod $LOOP_IMAGE_MNT/dev/console c 5 1
        mknod $LOOP_IMAGE_MNT/dev/ptmx c 5 2
        mknod $LOOP_IMAGE_MNT/dev/tty0 c 4 0
        mknod $LOOP_IMAGE_MNT/dev/tty1 c 4 1

        # umounting
		umount $MOUNTPOINT
		rmdir $MOUNTPOINT
		umount $LOOP_IMAGE_MNT
		rmdir $LOOP_IMAGE_MNT

        # bundle
        aws_log "BUNDLING: $EC2_AMITOOL_HOME/bin/ec2-bundle-image -i $LOOP_IMAGE_FILE -c $EC2_CERT -k $EC2_PRIVATE_KEY -u $PARAM_AWS_ACCOUNT -r $PARAM_AMI_ARCH"
		if ! $EC2_AMITOOL_HOME/bin/ec2-bundle-image -i $LOOP_IMAGE_FILE -c $EC2_CERT -k $EC2_PRIVATE_KEY -u $PARAM_AWS_ACCOUNT -r $PARAM_AMI_ARCH; then
			aws_log "ERROR: Bundling AMI $LOOP_IMAGE_FILE! failed"
			#openqrm_post_event 0 "export_image" 3 "openqrm-aws" "Bundling AMI $LOOP_IMAGE_FILE! failed"
			exit 1
		else
			aws_log "NOTICE: Successfully bundled $LOOP_IMAGE_FILE."
			openqrm_post_event 0 "export_image" 5 "openqrm-aws" "Successfully bundled $LOOP_IMAGE_FILE."
		fi
        # upload
        if echo $EC2_URL | grep us; then
            AWS_AMI_REGION="US"
        elif echo $EC2_URL | grep eu; then
            AWS_AMI_REGION="EU"
        fi
        aws_log "UPLOADING: $EC2_AMITOOL_HOME/bin/ec2-upload-bundle -b $PARAM_S3_BUCKET -m /tmp/$PARAM_AMI_NAME.img.manifest.xml -a $PARAM_PUBLIC_ACCESS_KEY -s $PARAM_SECRET_ACCESS_KEY --location $AWS_AMI_REGION"
		if ! $EC2_AMITOOL_HOME/bin/ec2-upload-bundle -b $PARAM_S3_BUCKET -m /tmp/$PARAM_AMI_NAME.img.manifest.xml -a $PARAM_PUBLIC_ACCESS_KEY -s $PARAM_SECRET_ACCESS_KEY --location $AWS_AMI_REGION; then
			aws_log "ERROR: Uploading bundled AMI $LOOP_IMAGE_FILE! failed"
			openqrm_post_event 0 "export_image" 3 "openqrm-aws" "Uploading bundled AMI $LOOP_IMAGE_FILE! failed"
			exit 1
		else
			aws_log "NOTICE: Successfully uploaded bundled AMI $LOOP_IMAGE_FILE."
			openqrm_post_event 0 "export_image" 5 "openqrm-aws" "Successfully uploaded bundled AMI $LOOP_IMAGE_FILE."
		fi

        # register
        aws_log "REGISTER: $EC2_HOME/bin/ec2-register -U $EC2_URL $PARAM_S3_BUCKET/$PARAM_AMI_NAME.img.manifest.xml"
        AWS_AMI_NAME=`$EC2_HOME/bin/ec2-register -U $EC2_URL $PARAM_S3_BUCKET/$PARAM_AMI_NAME.img.manifest.xml | awk {' print $2 '}`
		aws_log "NOTICE: Successfully exported Server-image from $PARAM_IMAGE_STORE to AWS AMI $AWS_AMI_NAME"
		openqrm_post_event 0 "import_instance" 5 "openqrm-aws" "Successfully exported Server-image from $PARAM_IMAGE_STORE to AWS AMI $AWS_AMI_NAME"
		;;



	*)
		aws_usage
		;;


esac

